MZê       ˇˇ  ∏       @                                   Ä   ∫ ¥	Õ!∏LÕ!This program cannot be run in DOS mode.$       PE  L ÔH        ‡ !  ∞         ˛∆      ‡                                    @                           §∆ W    ‡ ∞                                                                                          H           .text   ß      ∞                   `.rsrc   ∞   ‡     ¿             @  @.reloc            –‡∆     H     Äo $W         HP  8                                         0      r  p
o  
o  
•   ˛* 0 :     ru  p
o  
~  
å  o  
~  
å  o  
(  
o  
*  0 K     rÿ p
~  
å   o  
&o  
~  
å   o  
~  
å  o  
(  
o  
* 0      r p
o  
o  
t!  *0      r¢ p
(  

o  
o  
&*(  
*B(  
}  *   0 M     ~  
r po  

{  
o  
o  
{  
o  
o  
&ﬁr* po  
(  
(  
z*         44 $  0 *     –	  (!  
("  
t	  
s  o#  
r† p*($  
*  0 ≠    -r¢ p*r† p
o%  
–  (!  
@⁄   •  (&  
('  
((  
r¶ p()  
,r∞ p
8O  ('  
((  
r¬ p()  
,rÃ p
8(  ('  
((  
rﬁ p()  
,rË p
8  ('  
((  
(  

r˙ p(*  
å   (  
(  

r˙ p(+  
å   (  
(  

8´  –  (!  
@@  •  ('  
		((  
r¶ p()  
,r p
8l  ('  


((  
r¬ p()  
,r0 p
8E  ('  
((  
rﬁ p()  
,rX p
8  ('  
((  
rÄ p(,  

r˙ p(*  
å   (  
rÄ p(,  

r˙ p(+  
å   (  
rÑ p(,  

r˙ p(-  
å   (  
rà p(,  

r˙ p(.  
å   (  
rà p(,  

r˙ p(/  
å   (  
(  

+[–!  (!  
3,-r¢ p
+Ct!  
rå prê po0  

o1  

+"–  (!  
3•  (2  

+o3  

*($  
*   0 )     {  o  

u  -u  ,

o4  

*Js  }  ($  
*0 Ç       s  }  s  }  (  
o  
rñ po5  
}  {  -r∞ p(6  
z~  
r˙ po7  
}  {  -r  p(6  
zrÑ p(8  
}  *  0 Z     o  
o9  
o:  
+o;  
t  o<  
o3  
(  o=  
-⁄ﬁu/  	,	o>  
‹s_  }?  
*      *=     0 Œ     (&  

r† p ('  
((  
r¶ p()  
,r∞ p8ò    ('  
((  
r¬ p()  
,rÃ p+u ('  
((  
rﬁ p()  
,rË p+Q ('  
((  
(  
r˙ p (*  
å   (  
(  
r˙ p (+  
å   (  
(  
*  0     
{  (  {  {@  
,){  {@  
r† p()  
-{  {@  
(A  
+(B  
sC  
o  	o  oD  
	(  oD  
o9  
o:  
+ o;  
t  	(  oD  
X
o=  
-◊ﬁu/  ,o>  
‹	(  oE  
ﬁ3u%  ,(F  
zré pr¬ po  
(G  
(H  
zﬁ
	(  ‹*(   á -¥       ^ zÿ 3$   ^ Ø
    0 è   	  {I  
o1  

o  (J  
-(K  
&ﬁr» p(H  
z{I  
~L  
(M  
oN  
-~L  
(M  
(  

r† p()  
-r† p()  
,r  p(O  
z(P  
*      	% 7  z,oQ  
,(R  
,(S  
* 0 Á  
  sT  

8≠  oU  
oV  
oW  
oX  
–  (!  
3aoU  
oV  
oW  
oY  
-7rå p{  o<  
•  å  o  
rå p(,  
oZ  
&8+  rê poZ  
&8  oU  
oV  
oW  
oX  
–!  (!  
3\oU  
oV  
oW  
oY  
-2rå p{  o<  
o3  
o  
rå p(,  
oZ  
&8≠   rê poZ  
&8ú   oU  
oV  
oW  
oX  
–  (!  
3>oU  
oV  
oW  
oY  
-a{  o<  
•  å  o  
oZ  
&+<oU  
oV  
oW  
oY  
-#{  o<  
•   å   o  
oZ  
&rJ poZ  
&XoU  
oV  
o[  
?=˛ˇˇo\  
Yo]  
&o3  
* 0 b     r† p
oV  
o:  
+#o;  
t;  rå po^  
rN p(G  

o=  
-’ﬁu/  	,	o>  
‹o_  
Yo`  
*      /A     0 0     {  (a  
å  o  

((  
rT prå p(G  
*&(  *  0 s     o(  sb  

(  ç!  o  oc  
¢rZ p¢o  oc  
¢rZ p¢o  oc  
¢rZ p¢¢r^ p¢(d  
* 0 m     o(  sb  

(  {  (a  
å  o  
rh pç  	o  ¢	o  ¢	¢	o  ¢	¢	o  ¢	(e  
*   0 9     r∞ p{  rŒ p(G  

{  
o  
o  
{  
o  
o  
*   0 9    r† p
ç!  r⁄ p¢{  ¢rN p¢¢r’ p¢(d  
{  
o  
o  
{  
o  
o  
o3  
rZ p(,  

ç!  	rŸ p¢	{  ¢	rN p¢	¢	r’ p¢	(d  
{  
o  
o  
{  
o  
o  
o3  
rZ p(,  

ç!  r^ p¢{  ¢rN p¢¢r’ p¢(d  
{  
o  
o  
{  
o  
o  
o3  
(  

*   0 Z     ç!  r‹ p¢{  ¢r: p¢¢r’ p¢(d  

{  
o  
o  
{  
o  
o  
o3  
*  0 Z     ç!  r¶ p¢{  ¢r: p¢¢r’ p¢(d  

{  
o  
o  
{  
o  
o  
o3  
*  0 =     rÙ p{  rJ p(,  

{  
o  
o  
{  
o  
o  
o3  
*B(   }  *  0 (     r` p{  rê p(,  

{  
o  
o  
*0 =     rÿ p{  r p{  |  ((  
(G  

{  
o  
o  
•  *B(   }	  *  0 (     r` p{  rJ p(,  

{  
o  
o  
*0 -     rí p{  rJ p(,  

{  
o  
o  
•  *≤(  }
  r∆ p(8  
}  s  }  *  0 P     r“ p{  rŒ p(G  

{
  {$  å   (  

{  
o  
o  
{  
o  
o  
*0 (     r` p{  r p(,  

{  
o  
o  
*0 ~     {
  {$  (4  sb  

(  ç!  o  oc  
¢rZ p¢o  oc  
¢rZ p¢o  oc  
¢rZ p¢¢r^ p¢(d  
*  0 Ö     {  {
  {$  (4  å  o  


o4  

{  (a  
å  o  
rh pç  o  ¢o  ¢¢o  ¢¢o  ¢(e  
*   0 D     r p{  r> p((  
(G  

{  
o  
o  
{  
o  
o  
•  *0 9    r† p
ç!  rÜ p¢{  ¢r˙ p¢¢r’ p¢(d  
{  
o  
o  
{  
o  
o  
o3  
rZ p(,  

ç!  	rÅ p¢	{  ¢	r˙ p¢	¢	r’ p¢	(d  
{  
o  
o  
{  
o  
o  
o3  
rZ p(,  

ç!  r p¢{  ¢r˙ p¢¢r’ p¢(d  
{  
o  
o  
{  
o  
o  
o3  
(  

*   0 Z     ç!  rÑ p¢{  ¢r‚ p¢¢r’ p¢(d  

{  
o  
o  
{  
o  
o  
o3  
*  0 Z     ç!  rN p¢{  ¢r‚ p¢¢r’ p¢(d  

{  
o  
o  
{  
o  
o  
o3  
*  0 =     rú p{  rÚ p(,  

{  
o  
o  
{  
o  
o  
o3  
*   0 n       (  
}  ~  
r˙ po7  
}  {  -r  p(6  
zo  
rñ po5  
}  {  -r p(6  
z{  }  *  0 o     rZ p
{  {  å   (  

{  
o  
o  
•   / r› p|  ((  
r˜ p(,  
(O  
z(;  (<  s]  }?  
* 0 k     ~  
rC po  

{  å   {  {  (f  

{  
o  
o  
{  
o  
o  
&ﬁr[ po  
(  
(  
z*       RR $  0 k     ~  
r— po  

{  å   {  {  (f  

{  
o  
o  
{  
o  
o  
&ﬁr˜ po  
(  
(  
z*       RR $  Í(  
}  o  
rñ po5  
}  {  -r p(6  
z*J(?  si  }?  
*  0 k     {  
{  (  ~  
re  po  

{  (  

{  
o  
o  
{  
o  
o  
&ﬁrâ  po  
(  
(  
z*       RR $  0 F       (  
}  o  
rñ po5  
}  {  -r p(6  
zog  
}  *  0 ∑     ~  
r! po  

{  |"  r%! p(h  
{  {  (f  

{  
o  
o  
{  
o  
o  
&ﬁr)! po  
(  
(  
zró! p{  {  (  
se  	{  
o  
o  
o3  
}#  	}?  
*       \\ $  Ü(  
}  oj  
r*" pok  
*  0 ø    r^" p
{  
ræ" pol  
{  
o  
om  
{  
(  ,{  
{n  
rÏ" poo  
(6  
z{  
(  ~  
r# po  
	{  |  ((  
r’ pr’ p(,  
(  
{  
o  
	o  
{  
o  
r0# pr@# prV# p{  |  ((  
op  
•  {  
(q  
(  (r  
˛C  o3  
o1  
}s  
o9  
o:  
81  o;  
t  X
]- {  
o  
ot  
{  
o  
om  
ou  
rp# pov  
ou  
rp# pow  
•   å   ox  
		?Ä   ou  
	oy  
oz  

sJ  ({  
}  rp# pow  
•   {  
s|  
}  }  
}  }  {  
sD  o#  
ﬁ:{  
o  
o}  
,{  
o  
o~  
{  
(  
(F  
zo=  
:√˛ˇˇﬁu/  ,o>  
‹{  
o  
ot  
ﬁ,{  
o  
o}  
,{  
o  
o~  
(F  
z* AL      :  È   #  :   $     '  D  k                w  í  ,   $  0 Y     (  
}  {  {  {Ä  
{  {  (  
o9  
o[  
-}  *o9  
oÅ  
}  *n{  ,(F  (G  (H  *   0 q     {  {  rÄ# pow  
•  
{  rÄ# pow  
•  ({  
&(Ç  
,rÄ# p(É  
(I  *(Ñ  
,rÄ# p(É  
(I  *   0 k     {  {  rê# pow  
•  
{  r∏# pow  
•  (Ç  
,r∏# p(É  
(I  *(Ñ  
,r # p(É  
(I  * 0 ˛    {  {  
r‡# pow  
•  sÖ  
(Ü  
9  {  r¯# pow  
•  sÖ  
(Ü  
,&r
$ p{  r¯# pow  
•  (á  
(I  {  r$ pow  
•  sÖ  
(Ü  
,&r.$ p{  r$ pow  
•  (á  
(I  {  r@$ pow  
•  sÖ  
(Ü  
,&rV$ p{  r@$ pow  
•  (á  
(I  {  rj$ pow  
•  sÖ  
(Ü  
,&rÄ$ p{  rj$ pow  
•  (á  
(I  r‡# pow  
•  {  rî$ pow  
•  (Ç  
,7r¢$ pr‡# pow  
•  {  rî$ pow  
•  (É  
(I  *{  rî$ pow  
•  sÖ  
(Ü  
,7rÆ$ p{  rî$ pow  
•  r‡# pow  
•  (É  
(I  *r¢$ pr‡# pow  
•  {  rî$ pow  
•  (É  
(I  *rº$ pow  
•  sÖ  
(Ü  
9À  {  r¯# pow  
•  sÖ  
(Ü  
,&r
$ p{  r¯# pow  
•  (á  
(I  {  r$ pow  
•  sÖ  
(Ü  
,&r.$ p{  r$ pow  
•  (á  
(I  {  r@$ pow  
•  sÖ  
(Ü  
,&rV$ p{  r@$ pow  
•  (á  
(I  rº$ pow  
•  {  rj$ pow  
•  (Ç  
,7rÄ$ prº$ pow  
•  {  rj$ pow  
•  (É  
(I  *{  rj$ pow  
•  sÖ  
(Ü  
,7r‹$ p{  rj$ pow  
•  rº$ pow  
•  (É  
(I  *rÄ$ prº$ pow  
•  {  rj$ pow  
•  (É  
(I  *rÚ$ pow  
•  sÖ  
(Ü  
9  {  r¯# pow  
•  sÖ  
(Ü  
,&r
$ p{  r¯# pow  
•  (á  
(I  {  r$ pow  
•  sÖ  
(Ü  
,&r.$ p{  r$ pow  
•  (á  
(I  rÚ$ pow  
•  {  r@$ pow  
•  (Ç  
,;rV$ prÚ$ pow  
•  {  r@$ pow  
•  (É  
(I  8ê   {  r@$ pow  
•  sÖ  
(Ü  
,8r% p{  r@$ pow  
•  rÚ$ pow  
•  (É  
(I  +6rV$ prÚ$ pow  
•  {  r@$ pow  
•  (É  
(I  {  rj$ pow  
•  sÖ  
(Ü  
,!r‹$ p{  rj$ pow  
•  (I  {  rî$ pow  
•  sÖ  
(Ü  
9ƒ  rÆ$ p{  rî$ pow  
•  (I  *r(% pow  
•  sÖ  
(Ü  
9  {  r¯# pow  
•  sÖ  
(Ü  
,&r
$ p{  r¯# pow  
•  (á  
(I  r(% pow  
•  {  r$ pow  
•  (Ç  
,;r.$ pr(% pow  
•  {  r$ pow  
•  (É  
(I  8ê   {  r$ pow  
•  sÖ  
(Ü  
,8rF% p{  r$ pow  
•  r(% pow  
•  (É  
(I  +6r.$ pr(% pow  
•  {  r$ pow  
•  (É  
(I  {  r@$ pow  
•  sÖ  
(Ü  
,!r% p{  r@$ pow  
•  (I  {  rj$ pow  
•  sÖ  
(Ü  
,!r‹$ p{  rj$ pow  
•  (I  {  rî$ pow  
•  sÖ  
(Ü  
9ò  rÆ$ p{  rî$ pow  
•  (I  *rZ% pow  
•  sÖ  
(Ü  
9  rZ% pow  
•  {  r¯# pow  
•  (Ç  
,;r
$ prZ% pow  
•  {  r¯# pow  
•  (É  
(I  8ê   {  r¯# pow  
•  sÖ  
(Ü  
,8rv% p{  r¯# pow  
•  rZ% pow  
•  (É  
(I  +6r
$ prZ% pow  
•  {  r¯# pow  
•  (É  
(I  {  r$ pow  
•  sÖ  
(Ü  
,!rF% p{  r$ pow  
•  (I  {  r@$ pow  
•  sÖ  
(Ü  
,!r% p{  r@$ pow  
•  (I  {  rj$ pow  
•  sÖ  
(Ü  
,!r‹$ p{  rj$ pow  
•  (I  {  rî$ pow  
•  sÖ  
(Ü  
9q  rÆ$ p{  rî$ pow  
•  (I  *{  r¯# pow  
•  sÖ  
(Ü  
,!rv% p{  r¯# pow  
•  (I  {  r$ pow  
•  sÖ  
(Ü  
,!rF% p{  r$ pow  
•  (I  {  r@$ pow  
•  sÖ  
(Ü  
,!r% p{  r@$ pow  
•  (I  {  rj$ pow  
•  sÖ  
(Ü  
,!r‹$ p{  rj$ pow  
•  (I  {  rî$ pow  
•  sÖ  
(Ü  
,!rÆ$ p{  rî$ pow  
•  (I  *  0" Á     rà% p{  {  {à  
(  
(â  

{  
{n  
rò% poo  
{  {  {  
{  {  {ä  
r∞% psÖ  
sÖ  
sÖ  
sÖ  
sÖ  
NNNNNsÖ  
r∂% p(ã  
{å  
{  {  {Ä  
{  {  {ç  
å  sÖ  
{  {  (é  
*($  
*B(  
}  *ä{  
{  {!  {  {   (  
* 0 ^     sè  

ræ% p}ê  
çJ  }ë  
{ë  
sí  
¢{ë  
ör& p}ì  
{ë  
ör& p}î  
{ë  
ö}ï  
*  0 A     –  (!  
("  
t  
s9  r^& psó  
r|& poò  
ré& p(,  
*   0 ^     sè  

ræ% p}ê  
çJ  }ë  
{ë  
sí  
¢{ë  
ör& p}ì  
{ë  
ör& p}î  
{ë  
ö}ï  
*  0 A     –  (!  
("  
t  
s)  r¢& psó  
r|& poò  
ré& p(,  
*   0 A     –  (!  
("  
t  
sB  r¬& psó  
r|& poò  
ré& p(,  
*   0 A     –  (!  
("  
t  
sK  rË& psó  
r|& poò  
ré& p(,  
*   0 ^     sè  

r' p}ê  
çJ  }ë  
{ë  
sí  
¢{ë  
örX' p}ì  
{ë  
örb' p}î  
{ë  
ö}ï  
*  0 A     –  (!  
("  
t  
s@  rÄ' psó  
r|& poò  
ré& p(,  
*   0 ^     sè  

rñ' p}ê  
çJ  }ë  
{ë  
sí  
¢{ë  
ör˙' p}ì  
{ë  
ör( p}î  
{ë  
ö}ï  
*  0 A     –  (!  
("  
t  
s/  rF( psó  
r|& poò  
ré& p(,  
*   0      sè  

ræ% p}ê  
çJ  }ë  
* 0 A     –   (!  
("  
t   
s=  r^( psó  
r|& poò  
ré& p(,  
*   0      sè  

ræ% p}ê  
çJ  }ë  
* 0 A      –"  (!  
("  
t"  
s,  rí( psó  
r|& poò  
ré& p(,  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*($  
*       /  -------------------------------------------------------------------------------
-- This procedure prepare data for Default Events
--
-- History
-- 11.10.2007 MatjazB; Task ID 5099 - Created
-- 14.04.2008 MatjazB; Task ID 5099 - added variables @start_retail and @start_nretail
-------------------------------------------------------------------------------
DECLARE @target_date datetime
DECLARE @id_tec char(3)
DECLARE @id_val char(3)
DECLARE @eur_id_tec char(3)

SET @target_date = getdate()

SET @id_tec = (SELECT val FROM dbo.custom_settings WHERE code = 'DE_ID_TEC')
SET @id_val = (SELECT id_val FROM dbo.tecajnic WHERE id_tec = @id_tec) 
SET @eur_id_tec = (SELECT MIN(id_tec) FROM dbo.tecajnic WHERE id_val = 'EUR')

-- podatki partnerja iz tabele p_eval
SELECT pe.id_kupca, pe.eval_model
  INTO #tmp_peval
  FROM dbo.p_eval pe
 WHERE pe.dat_eval IN (SELECT MAX(pe1.dat_eval) FROM dbo.p_eval pe1 WHERE pe1.id_kupca = pe.id_kupca)

-- RETAIL
DECLARE @amount_retail decimal(12,2), @start_retail char(4)

SET @amount_retail = (SELECT val FROM dbo.custom_settings WHERE code = 'DE_RETAIL_AMOUNT')
SET @start_retail = (SELECT val FROM dbo.custom_settings WHERE code = 'DE_RETAIL_START')

SELECT pp.id_kupca, @id_tec AS id_tec, pp.id_cont, pp.overdue, pp.exposure, @start_retail AS id_d_event
  INTO #retail
  FROM (
	SELECT id_cont, id_kupca,
		SUM(dbo.gfn_xchange(@id_tec, znp_saldo_brut_all, id_tec, @target_date)) AS overdue,
		SUM(dbo.gfn_xchange(@id_tec, znp_saldo_brut_all + bod_neto_lpod + bod_findavek, id_tec, @target_date)) AS exposure,
		MAX(znp_max_dni_all) AS maturity_of_oldest_claim
	  FROM dbo.planp_ds
	 GROUP BY id_cont, id_kupca
	) pp
 INNER JOIN dbo.pogodba p ON pp.id_cont = p.id_cont
 INNER JOIN #tmp_peval pe ON pp.id_kupca = pe.id_kupca
 WHERE p.status_akt = 'A'
	AND SUBSTRING(pe.eval_model, 1, 2) IN ('01', '20')
	AND pp.maturity_of_oldest_claim > 90
	AND pp.overdue > dbo.gfn_xchange(@id_tec, @amount_retail, @eur_id_tec, @target_date)



-- NON RETAIL
DECLARE @amount_nretail decimal(12,2), @percentage_nretail decimal(6,2), @start_nretail char(4)

SET @amount_nretail = (SELECT val FROM dbo.custom_settings WHERE code = 'DE_NRETAIL_AMOUNT')
SET @percentage_nretail = (SELECT val FROM dbo.custom_settings WHERE code = 'DE_NRETAIL_PERCENTAGE')
SET @start_nretail = (SELECT val FROM dbo.custom_settings WHERE code = 'DE_NRETAIL_START')

SELECT pp.id_kupca,
	SUM(CASE WHEN pp.dat_zap <= DATEADD(d, -90, @target_date) THEN dbo.gfn_xchange(@id_tec, pp.saldo, pp.id_tec, @target_date) ELSE 0 END) AS znpl_90
  INTO #partner_znpl
  FROM planp pp
 LEFT JOIN pogodba p ON pp.id_cont = p.id_cont
 INNER JOIN #tmp_peval pe ON pp.id_kupca = pe.id_kupca
 WHERE pp.saldo > 0 AND pp.evident = '*' AND pp.dat_zap <= @target_date
	AND p.status_akt = 'A'
	AND SUBSTRING(pe.eval_model, 1, 2) NOT IN ('01', '20')
 GROUP BY pp.id_kupca HAVING SUM(pp.saldo) > 0

SELECT p.id_kupca, @id_tec AS id_tec, null AS id_cont, pp.overdue, pp.exposure, @start_nretail AS id_d_event
  INTO #nonretail
  FROM #partner_znpl p
 INNER JOIN (
	SELECT id_kupca,
		SUM(dbo.gfn_xchange(@id_tec, znp_saldo_brut_all, id_tec, @target_date)) AS overdue,
		SUM(dbo.gfn_xchange(@id_tec, znp_saldo_brut_all + bod_neto_lpod + bod_findavek, id_tec, @target_date)) AS exposure,
		MAX(znp_max_dni_all) AS maturity_of_oldest_claim
	  FROM dbo.planp_ds
	 GROUP BY id_kupca
	) pp ON p.id_kupca = pp.id_kupca
 WHERE pp.maturity_of_oldest_claim >= 90
	AND p.znpl_90 > dbo.gfn_xchange(@id_tec, @amount_nretail, @eur_id_tec, @target_date)
	AND 100 * p.znpl_90 / pp.exposure >= @percentage_nretail

-- SKUPAJ
SELECT CAST(0 AS bit) AS obstoja, *
  INTO #temp90D
  FROM (
	SELECT * FROM #retail
	UNION ALL
	SELECT * FROM #nonretail
	) a

DROP TABLE #partner_znpl
DROP TABLE #retail
DROP TABLE #nonretail
DROP TABLE #tmp_peval
     87  ----------------------------------------------------------------------------
-- This procedure transfers some data 
--
-- HISTORY:
-- 01.08.2006 Darko; created
-- 24.10.2006 Matjaz; added comment to last where
-- 09.11.2006 Vik; [EUR PROJECT] fixed exchange rate calculations (inverse exchange rate support)
-- 10.11.2006 Matjaz; [EUR PROJECT] fixed exchange rate calculations (inverse exchange rate support)
-- 02.08.2007 Matjaz; Task ID 5103 - changed calculation of LTP and TRP for sued contracts (pogodba.aneks = 'T'). For sued contracts LTP are allways 0 and total ODR is added to TRP.
-- 07.11.2007 Matjaz; Maintenance ID 11807 - changes due to ODR report change - bail and fin. tax are also a part of future capital (influences tr_prov)
-- 20.05.2008 Ziga, Vito; Maintenance ID 15033 - changed odr_180 with odr_180_364 and odr_365, same for lt_prov
----------------------------------------------------------------------------

DECLARE  @id_oc_report int
DECLARE @target_id_tec char(3)
DECLARE @target_id_val char(3)
DECLARE @target_date datetime

DECLARE @sporna_potrazivanja char(8)
DECLARE @zero decimal(18,2)
DECLARE @target_tecaj decimal(20,10)
DECLARE @market_value_id char (2)

-- id_oc_report naj se izbere 
--SET @id_oc_report = 122  -- BRIäI !!!
SET @id_oc_report = {0}
SET @target_date = (select date_to from dbo.oc_reports where id_oc_report=@id_oc_report)
-- tu bo najverjetneje kar fiksno (npr. teËajnica za EUR), vknjiûbe pa se morajo generirati v DOMV in VAL (DOMV
-- se preraËunajo po teËaju na target_Date TARGET_TECAJ
SET @target_id_tec= '000' 
SET @target_id_val=(select id_val from dbo.tecajnic where id_tec=@target_id_tec)
SET @target_tecaj = 1
SET @zero = 0
SET @market_value_id = (select id_obl_zav from dbo.dok where sifra = 'MVAL')

-- sumnjiva i sporna potra≈æivanja koja su nastala kao posljedica ponovnog uspostavljanja stanja nakon ≈°to su stornirali sve buduƒáe rate (zbog utu≈æenosti i sl.)
-- ta nastavitev bo za vsako drûavo razliËna
--SET @sporna_potrazivanja = '66,67,68'  
SET @sporna_potrazivanja = {1}

select   a.id_cont, 
   sum(dbo.gfn_xchange(@target_id_tec, a.vrednost, a.id_tec, @target_date)) as market_value
into #odr_tmp_dokument
from dbo.dokument a 
where a.id_obl_zav=@market_value_id and a.ima=1 and a.status_akt='A'
group by a.id_cont

--DOSPJELA NEPLAƒÜENA POTRA≈ΩIVANJA
select a.id_cont, 
-- broj otvorenih rata
round(sum(case when b.sif_terj='LOBR' then a.ex_saldo_val/a.ex_debit_val else 0 end),2) as no_of_open_installm,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja od 0 do 29 dana
sum(case when a.ex_dni_zamude < 30 and a.ex_dni_zamude>=0 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_0_29,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja od 30 do 59 dana
sum(case when a.ex_dni_zamude >= 30 and a.ex_dni_zamude < 60 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_30_59,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja od 60 do 89 dana
sum(case when a.ex_dni_zamude >= 60 and a.ex_dni_zamude < 90 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_60_89,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja od 90 do 119 dana
sum(case when a.ex_dni_zamude >= 90 and a.ex_dni_zamude < 120 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_90_119,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja od 120 do 179 dana
sum(case when a.ex_dni_zamude >= 120 and a.ex_dni_zamude < 180 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_120_179,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja od 120 do 179 dana
sum(case when a.ex_dni_zamude >= 180 and a.ex_dni_zamude < 365 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_180_364,
--ODR (overdue receivables) dospjela neplaƒáena potra≈æivanja vi≈°e od 180 dana
sum(case when a.ex_dni_zamude >= 365 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_365,
--ukupni ODR (svi proknji≈æeni)
sum(case when a.evident='*' and a.ex_dni_zamude >= 0
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as total_odr,
--iznos glavnice u neproknji≈æenim ratama koji se mora spremiti u buduƒáa potra≈æivanja (buduƒáa glavnica) - nije uknjuƒçen u total ODR
sum(case when a.evident='' and b.sif_terj in ('LOBR','OPC','POLO','VARS')
   then dbo.gfn_xr_dom2val(a.ex_debit_dom, @target_tecaj)*(a.neto/a.debit)
   else @zero end) as neto_not_booked,
sum(case when a.evident='' and b.sif_terj in ('LOBR','OPC','POLO','VARS') and c.dobrocno=1
	then (a.ex_debit_val*a.davek/a.debit)
	else @zero end) as fin_dav_not_booked,
--iznos glavnice u proknji≈æenim ratama koji imaju datum dospijeƒáa u buduƒánosti pa se mora spremiti u buduƒáa potra≈æivanja (buduƒáa glavnica)- nije uknjuƒçen u total ODR
sum(case when a.evident='*' and a.ex_dni_zamude<0 and b.sif_terj in ('LOBR','OPC','POLO','VARS')
   then dbo.gfn_xr_dom2val(a.ex_debit_dom, @target_tecaj)*(a.neto/a.debit)
   else @zero end) as neto_not_dued,
sum(case when a.evident='*' and a.ex_dni_zamude<0 and b.sif_terj in ('LOBR','OPC','POLO','VARS') and c.dobrocno=1
	then (a.ex_debit_val*a.davek/a.debit)
	else @zero end) as fin_dav_not_dued,
--iznos fakturiranog neplaƒáenog otkupa - ukljuƒçen u total ODR
sum(case when a.evident='*' and b.sif_terj in ('OPC')
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as odr_buyout,
--iznos otkupa koji nije proknji≈æen ali je datumski dospio (u odnosu na target_date) - nije ukljuƒçen u total ODR
sum(case when a.evident='' and b.sif_terj in ('OPC')
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj)
   else @zero end) as buyout_not_booked,
--izraƒçun nepleƒáenih kamata u potra≈æivanjima starijim od 90 dana
sum(case when a.ex_dni_zamude > 90 and a.evident='*'
   then dbo.gfn_xr_dom2val(a.ex_saldo_dom, @target_tecaj) * (a.obresti/a.debit)
   else @zero end) as interests_in_odr_90
 into #odr_tmp1
 from dbo.oc_claims a 
inner join dbo.vrst_ter b on a.id_terj=b.id_terj
inner join dbo.oc_contracts c on a.id_cont=c.id_cont and a.id_oc_report=c.id_oc_report
where a.id_oc_report=@id_oc_report and charindex(a.id_terj, @sporna_potrazivanja)=0
group by a.id_cont

select a.id_cont, a.id_pog as contract, 
a.pred_naj as object, 
isnull(c.no_of_open_installm,0) as no_of_open_installm, 
a.id_kupca as partner_id,
a.nacin_leas as fin_type, 
left(a.nacin_leas,1) as type1,
d.id_vrste as equipment_type,
d.id_grupe as group_type,
e.naz_kr_kup as partner_name, 
e.boniteta as partner_rating,
e.vr_osebe as partner_type,
isnull(c.total_odr,@zero) as total_odr,
isnull(c.odr_0_29,@zero) as odr_0_29,
isnull(c.odr_30_59,@zero) as odr_30_59,
isnull(c.odr_60_89,@zero) as odr_60_89,
isnull(c.odr_90_119,@zero) as odr_90_119,
isnull(c.odr_120_179,@zero) as odr_120_179,
isnull(c.odr_180_364,@zero) as odr_180_364,
isnull(c.odr_365,@zero) as odr_365,
isnull(c.interests_in_odr_90,@zero) as interests_in_odr_90,
isnull(f.market_value,@zero) as market_value,
@target_id_tec as exch_rate_id,
@target_date as target_date,
a.aneks as anex,
a.status_akt as status_act,
a.id_dob as supplier_id,
-- ako je vrijednost rate = 0 (lizing 50-50 isl) onda se u sluËaju kaönjenja ne moûe usporediti
-- omjer rate (deljenje sa 0) pa se zato usporeuje sa minimalnim iznosom 0.01 
case when a.obrok1 != 0 
   then dbo.gfn_xchange(@target_id_tec, a.obrok1, a.id_tec, @target_date) 
   else 0.01 end
   as installment_value, 
@target_id_val as currency,
a.id_strm as cost_centre,
--zbroj buduƒáe glavnice u planp prema datum_dok>target_date za potra≈æivanja OPC, POLO, LOBR
dbo.gfn_xchange(@target_id_tec, a.ex_g1_neto+a.ex_g1_davek_fin+case when (a.status_akt='Z' or a.aneks='T') then 0 else a.varscina end, a.id_tec, @target_date) as future_capital_date,
--dio buduƒáe glavnice koja proizlazi iz naslova dospjelih nefakturiranih potra≈æivanja OPC, POLO, LOBR
isnull(c.neto_not_booked,@zero)+isnull(c.fin_dav_not_booked,@zero) as future_capital_not_booked,
--dio buduƒáe glavnice koja proizlazi iz naslova fakturiranih potra≈æivanja OPC, POLO, LOBR koja nisu dospjela do target_date, a datum_dok<target_date
isnull(c.neto_not_dued,@zero)+isnull(c.fin_dav_not_dued,@zero) as future_capital_not_dued,
--zbroj prethodna tri polja 
dbo.gfn_xchange(@target_id_tec, a.ex_g1_neto+a.ex_g1_davek_fin+
	case when (a.status_akt='Z' or a.aneks='T') then 0 else a.varscina end, a.id_tec, @target_date)
	+isnull(c.neto_not_booked,@zero)+isnull(c.neto_not_dued,@zero)
	+isnull(c.fin_dav_not_booked,@zero)+isnull(c.fin_dav_not_dued,@zero) 
	as future_capital_total,
isnull(c.odr_buyout,@zero) as odr_buyout,
isnull(c.buyout_not_booked,@zero) as buyout_not_booked,
--buduƒáa glavnica iz naslova potra≈æivanja za otkup 
--zbroj buduƒáe glavnice u planp prema datum_dok>target_date za potra≈æivanja OPC
dbo.gfn_xchange(@target_id_tec, a.ex_g1_neto_opc_nezap, a.id_tec, @target_date)+isnull(c.buyout_not_booked,@zero) as future_buyout_value,
@id_oc_report as id_oc_report
into #odr_tmp2
from dbo.oc_contracts a 
--left join dbo.oc_claims b on a.id_cont=b.id_cont and a.id_oc_report=b.id_oc_report
left join #odr_tmp1 c on a.id_cont=c.id_cont
left join dbo.vrst_opr d on a.id_vrste=d.id_vrste
left join dbo.oc_customers e on a.id_kupca=e.id_kupca and a.id_oc_report = e.id_oc_report
left join #odr_tmp_dokument f on a.id_cont=f.id_cont 
where a.id_oc_report=@id_oc_report


select a.id_cont, a.contract, 
a.object, 
a.no_of_open_installm, 
a.partner_id,
a.fin_type, 
a.type1,
a.equipment_type,
a.group_type,
a.partner_name, 
a.partner_rating,
a.partner_type,
a.anex,
a.status_act,
a.supplier_id,
a.exch_rate_id,
a.target_date,
a.cost_centre,
a.currency,
a.odr_0_29,
a.odr_30_59,
a.odr_60_89,
a.odr_90_119,
a.odr_120_179,
a.odr_180_364,
a.odr_365,
a.total_odr,
a.interests_in_odr_90,
a.market_value,
a.installment_value, 
--future_capital_date+future_capital_not_booked+future_capital_not_dued
a.future_capital_total,
a.total_odr +a.future_capital_total as total_exposure,
-- lapse of time provision 60_89
case when a.odr_60_89 != 0 and a.odr_90_119 = 0 and a.odr_120_179 = 0 and a.odr_180_364 = 0 and a.odr_365 = 0 and a.anex!='T'
then (case when (a.odr_60_89/a.installment_value) > 0.5 then 0.5 else 0 end)*a.total_odr
else 0 end as lt_prov_60_89,
-- lapse of time provision 90_119
case when a.odr_90_119 != 0 and a.odr_120_179 = 0 and a.odr_180_364 = 0 and a.odr_365 = 0  and a.anex!='T' 
then (case when ((a.odr_90_119+a.odr_120_179)/a.installment_value) > 0.5 then 1 else 0.5 end)*a.total_odr
else 0 end as lt_prov_90_119,
-- lapse of time provision 120_179
case when a.odr_120_179 != 0 and a.odr_180_364 = 0 and a.odr_365 = 0  and a.anex!='T'
then (case when ((a.odr_90_119+a.odr_120_179)/a.installment_value) > 0.5 then 1 else 0.5 end)*a.total_odr
else 0 end as lt_prov_120_179,
-- lapse of time provision over 180_364
case when a.odr_180_364 != 0 and a.odr_365 = 0 and a.anex!='T'
then a.total_odr
else 0 end as lt_prov_180_364,
-- lapse of time provision over 365
case when a.odr_365 != 0 and a.anex!='T'
then a.total_odr
else 0 end as lt_prov_365,

-- after debt of dued liabilities that are older than 90 days exceeds 1 installment
-- termination risk provisions should be calculated as well (odr_180) is in that case only in termination risk provision
-- while other stays in prov_120_179
case when ((a.odr_90_119+a.odr_120_179+a.odr_180_364+a.odr_365)/a.installment_value) >= 1 or a.anex='T'
then case when a.anex='T' then
(case when (a.total_odr+a.future_capital_total-a.market_value) > 0 then 
(a.total_odr+a.future_capital_total-a.market_value)
else 0 end)
  else
(case when (a.future_capital_total-a.market_value) > 0 then 
(a.future_capital_total-a.market_value)
else 0 end)
 end
else 0 end as tr_prov,
--zbroj buduƒáe glavnice u planp prema datum_dok>target_date za potra≈æivanja OPC, POLO, LOBR
a.future_capital_date,
--dio buduƒáe glavnice koja proizlazi iz naslova dospjelih nefakturiranih potra≈æivanja OPC, POLO, LOBR
a.future_capital_not_booked,
--dio buduƒáe glavnice koja proizlazi iz naslova fakturiranih potra≈æivanja OPC, POLO, LOBR koja nisu dospjela do target_date, a datum_dok<target_date
a.future_capital_not_dued,
a.odr_buyout,
a.buyout_not_booked,
--buduƒáa glavnica iz naslova potra≈æivanja za otkup 
--zbroj buduƒáe glavnice u planp prema datum_dok>target_date za potra≈æivanja OPC
a.future_buyout_value,
@id_oc_report as id_oc_report
into #odr_tmp3
from #odr_tmp2 a 




-------    Od tu naprej se kreirajo rezultati ------

--rezultat
--select * from #odr_tmp3
--update #odr_tmp3 set tr_prov = 80000
--update #odr_tmp3 set lt_prov_60_89 = 50000
--update #odr_tmp3 set lt_prov_180 = 350000
-- rezultat4 - provision report
-- Vito GriËar 10.07.2006
select --a.*,
--TOP 3 -- BRIäI !!!
a.id_cont,a.Contract,
a.object, 
a.no_of_open_installm, 
a.partner_id,
a.fin_type, 
a.equipment_type,
a.group_type,
a.partner_name, 
a.partner_rating,
a.partner_type,
a.anex,
a.status_act,
a.exch_rate_id,
a.target_date,
a.cost_centre,
a.currency,
a.odr_0_29,a.odr_30_59,a.odr_60_89 , a.odr_90_119 , a.odr_120_179, a.odr_180_364, a.odr_365 ,
a.market_value,
a.installment_value,
a.lt_prov_60_89,
a.lt_prov_90_119,
a.lt_prov_120_179,
a.lt_prov_180_364,
a.lt_prov_365,
a.tr_prov,
a.total_odr,
a.total_exposure,
a.future_capital_total,
a.interests_in_odr_90 
from #odr_tmp3 a
--where (a.lt_prov_60_89 + a.lt_prov_90_119 + a.lt_prov_120_179 + a.lt_prov_180_364 + a.lt_prov_365 + a.tr_prov) != 0


--odr_rekapitulacija.xls ƒáe se raditi iz provizija
/*
drop table #odr_tmp1 
drop table #odr_tmp2
drop table #odr_tmp3
drop table #odr_tmp_dokument
*/










    µr --19.07.2006 added and repaired collaterals
--20.07.2006 repaired some mapping --> *nomap* instead of some nulls and *n.a.*
--21.07.2006 optimizing script for ST_LEASING
--25.07.2006 repaired some mappings according to exported csv files and validator
--26.07.2006 repaired st_product_type_subtype mappings
--27.07.2006 replaced strings nova with NOVA in B2ID table, replaced strings nova and RLSI with function GetAnyId
--07.08.2006 repaired some mappings according to basel2 not required 
--07.08.2006 repaired some insert statementes according to new version of XSD Schemas(GDWH 2_4_0_1 Rev 2_4_0_13)
--10.08.2006 added just some comments for collateral
--11.08.2006 popravil provision amount, leasing_npv_amount, leasing_residual_amount, 
--napolnil in popravil tabele b2collat, b2opprod,
--14.08.2006 repaired query for collaterals, repaired query for product_type_subtype
--21.08.2006 added insert for cocunut_customer_id and customer_cocunut_link
--06.09.2006 changed product_type_id from 'FL' to 'FL-vrst_opr.id_grupe' (same for LO in OL) in table st_product_type_subtype
--           removed product_type_id and product_subtype_id  from st_contract_accruals
--           removed discount_rate from st_collateral
--10.10.2006 repaired  for inserting product_type and product_type_subtype while inserting into table st_product_type_subtype
--11.10.2006 repaire check for id_oc_report while inserting in st_product_type_subtype table
--	     add check for konto (table b2provision_accounts) when calculating provions
--08.11.2006 repaired tables cocunut_customer_number and customer_cocunut_link
--           repaired customer_asset_class in table st_customer
--           repaired contract_accruals 
--17.05.2007 reparied leasing_npv_amount, now includes also total_odr
--04.06.2007 repaired check for lenght of field eval_model
--05.06.2007 added values for fields revaluation_frequency (dok.eval_frequency * 30) and eligibility_indicator (dok.is_elligible)
-- st_collateral -> maps field dokument.zacetek into field start_date
--01.08.2007 -> changes for fields in table limit_reference; hierarchy_depth = 1, hierarchy_level = 1, top_parent_limit_id = oc_frames.id_frame, top_parnt_lim_application_id = 'NOVA', top_parnt_lim_entity_id = 'RLHR/RLBH/RLRS/RRRS', top_parnt_lim_source_system_id = 'NOVA'
--01.08.2007 -> cust_ast_cls_application_id = 'NOVA', cust_ast_cls_entity_id = 'RLHR/RLBH/RLRS/RRRS', cust_ast_cls_source_system_id = 'NOVA'
--02.08.2007 -> changed mapping for expiry_date (st_limit_reference) from oc_frames.dat_zak to oc_frames.dat_izteka
--03.08.2007 -> removed changes according to fields connected to customer_asset_class_id
--19.12.2007 -> added filter for contract (dat_zakl > @date_to)
--20.12.2007 -> changed mapping for st_limit_reference.expiry_date (maintenance id 12648)

--clean tables
DELETE FROM {2}.dbo.[st_customer_counterp_limit]
DELETE FROM {2}.dbo.[st_contract_balance]
DELETE FROM {2}.dbo.[st_contract_accruals]
DELETE FROM {2}.dbo.[st_account_balance]
DELETE FROM {2}.dbo.[st_gl_balance]
DELETE FROM {2}.dbo.[ST_EQUITY_EXPOSURE]
DELETE FROM {2}.dbo.[ST_SEC_TRADING_POSITION]
DELETE FROM {2}.dbo.[st_customer_counterparty_role]
DELETE FROM {2}.dbo.[st_leasing]
DELETE FROM {2}.dbo.[st_customer_loan]
DELETE FROM {2}.dbo.[st_account]
DELETE FROM {2}.dbo.[st_limit_reference]
DELETE FROM {2}.dbo.[st_collateral_counterparty]
DELETE FROM {2}.dbo.[st_collateral]
DELETE FROM {2}.dbo.[st_customer_cocunut_link]
DELETE FROM {2}.dbo.[st_cocunut_customer_number]
DELETE FROM {2}.dbo.[st_customer]
DELETE FROM {2}.dbo.[st_product_type_subtype]
DELETE FROM {2}.dbo.[st_error]
DELETE FROM {2}.dbo.[st_product_type_subtype]


declare @err_msg varchar(250)
declare @counter int
set @counter = 1
declare @id_oc_report int
set @id_oc_report = {0}
declare @drzava char(2)
set @drzava = (select drzava from {2}.dbo.b2ini)
declare @company_id varchar(15)
set @company_id = (select company_id from {2}.dbo.b2ini)
declare @date_to datetime --from oc_reports - date of the report
set @date_to = (SELECT date_to FROM {1}.dbo.oc_reports 
                                 WHERE id_oc_report = @id_oc_report)
declare @id_val_dom char(3)
set @id_val_dom = (select id_val from {2}.dbo.b2ini)

declare @id_customer_dom char(6)
set @id_customer_dom = (select id_customer_dom from {2}.dbo.b2ini)

declare @customer_asset_class_enum varchar(1000)
set @customer_asset_class_enum = '1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                                    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 53, 54, 55,
                                    56, 57'
declare @nace_code_enum varchar(8000)
set @nace_code_enum = '014200, 015000, 020101, 020102, 020201, 020202, 050100, 050200, 101000, 102000, 103000, 111000, 112000, 120000, 131000, 132000, 141100, 141200, 141300, 142100, 142200, 143000, 144000, 145001, 145002, 145003, 151100, 151200, 151300, 152000, 153100, 153200, 153301, 153302, 154100, 154200, 154300, 155100, 155200, 156100, 156200, 157100, 157200, 158101, 158102, 158200, 158300, 158400, 158500, 158600, 158700, 158800, 158900, 159100, 159200, 159300, 159400, 159500, 159600, 159700, 159801, 159802, 160000, 171100, 171200, 171300, 171400, 171500, 171600, 171700, 172100, 172200, 172300, 172400, 172500, 173000, 174000, 175100, 175200, 175300, 175401, 175402, 176000, 177100, 177200, 181000, 182100, 182201, 182202, 182203, 182300, 182401, 182402, 182403, 183001, 183002, 191000, 192000, 193000, 201001, 201002, 201003, 202000, 203001, 203002, 203003, 204001, 204002, 205100, 205200, 211100, 211201, 211202, 212101, 212102, 212103, 212104, 212200, 212301, 212302, 212400, 212500, 221100, 221200, 221300, 221400, 221500, 222100, 222201, 222202, 222301, 222302, 222400, 222500, 223100, 223200, 223300, 231000, 232001, 232002, 233000, 241100, 241200, 241300, 241400, 241500, 241600, 241700, 242000, 243001, 243002, 244100, 244200, 245100, 245200, 246100, 246200, 246300, 246400, 246500, 246600, 247000, 251100, 251200, 251300, 252100, 252200, 252301, 252302, 252401, 252402, 261100, 261200, 261300, 261400, 261500, 262100, 262200, 262300, 262400, 262501, 262502, 262601, 262602, 263000, 264000, 265100, 265200, 265300, 266100, 266200, 266300, 266400, 266500, 266600, 267000, 268100, 268201, 268202, 271000, 272100, 272200, 273100, 273200, 273300, 273400, 273500, 274100, 274200, 274300, 274400, 274500, 275100, 275200, 275300, 275400, 281100, 281201, 281202, 282100, 282201, 282202, 283000, 284000, 285101, 285102, 285103, 285104, 285105, 285200, 286100, 286200, 286301, 286302, 287100, 287200, 287300, 287400, 287501, 287502, 291100, 291201, 291202, 291203, 291301, 291302, 291400, 292100, 292200, 292301, 292302, 292401, 292402, 292403, 293100, 293201, 293202, 294001, 294002, 294003, 295100, 295200, 295300, 295400, 295500, 295601, 295602, 295603, 295604, 296000, 297100, 297200, 300100, 300200, 311000, 312000, 313000, 314000, 315000, 316100, 316200, 321000, 322000, 323000, 331001, 331002, 331003, 331004, 331005, 332000, 333000, 334001, 334002, 335000, 341000, 342000, 343000, 351100, 351200, 352000, 353000, 354100, 354200, 354300, 355000, 361100, 361201, 361202, 361300, 361400, 361500, 362100, 362200, 363000, 364001, 364002, 365000, 366100, 366200, 366301, 366302, 366303, 371001, 371002, 372001, 372002, 401001, 401002, 402000, 403000, 410000, 451100, 451200, 452101, 452102, 452103, 452104, 452105, 452106, 452107, 452201, 452202, 452203, 452204, 452300, 452400, 452500, 453101, 453102, 453200, 453300, 453400, 454100, 454201, 454202, 454301, 454302, 454303, 454304, 454305, 454401, 454402, 454501, 454502, 455000, 501001, 501002, 502001, 502002, 502003, 502004, 502005, 503001, 503002, 504001, 504002, 505000, 511100, 511200, 511300, 511400, 511500, 511600, 511700, 511800, 511900, 512100, 512200, 512300, 512400, 512500, 513100, 513200, 513300, 513401, 513402, 513500, 513600, 513700, 513801, 513802, 513900, 514100, 514201, 514202, 514301, 514302, 514401, 514402, 514403, 514500, 514601, 514602, 514701, 514702, 514703, 514704, 514705, 514706, 514707, 514708, 515101, 515102, 515201, 515202, 515301, 515302, 515303, 515304, 515400, 515500, 515601, 515602, 515701, 515702, 516100, 516200, 516300, 516401, 516402, 516403, 516404, 516600, 517000, 518600, 521100, 521201, 521202, 522100, 522200, 522300, 522400, 522500, 522600, 522700, 523100, 523200, 523300, 524100, 524200, 524301, 524302, 524401, 524402, 524403, 524501, 524502, 524503, 524601, 524602, 524701, 524702, 524801, 524802, 524803, 524804, 524805, 524806, 524807, 524808, 524809, 524810, 524811, 524812, 525001, 525002, 525003, 526100, 526200, 526300, 527100, 527201, 527202, 527300, 527401, 527402, 551101, 551102, 551103, 551200, 552101, 552102, 552200, 552301, 552302, 553001, 553002, 553003, 553004, 554001, 554002, 554003, 555100, 555200, 601000, 602101, 602102, 602103, 602200, 602300, 602400, 603000, 611000, 612000, 621000, 622000, 623000, 631100, 631200, 632101, 632102, 632103, 632200, 632300, 633001, 633002, 633003, 633004, 634000, 641100, 641200, 642001, 642002, 651100, 651200, 652100, 652200, 652300, 660100, 660200, 660301, 660302, 671100, 671200, 671300, 672000, 701100, 701200, 702001, 702002, 703100, 703201, 703202, 711001, 711002, 712101, 712102, 712103, 712200, 712300, 713100, 713200, 713301, 713302, 713400, 714001, 714002, 714003, 714004, 714005, 721000, 722001, 722002, 723000, 724000, 725001, 725002, 726000, 731000, 732000, 741100, 741200, 741300, 741401, 741402, 741500, 742001, 742002, 743000, 744001, 744002, 745001, 745002, 745003, 746001, 746002, 747001, 747002, 747003, 747004, 748101, 748102, 748200, 748301, 748302, 748303, 748401, 748402, 748403, 748404, 748405, 751100, 751200, 751300, 751400, 752100, 752200, 752300, 752400, 752500, 753000, 801001, 801002, 802101, 802102, 802201, 802202, 802203, 803000, 804101, 804102, 804200, 851100, 851201, 851202, 851203, 851301, 851302, 851401, 851402, 851403, 851404, 852000, 853101, 853102, 853200, 900100, 900201, 900202, 900203, 900301, 900302, 911100, 911200, 912001, 912002, 913100, 913200, 913300, 921101, 921102, 921103, 921200, 921300, 922000, 923100, 923200, 923300, 923401, 923402, 924000, 925100, 925200, 925300, 926101, 926102, 926200, 927101, 927102, 927103, 927200, 930101, 930102, 930201, 930202, 930203, 930301, 930302, 930401, 930402, 930403, 930404, 930500, 950000, 960000, 970000, 990000'

declare @nomap char(7)
declare @na char(6)
declare @application_id char(4)
declare @source_system_id char(4)
declare @entity_id varchar(30)
declare @default_date_ss datetime
declare @default_date_row datetime
declare @default_date_spec datetime
set @nomap = '*nomap*'
set @na = '*n.a.*'
set @application_id = 'NOVA'
set @source_system_id = 'NOVA'
set @entity_id = (select company_id from {2}.dbo.b2ini)
set @default_date_ss = '19010101' -- should be 9999-09-01 00:00:00 (transformation performed C#)
set @default_date_row = '19000101' -- should be 9999-08-01 00:00:00 (transformation performed C#)
set @default_date_spec = '19020101' -- should be 9999-10-01 00:00:00 (transformation performed C#)



----------------------------------------------------------------------------------------COUNTERPARTY--------------------------------------------------------------------------------------------------------------------------------
--TABLES: ST_CUSTOMER, ST_COCUNUT_CUSTOMER_NUMBER, ST_CUSTOMER_COCUNUT_LINK

--INSERT INTO ST_CUSTOMERS (only if customer does not exists in ST_CUSTOMERS yet)
	  -- CUSTOMERS FROM CONTRACTS (field MAIN_CUSTOMER_INDICATOR = 'Y')	
      INSERT INTO {2}.dbo.st_customer
        (CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_NAME_CONTINUED,SHORT_NAME,STREET,CITY_TOWN,POSTAL_CODE,REGION_COUNTY,
         PROVINCE,COUNTRY_OF_RESIDENCE_ISO_CODE,COUNTRY_OF_RESIDENCE_NUM_CODE,COUNTRY_OF_RESIDENCE_NAME,
         CUSTOMER_NAME_2,STREET_2,CITY_TOWN_2,POSTAL_CODE_2,REGION_COUNTY_2,PROVINCE_2,COUNTRY_2_ISO_CODE,
         COUNTRY_2_NUM_CODE,COUNTRY_2_NAME,HOME_PHONE,WORK_PHONE,MOBILE_PHONE_NUMBER,EMAIL,FAX,BRANCH_CODE,
         BRANCH_NAME,CONTACT_DATE,BIRTH_DATE,PLACE_OF_BIRTH,DECEASED_DATE,CREATION_DATE,REGISTRATION_NUMBER,
         TAX_NUMBER,GENDER,PARENT_INDICATOR,ACCOUNT_OFFICER_ID,DEPUTY_ACCOUNT_OFFICER_ID,SECTOR_ID,SECTOR_DESCRIPTION,
		 CUSTOMER_TYPE_ID,CUSTOMER_TYPE_DESCRIPTION,GROUP_CUSTOMER_TYPE_ID,GROUP_CUSTOMER_TYPE_DESCR,EMPLOYEE_INDICATOR,
         INDUSTRY_CODE,INDUSTRY_DESCRIPTION,NACE_CODE,NATIONALITY_ISO_CODE,NATIONALITY_NUM_CODE,NATIONALITY_DESCRIPTION,
         COUNTRY_OF_RISK_ISO_CODE,COUNTRY_OF_RISK_NUM_CODE,COUNTRY_OF_RISK_NAME,PARENT_CUSTOMER_ID,GAMS,INPUT_USER_ID,
         AUTH_USER_ID,EMPLOYER_DETAILS,SWIFT_ADDRESS,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,IAS_PROFIT_CENTRE_CODE,
         INTERNAL_BRANCH_INDICATOR,NATIONAL_BANK_NUMBER,MARKET_PARTICIPANT_INDICATOR,CREDIT_RELATIONSHIP,CUSTOMER_RELATION_INDICATOR,
         CUSTOMER_ASSET_CLASS_ID,STATUS_DESCRIPTION,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,SOURCE_DATE,
         BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,
         ACCT_OFF_SOURCE_SYSTEM_ID,SECTOR_APPLICATION_ID,SECTOR_ENTITY_ID,SECTOR_SOURCE_SYSTEM_ID,CUST_TP_APPLICATION_ID,
         CUST_TP_ENTITY_ID,CUST_TP_SOURCE_SYSTEM_ID,INDUSTRY_APPLICATION_ID,INDUSTRY_ENTITY_ID,INDUSTRY_SOURCE_SYSTEM_ID,
         PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,IAS_PROF_CNT_APPLICATION_ID,IAS_PROF_CNT_ENTITY_ID,
         IAS_PROF_CNT_SOURCE_SYSTEM_ID,CUST_AST_CLS_APPLICATION_ID,CUST_AST_CLS_ENTITY_ID,CUST_AST_CLS_SOURCE_SYSTEM_ID,
         PARNT_CUST_APPLICATION_ID,PARNT_CUST_ENTITY_ID,PARNT_CUST_SOURCE_SYSTEM_ID,DP_ACCT_OFF_APPLICATION_ID,
         DP_ACCT_OFF_SOURCE_SYSTEM_ID,DP_ACCT_OFF_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,
         INP_USER_APPLICATION_ID,INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,RISK_AREA_CODE,RISK_SUB_AREA_CODE,RISK_AREA_APPLICATION_ID,
         RISK_AREA_ENTITY_ID,RISK_AREA_SOURCE_SYSTEM_ID,RETAIL_INDICATOR,MAIN_CUSTOMER_INDICATOR,OENB_SECTOR_CODE,
         IAS_LOCAL_PROFIT_CENTRE_CODE,IAS_LCL_PR_C_APPLICATION_ID,IAS_LCL_PR_C_ENTITY_ID,IAS_LCL_PR_C_SOURCE_SYSTEM_ID,
         LOCAL_LINE_OF_BUSINESS_TYPE,LEVEL_OF_IMPORTANCE,ELIGIBILITY_INDICATOR,TAX_INDICATOR,QUALITY_INDICATOR,DATE_FROM)
      SELECT DISTINCT
        c.id_kupca as CUSTOMER_ID,c.naz_kr_kup as CUSTOMER_NAME,'*nomap*' as CUSTOMER_NAME_CONTINUED,'*nomap*' as SHORT_NAME,
        c.ulica_sed as STREET,c.mesto_sed as CITY_TOWN,c.id_poste_sed as POSTAL_CODE,'*nomap*' as REGION_COUNTY,
        '*nomap*' as PROVINCE,
        case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RESIDENCE_ISO_CODE,
        @nomap as COUNTRY_OF_RESIDENCE_NUM_CODE,substring(c.id_poste_sed,0,3) as COUNTRY_OF_RESIDENCE_NAME,@nomap as CUSTOMER_NAME_2,
        @nomap as STREET_2,@nomap as CITY_TOWN_2,@nomap as POSTAL_CODE_2,
        case when c.ulica_sed<>c.ulica then c.ulica+c.id_poste_sed+c.mesto else null end as REGION_COUNTY_2,@nomap as PROVINCE_2,
	@nomap as COUNTRY_2_ISO_CODE,@nomap as COUNTRY_2_NUM_CODE,@nomap as COUNTRY_2_NAME,c.telefon as HOME_PHONE,'*nomap*' as WORK_PHONE,
	c.gsm as MOBILE_PHONE_NUMBER,c.email as EMAIL,@nomap as FAX,@nomap as BRANCH_CODE,@nomap as BRANCH_NAME,@default_date_ss as CONTACT_DATE,
        IsNull(case when c.vr_osebe='FO' then c.dat_roj else c.dat_reg end, @default_date_row) as BIRTH_DATE,'*nomap*' as PLACE_OF_BIRTH, @default_date_ss as DECEASED_DATE,
        c.dat_vnosa as CREATION_DATE,c.emso as REGISTRATION_NUMBER,@nomap as TAX_NUMBER,
        case when c.vr_osebe='FO' then (case c.spol when 'M' then 'M' when 'F' then 'F' else 'U' end) else '*nomap*' end as GENDER,
	@nomap as PARENT_INDICATOR,@nomap as ACCOUNT_OFFICER_ID,@nomap as DEPUTY_ACCOUNT_OFFICER_ID,@nomap as SECTOR_ID,@nomap as SECTOR_DESCRIPTION,
	@nomap as CUSTOMER_TYPE_ID,@nomap as CUSTOMER_TYPE_DESCRIPTION,@nomap as GROUP_CUSTOMER_TYPE_ID,@nomap as GROUP_CUSTOMER_TYPE_DESCR,
	@nomap as EMPLOYEE_INDICATOR,@nomap as INDUSTRY_CODE,@nomap as INDUSTRY_DESCRIPTION,
	case when charindex(RTRIM(dej.b2grupa), @nace_code_enum) > 0 then dej.b2grupa else '*n.a.*' end as NACE_CODE,
        case when c.drzavljan is null then '*nomap*' 
			 when c.drzavljan = 'B1' then 'BA'
			 when c.drzavljan = 'B2' then 'BA'
			 when c.drzavljan = 'CS' then 'RS'
			 else c.drzavljan end as NATIONALITY_ISO_CODE,
	@nomap as NATIONALITY_NUM_CODE,
	@nomap as NATIONALITY_DESCRIPTION,
    case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RISK_ISO_CODE,
	@nomap as COUNTRY_OF_RISK_NUM_CODE,@nomap as COUNTRY_OF_RISK_NAME,@nomap as PARENT_CUSTOMER_ID,@nomap as GAMS,@nomap as INPUT_USER_ID,
	@nomap as AUTH_USER_ID,@nomap as EMPLOYER_DETAILS,'*nomap*' as SWIFT_ADDRESS,@nomap as PROFIT_CENTRE_CODE,@nomap as PROFIT_CENTRE_DESCRIPTION,
	@nomap as IAS_PROFIT_CENTRE_CODE,'Y' as INTERNAL_BRANCH_INDICATOR,'*nomap*' as NATIONAL_BANK_NUMBER,'N' as MARKET_PARTICIPANT_INDICATOR,
	@nomap as CREDIT_RELATIONSHIP,'*nomap*' as CUSTOMER_RELATION_INDICATOR,
        case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
        when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
        else '*nomap*'
        end as CUSTOMER_ASSET_CLASS_ID,
	@nomap as STATUS_DESCRIPTION,'A' as STATUS_INDICATOR,{2}.dbo.gfn_GetAnyID('customer_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id') as SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('customer_entity_id') as ENTITY_ID,
	@default_date_ss as SOURCE_DATE,@nomap as BRANCH_APPLICATION_ID,@nomap as BRANCH_ENTITY_ID,@nomap as BRANCH_SOURCE_SYSTEM_ID,
	@nomap as ACCT_OFF_APPLICATION_ID,@nomap as ACCT_OFF_ENTITY_ID,@nomap as ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as SECTOR_APPLICATION_ID,
	@nomap as SECTOR_ENTITY_ID,@nomap as SECTOR_SOURCE_SYSTEM_ID,@nomap as CUST_TP_APPLICATION_ID,@nomap as CUST_TP_ENTITY_ID,
	@nomap as CUST_TP_SOURCE_SYSTEM_ID,@nomap as INDUSTRY_APPLICATION_ID,@nomap as INDUSTRY_ENTITY_ID,@nomap as INDUSTRY_SOURCE_SYSTEM_ID,
	@nomap as PROF_CNT_APPLICATION_ID,@nomap as PROF_CNT_ENTITY_ID,@nomap as PROF_CNT_SOURCE_SYSTEM_ID,@nomap as IAS_PROF_CNT_APPLICATION_ID,
	@nomap as IAS_PROF_CNT_ENTITY_ID,@nomap as IAS_PROF_CNT_SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_application_id') as CUST_AST_CLS_APPLICATION_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_entity_id') as CUST_AST_CLS_ENTITY_ID,
	{2}.dbo.gfn_GetAnyID('cust_ast_cls_source_system_id') as CUST_AST_CLS_SOURCE_SYSTEM_ID,@nomap as PARNT_CUST_APPLICATION_ID,@nomap as PARNT_CUST_ENTITY_ID,@nomap as PARNT_CUST_SOURCE_SYSTEM_ID,
	@nomap as DP_ACCT_OFF_APPLICATION_ID,@nomap as DP_ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as DP_ACCT_OFF_ENTITY_ID,@nomap as AUTH_USER_APPLICATION_ID,
	@nomap as AUTH_USER_SOURCE_SYSTEM_ID,@nomap as AUTH_USER_ENTITY_ID,@nomap as INP_USER_APPLICATION_ID,@nomap as INP_USER_SOURCE_SYSTEM_ID,
	@nomap as INP_USER_ENTITY_ID,'*nomap*' as RISK_AREA_CODE,'*nomap*' as RISK_SUB_AREA_CODE,@nomap as RISK_AREA_APPLICATION_ID,
	@nomap as RISK_AREA_ENTITY_ID,@nomap as RISK_AREA_SOURCE_SYSTEM_ID,
        case when substring(pe.eval_model,1,2) in ('01','20') then 'Y' else 'N' end as RETAIL_INDICATOR,
        'Y' as MAIN_CUSTOMER_INDICATOR,'*nomap*' as OENB_SECTOR_CODE,@nomap as IAS_LOCAL_PROFIT_CENTRE_CODE,@nomap as IAS_LCL_PR_C_APPLICATION_ID,
	@nomap as IAS_LCL_PR_C_ENTITY_ID,@nomap as IAS_LCL_PR_C_SOURCE_SYSTEM_ID,@nomap as LOCAL_LINE_OF_BUSINESS_TYPE,
	@nomap as LEVEL_OF_IMPORTANCE,'*nomap*' as ELIGIBILITY_INDICATOR,@nomap as TAX_INDICATOR,NULL as QUALITY_INDICATOR,@date_to as DATE_FROM
	FROM {1}.dbo.oc_contracts co
      INNER JOIN {1}.dbo.oc_customers c ON co.id_oc_report = c.id_oc_report AND co.id_kupca = c.id_kupca
      LEFT JOIN {1}.dbo.dejavnos dej ON c.sif_dej = dej.sif_dej AND c.id_oc_report = dej.id_oc_report
      INNER JOIN (SELECT P.* 
                 FROM {1}.dbo.p_eval P
                 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                            FROM {1}.dbo.p_eval
                            GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
                 WHERE P.id_oc_report = @id_oc_report) PE ON C.id_kupca = PE.id_kupca AND C.id_oc_report = PE.id_oc_report
      WHERE c.id_oc_report = @id_oc_report
	  --AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
	  AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))

	  
	-- CUSTOMERS FROM FRAMES (field MAIN_CUSTOMER_INDICATOR = 'N' if customer is not on any contract, else it is already in table ST_CUSTOMERS with value 'Y' )
	INSERT INTO {2}.dbo.st_customer
        (CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_NAME_CONTINUED,SHORT_NAME,STREET,CITY_TOWN,POSTAL_CODE,REGION_COUNTY,
         PROVINCE,COUNTRY_OF_RESIDENCE_ISO_CODE,COUNTRY_OF_RESIDENCE_NUM_CODE,COUNTRY_OF_RESIDENCE_NAME,
         CUSTOMER_NAME_2,STREET_2,CITY_TOWN_2,POSTAL_CODE_2,REGION_COUNTY_2,PROVINCE_2,COUNTRY_2_ISO_CODE,
         COUNTRY_2_NUM_CODE,COUNTRY_2_NAME,HOME_PHONE,WORK_PHONE,MOBILE_PHONE_NUMBER,EMAIL,FAX,BRANCH_CODE,
         BRANCH_NAME,CONTACT_DATE,BIRTH_DATE,PLACE_OF_BIRTH,DECEASED_DATE,CREATION_DATE,REGISTRATION_NUMBER,
         TAX_NUMBER,GENDER,PARENT_INDICATOR,ACCOUNT_OFFICER_ID,DEPUTY_ACCOUNT_OFFICER_ID,SECTOR_ID,SECTOR_DESCRIPTION,
	 CUSTOMER_TYPE_ID,CUSTOMER_TYPE_DESCRIPTION,GROUP_CUSTOMER_TYPE_ID,GROUP_CUSTOMER_TYPE_DESCR,EMPLOYEE_INDICATOR,
         INDUSTRY_CODE,INDUSTRY_DESCRIPTION,NACE_CODE,NATIONALITY_ISO_CODE,NATIONALITY_NUM_CODE,NATIONALITY_DESCRIPTION,
         COUNTRY_OF_RISK_ISO_CODE,COUNTRY_OF_RISK_NUM_CODE,COUNTRY_OF_RISK_NAME,PARENT_CUSTOMER_ID,GAMS,INPUT_USER_ID,
         AUTH_USER_ID,EMPLOYER_DETAILS,SWIFT_ADDRESS,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,IAS_PROFIT_CENTRE_CODE,
         INTERNAL_BRANCH_INDICATOR,NATIONAL_BANK_NUMBER,MARKET_PARTICIPANT_INDICATOR,CREDIT_RELATIONSHIP,CUSTOMER_RELATION_INDICATOR,
         CUSTOMER_ASSET_CLASS_ID,STATUS_DESCRIPTION,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,SOURCE_DATE,
         BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,
         ACCT_OFF_SOURCE_SYSTEM_ID,SECTOR_APPLICATION_ID,SECTOR_ENTITY_ID,SECTOR_SOURCE_SYSTEM_ID,CUST_TP_APPLICATION_ID,
         CUST_TP_ENTITY_ID,CUST_TP_SOURCE_SYSTEM_ID,INDUSTRY_APPLICATION_ID,INDUSTRY_ENTITY_ID,INDUSTRY_SOURCE_SYSTEM_ID,
         PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,IAS_PROF_CNT_APPLICATION_ID,IAS_PROF_CNT_ENTITY_ID,
         IAS_PROF_CNT_SOURCE_SYSTEM_ID,CUST_AST_CLS_APPLICATION_ID,CUST_AST_CLS_ENTITY_ID,CUST_AST_CLS_SOURCE_SYSTEM_ID,
         PARNT_CUST_APPLICATION_ID,PARNT_CUST_ENTITY_ID,PARNT_CUST_SOURCE_SYSTEM_ID,DP_ACCT_OFF_APPLICATION_ID,
         DP_ACCT_OFF_SOURCE_SYSTEM_ID,DP_ACCT_OFF_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,
         INP_USER_APPLICATION_ID,INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,RISK_AREA_CODE,RISK_SUB_AREA_CODE,RISK_AREA_APPLICATION_ID,
         RISK_AREA_ENTITY_ID,RISK_AREA_SOURCE_SYSTEM_ID,RETAIL_INDICATOR,MAIN_CUSTOMER_INDICATOR,OENB_SECTOR_CODE,
         IAS_LOCAL_PROFIT_CENTRE_CODE,IAS_LCL_PR_C_APPLICATION_ID,IAS_LCL_PR_C_ENTITY_ID,IAS_LCL_PR_C_SOURCE_SYSTEM_ID,
         LOCAL_LINE_OF_BUSINESS_TYPE,LEVEL_OF_IMPORTANCE,ELIGIBILITY_INDICATOR,TAX_INDICATOR,QUALITY_INDICATOR,DATE_FROM)
            SELECT DISTINCT
        c.id_kupca as CUSTOMER_ID,c.naz_kr_kup as CUSTOMER_NAME,'*nomap*' as CUSTOMER_NAME_CONTINUED,'*nomap*' as SHORT_NAME,
        c.ulica_sed as STREET,c.mesto_sed as CITY_TOWN,c.id_poste_sed as POSTAL_CODE,'*nomap*' as REGION_COUNTY,
        '*nomap*' as PROVINCE,
        case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RESIDENCE_ISO_CODE,
        @nomap as COUNTRY_OF_RESIDENCE_NUM_CODE,substring(c.id_poste_sed,0,3) as COUNTRY_OF_RESIDENCE_NAME,@nomap as CUSTOMER_NAME_2,
        @nomap as STREET_2,@nomap as CITY_TOWN_2,@nomap as POSTAL_CODE_2,
        case when c.ulica_sed<>c.ulica then c.ulica+c.id_poste_sed+c.mesto else null end as REGION_COUNTY_2,@nomap as PROVINCE_2,
	@nomap as COUNTRY_2_ISO_CODE,@nomap as COUNTRY_2_NUM_CODE,@nomap as COUNTRY_2_NAME,c.telefon as HOME_PHONE,'*nomap*' as WORK_PHONE,
	c.gsm as MOBILE_PHONE_NUMBER,c.email as EMAIL,@nomap as FAX,@nomap as BRANCH_CODE,@nomap as BRANCH_NAME,@default_date_ss as CONTACT_DATE,
        IsNull(case when c.vr_osebe='FO' then c.dat_roj else c.dat_reg end, @default_date_row) as BIRTH_DATE,'*nomap*' as PLACE_OF_BIRTH, @default_date_ss as DECEASED_DATE,
        c.dat_vnosa as CREATION_DATE,c.emso as REGISTRATION_NUMBER,@nomap as TAX_NUMBER,
        case when c.vr_osebe='FO' then (case c.spol when 'M' then 'M' when 'F' then 'F' else 'U' end) else '*nomap*' end as GENDER,
	@nomap as PARENT_INDICATOR,@nomap as ACCOUNT_OFFICER_ID,@nomap as DEPUTY_ACCOUNT_OFFICER_ID,@nomap as SECTOR_ID,@nomap as SECTOR_DESCRIPTION,
	@nomap as CUSTOMER_TYPE_ID,@nomap as CUSTOMER_TYPE_DESCRIPTION,@nomap as GROUP_CUSTOMER_TYPE_ID,@nomap as GROUP_CUSTOMER_TYPE_DESCR,
	@nomap as EMPLOYEE_INDICATOR,@nomap as INDUSTRY_CODE,@nomap as INDUSTRY_DESCRIPTION,
	case when charindex(RTRIM(dej.b2grupa), @nace_code_enum) > 0 then dej.b2grupa else '*n.a.*' end as NACE_CODE,
        case when c.drzavljan is null then '*nomap*' 
			 when c.drzavljan = 'B1' then 'BA'
			 when c.drzavljan = 'B2' then 'BA'
			 when c.drzavljan = 'CS' then 'RS'
			 else c.drzavljan end as NATIONALITY_ISO_CODE,
	@nomap as NATIONALITY_NUM_CODE,
	@nomap as NATIONALITY_DESCRIPTION,
    case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RISK_ISO_CODE,
	@nomap as COUNTRY_OF_RISK_NUM_CODE,@nomap as COUNTRY_OF_RISK_NAME,@nomap as PARENT_CUSTOMER_ID,@nomap as GAMS,@nomap as INPUT_USER_ID,
	@nomap as AUTH_USER_ID,@nomap as EMPLOYER_DETAILS,'*nomap*' as SWIFT_ADDRESS,@nomap as PROFIT_CENTRE_CODE,@nomap as PROFIT_CENTRE_DESCRIPTION,
	@nomap as IAS_PROFIT_CENTRE_CODE,'Y' as INTERNAL_BRANCH_INDICATOR,'*nomap*' as NATIONAL_BANK_NUMBER,'N' as MARKET_PARTICIPANT_INDICATOR,
	@nomap as CREDIT_RELATIONSHIP,'*nomap*' as CUSTOMER_RELATION_INDICATOR,
        case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
        when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
        else '*nomap*'
        end as CUSTOMER_ASSET_CLASS_ID,
	@nomap as STATUS_DESCRIPTION,'A' as STATUS_INDICATOR,{2}.dbo.gfn_GetAnyID('customer_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id') as SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('customer_entity_id') as ENTITY_ID,
	@default_date_ss as SOURCE_DATE,@nomap as BRANCH_APPLICATION_ID,@nomap as BRANCH_ENTITY_ID,@nomap as BRANCH_SOURCE_SYSTEM_ID,
	@nomap as ACCT_OFF_APPLICATION_ID,@nomap as ACCT_OFF_ENTITY_ID,@nomap as ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as SECTOR_APPLICATION_ID,
	@nomap as SECTOR_ENTITY_ID,@nomap as SECTOR_SOURCE_SYSTEM_ID,@nomap as CUST_TP_APPLICATION_ID,@nomap as CUST_TP_ENTITY_ID,
	@nomap as CUST_TP_SOURCE_SYSTEM_ID,@nomap as INDUSTRY_APPLICATION_ID,@nomap as INDUSTRY_ENTITY_ID,@nomap as INDUSTRY_SOURCE_SYSTEM_ID,
	@nomap as PROF_CNT_APPLICATION_ID,@nomap as PROF_CNT_ENTITY_ID,@nomap as PROF_CNT_SOURCE_SYSTEM_ID,@nomap as IAS_PROF_CNT_APPLICATION_ID,
	@nomap as IAS_PROF_CNT_ENTITY_ID,@nomap as IAS_PROF_CNT_SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_application_id') as CUST_AST_CLS_APPLICATION_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_entity_id') as CUST_AST_CLS_ENTITY_ID,
	{2}.dbo.gfn_GetAnyID('cust_ast_cls_source_system_id') as CUST_AST_CLS_SOURCE_SYSTEM_ID,@nomap as PARNT_CUST_APPLICATION_ID,@nomap as PARNT_CUST_ENTITY_ID,@nomap as PARNT_CUST_SOURCE_SYSTEM_ID,
	@nomap as DP_ACCT_OFF_APPLICATION_ID,@nomap as DP_ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as DP_ACCT_OFF_ENTITY_ID,@nomap as AUTH_USER_APPLICATION_ID,
	@nomap as AUTH_USER_SOURCE_SYSTEM_ID,@nomap as AUTH_USER_ENTITY_ID,@nomap as INP_USER_APPLICATION_ID,@nomap as INP_USER_SOURCE_SYSTEM_ID,
	@nomap as INP_USER_ENTITY_ID,'*nomap*' as RISK_AREA_CODE,'*nomap*' as RISK_SUB_AREA_CODE,@nomap as RISK_AREA_APPLICATION_ID,
	@nomap as RISK_AREA_ENTITY_ID,@nomap as RISK_AREA_SOURCE_SYSTEM_ID,
        case when substring(pe.eval_model,1,2) in ('01','20') then 'Y' else 'N' end as RETAIL_INDICATOR,
        'N' as MAIN_CUSTOMER_INDICATOR,'*nomap*' as OENB_SECTOR_CODE,@nomap as IAS_LOCAL_PROFIT_CENTRE_CODE,@nomap as IAS_LCL_PR_C_APPLICATION_ID,
	@nomap as IAS_LCL_PR_C_ENTITY_ID,@nomap as IAS_LCL_PR_C_SOURCE_SYSTEM_ID,@nomap as LOCAL_LINE_OF_BUSINESS_TYPE,
	@nomap as LEVEL_OF_IMPORTANCE,'*nomap*' as ELIGIBILITY_INDICATOR,@nomap as TAX_INDICATOR,NULL as QUALITY_INDICATOR,@date_to as DATE_FROM
	FROM {1}.dbo.oc_frames fr
      INNER JOIN {1}.dbo.oc_customers c ON fr.id_oc_report = c.id_oc_report AND fr.id_kupca = c.id_kupca
      LEFT JOIN {1}.dbo.dejavnos dej ON c.sif_dej = dej.sif_dej AND c.id_oc_report = dej.id_oc_report
      INNER JOIN (SELECT P.* 
                 FROM {1}.dbo.p_eval P
                 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                            FROM {1}.dbo.p_eval
                            GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
                 WHERE P.id_oc_report = @id_oc_report) PE ON C.id_kupca = PE.id_kupca AND C.id_oc_report = PE.id_oc_report
      WHERE c.id_oc_report = @id_oc_report
	  --AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
     AND
		(	fr.b2_eligible = 1
			AND
			(fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to)))
		)
      AND c.id_kupca NOT IN (SELECT customer_id from {2}.dbo.st_customer)
     

-- CUSTOMERS ON COLLATERALS (field MAIN_CUSTOMER_INDICATOR = 'N' if customer is not on any contract, else it is already in table ST_CUSTOMERS with value 'Y')	  
INSERT INTO {2}.dbo.st_customer
        (CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_NAME_CONTINUED,SHORT_NAME,STREET,CITY_TOWN,POSTAL_CODE,REGION_COUNTY,
         PROVINCE,COUNTRY_OF_RESIDENCE_ISO_CODE,COUNTRY_OF_RESIDENCE_NUM_CODE,COUNTRY_OF_RESIDENCE_NAME,
         CUSTOMER_NAME_2,STREET_2,CITY_TOWN_2,POSTAL_CODE_2,REGION_COUNTY_2,PROVINCE_2,COUNTRY_2_ISO_CODE,
         COUNTRY_2_NUM_CODE,COUNTRY_2_NAME,HOME_PHONE,WORK_PHONE,MOBILE_PHONE_NUMBER,EMAIL,FAX,BRANCH_CODE,
         BRANCH_NAME,CONTACT_DATE,BIRTH_DATE,PLACE_OF_BIRTH,DECEASED_DATE,CREATION_DATE,REGISTRATION_NUMBER,
         TAX_NUMBER,GENDER,PARENT_INDICATOR,ACCOUNT_OFFICER_ID,DEPUTY_ACCOUNT_OFFICER_ID,SECTOR_ID,SECTOR_DESCRIPTION,
		 CUSTOMER_TYPE_ID,CUSTOMER_TYPE_DESCRIPTION,GROUP_CUSTOMER_TYPE_ID,GROUP_CUSTOMER_TYPE_DESCR,EMPLOYEE_INDICATOR,
         INDUSTRY_CODE,INDUSTRY_DESCRIPTION,NACE_CODE,NATIONALITY_ISO_CODE,NATIONALITY_NUM_CODE,NATIONALITY_DESCRIPTION,
         COUNTRY_OF_RISK_ISO_CODE,COUNTRY_OF_RISK_NUM_CODE,COUNTRY_OF_RISK_NAME,PARENT_CUSTOMER_ID,GAMS,INPUT_USER_ID,
         AUTH_USER_ID,EMPLOYER_DETAILS,SWIFT_ADDRESS,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,IAS_PROFIT_CENTRE_CODE,
         INTERNAL_BRANCH_INDICATOR,NATIONAL_BANK_NUMBER,MARKET_PARTICIPANT_INDICATOR,CREDIT_RELATIONSHIP,CUSTOMER_RELATION_INDICATOR,
         CUSTOMER_ASSET_CLASS_ID,STATUS_DESCRIPTION,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,SOURCE_DATE,
         BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,
         ACCT_OFF_SOURCE_SYSTEM_ID,SECTOR_APPLICATION_ID,SECTOR_ENTITY_ID,SECTOR_SOURCE_SYSTEM_ID,CUST_TP_APPLICATION_ID,
         CUST_TP_ENTITY_ID,CUST_TP_SOURCE_SYSTEM_ID,INDUSTRY_APPLICATION_ID,INDUSTRY_ENTITY_ID,INDUSTRY_SOURCE_SYSTEM_ID,
         PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,IAS_PROF_CNT_APPLICATION_ID,IAS_PROF_CNT_ENTITY_ID,
         IAS_PROF_CNT_SOURCE_SYSTEM_ID,CUST_AST_CLS_APPLICATION_ID,CUST_AST_CLS_ENTITY_ID,CUST_AST_CLS_SOURCE_SYSTEM_ID,
         PARNT_CUST_APPLICATION_ID,PARNT_CUST_ENTITY_ID,PARNT_CUST_SOURCE_SYSTEM_ID,DP_ACCT_OFF_APPLICATION_ID,
         DP_ACCT_OFF_SOURCE_SYSTEM_ID,DP_ACCT_OFF_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,
         INP_USER_APPLICATION_ID,INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,RISK_AREA_CODE,RISK_SUB_AREA_CODE,RISK_AREA_APPLICATION_ID,
         RISK_AREA_ENTITY_ID,RISK_AREA_SOURCE_SYSTEM_ID,RETAIL_INDICATOR,MAIN_CUSTOMER_INDICATOR,OENB_SECTOR_CODE,
         IAS_LOCAL_PROFIT_CENTRE_CODE,IAS_LCL_PR_C_APPLICATION_ID,IAS_LCL_PR_C_ENTITY_ID,IAS_LCL_PR_C_SOURCE_SYSTEM_ID,
         LOCAL_LINE_OF_BUSINESS_TYPE,LEVEL_OF_IMPORTANCE,ELIGIBILITY_INDICATOR,TAX_INDICATOR,QUALITY_INDICATOR,DATE_FROM)
      SELECT DISTINCT
        c.id_kupca CUSTOMER_ID,
		c.naz_kr_kup as CUSTOMER_NAME,'*nomap*' as CUSTOMER_NAME_CONTINUED,'*nomap*' as SHORT_NAME,
        c.ulica_sed as STREET,c.mesto_sed as CITY_TOWN,c.id_poste_sed as POSTAL_CODE,'*nomap*' as REGION_COUNTY,
        '*nomap*' as PROVINCE,
        case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RESIDENCE_ISO_CODE,
        @nomap as COUNTRY_OF_RESIDENCE_NUM_CODE,substring(c.id_poste_sed,0,3) as COUNTRY_OF_RESIDENCE_NAME,@nomap as CUSTOMER_NAME_2,
        @nomap as STREET_2,@nomap as CITY_TOWN_2,@nomap as POSTAL_CODE_2,
        case when c.ulica_sed<>c.ulica then c.ulica+c.id_poste_sed+c.mesto else null end as REGION_COUNTY_2,@nomap as PROVINCE_2,
	@nomap as COUNTRY_2_ISO_CODE,@nomap as COUNTRY_2_NUM_CODE,@nomap as COUNTRY_2_NAME,c.telefon as HOME_PHONE,'*nomap*' as WORK_PHONE,
	c.gsm as MOBILE_PHONE_NUMBER,c.email as EMAIL,@nomap as FAX,@nomap as BRANCH_CODE,@nomap as BRANCH_NAME,@default_date_ss as CONTACT_DATE,
        IsNull(case when c.vr_osebe='FO' then c.dat_roj else c.dat_reg end, @default_date_row) as BIRTH_DATE,'*nomap*' as PLACE_OF_BIRTH, @default_date_ss as DECEASED_DATE,
        c.dat_vnosa as CREATION_DATE,c.emso as REGISTRATION_NUMBER,@nomap as TAX_NUMBER,
        case when c.vr_osebe='FO' then (case c.spol when 'M' then 'M' when 'F' then 'F' else 'U' end) else '*nomap*' end as GENDER,
	@nomap as PARENT_INDICATOR,@nomap as ACCOUNT_OFFICER_ID,@nomap as DEPUTY_ACCOUNT_OFFICER_ID,@nomap as SECTOR_ID,@nomap as SECTOR_DESCRIPTION,
	@nomap as CUSTOMER_TYPE_ID,@nomap as CUSTOMER_TYPE_DESCRIPTION,@nomap as GROUP_CUSTOMER_TYPE_ID,@nomap as GROUP_CUSTOMER_TYPE_DESCR,
	@nomap as EMPLOYEE_INDICATOR,@nomap as INDUSTRY_CODE,@nomap as INDUSTRY_DESCRIPTION,
	case when charindex(RTRIM(dej.b2grupa), @nace_code_enum) > 0 then dej.b2grupa else '*n.a.*' end as NACE_CODE,
        case when c.drzavljan is null then '*nomap*' 
			 when c.drzavljan = 'B1' then 'BA'
			 when c.drzavljan = 'B2' then 'BA'
			 when c.drzavljan = 'CS' then 'RS'
			 else c.drzavljan end as NATIONALITY_ISO_CODE,
	@nomap as NATIONALITY_NUM_CODE,
	@nomap as NATIONALITY_DESCRIPTION,
    case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RISK_ISO_CODE,
	@nomap as COUNTRY_OF_RISK_NUM_CODE,@nomap as COUNTRY_OF_RISK_NAME,@nomap as PARENT_CUSTOMER_ID,@nomap as GAMS,@nomap as INPUT_USER_ID,
	@nomap as AUTH_USER_ID,@nomap as EMPLOYER_DETAILS,'*nomap*' as SWIFT_ADDRESS,@nomap as PROFIT_CENTRE_CODE,@nomap as PROFIT_CENTRE_DESCRIPTION,
	@nomap as IAS_PROFIT_CENTRE_CODE,'Y' as INTERNAL_BRANCH_INDICATOR,'*nomap*' as NATIONAL_BANK_NUMBER,'N' as MARKET_PARTICIPANT_INDICATOR,
	@nomap as CREDIT_RELATIONSHIP,'*nomap*' as CUSTOMER_RELATION_INDICATOR,
        case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
        when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
        else '*nomap*'
        end as CUSTOMER_ASSET_CLASS_ID,
	@nomap as STATUS_DESCRIPTION,'A' as STATUS_INDICATOR,{2}.dbo.gfn_GetAnyID('customer_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id') as SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('customer_entity_id') as ENTITY_ID,
	@default_date_ss as SOURCE_DATE,@nomap as BRANCH_APPLICATION_ID,@nomap as BRANCH_ENTITY_ID,@nomap as BRANCH_SOURCE_SYSTEM_ID,
	@nomap as ACCT_OFF_APPLICATION_ID,@nomap as ACCT_OFF_ENTITY_ID,@nomap as ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as SECTOR_APPLICATION_ID,
	@nomap as SECTOR_ENTITY_ID,@nomap as SECTOR_SOURCE_SYSTEM_ID,@nomap as CUST_TP_APPLICATION_ID,@nomap as CUST_TP_ENTITY_ID,
	@nomap as CUST_TP_SOURCE_SYSTEM_ID,@nomap as INDUSTRY_APPLICATION_ID,@nomap as INDUSTRY_ENTITY_ID,@nomap as INDUSTRY_SOURCE_SYSTEM_ID,
	@nomap as PROF_CNT_APPLICATION_ID,@nomap as PROF_CNT_ENTITY_ID,@nomap as PROF_CNT_SOURCE_SYSTEM_ID,@nomap as IAS_PROF_CNT_APPLICATION_ID,
	@nomap as IAS_PROF_CNT_ENTITY_ID,@nomap as IAS_PROF_CNT_SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_application_id') as CUST_AST_CLS_APPLICATION_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_entity_id') as CUST_AST_CLS_ENTITY_ID,
	{2}.dbo.gfn_GetAnyID('cust_ast_cls_source_system_id') as CUST_AST_CLS_SOURCE_SYSTEM_ID,@nomap as PARNT_CUST_APPLICATION_ID,@nomap as PARNT_CUST_ENTITY_ID,@nomap as PARNT_CUST_SOURCE_SYSTEM_ID,
	@nomap as DP_ACCT_OFF_APPLICATION_ID,@nomap as DP_ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as DP_ACCT_OFF_ENTITY_ID,@nomap as AUTH_USER_APPLICATION_ID,
	@nomap as AUTH_USER_SOURCE_SYSTEM_ID,@nomap as AUTH_USER_ENTITY_ID,@nomap as INP_USER_APPLICATION_ID,@nomap as INP_USER_SOURCE_SYSTEM_ID,
	@nomap as INP_USER_ENTITY_ID,'*nomap*' as RISK_AREA_CODE,'*nomap*' as RISK_SUB_AREA_CODE,@nomap as RISK_AREA_APPLICATION_ID,
	@nomap as RISK_AREA_ENTITY_ID,@nomap as RISK_AREA_SOURCE_SYSTEM_ID,
        case when substring(pe.eval_model,1,2) in ('01','20') then 'Y' else 'N' end as RETAIL_INDICATOR,
        'N' as MAIN_CUSTOMER_INDICATOR,'*nomap*' as OENB_SECTOR_CODE,@nomap as IAS_LOCAL_PROFIT_CENTRE_CODE,@nomap as IAS_LCL_PR_C_APPLICATION_ID,
	@nomap as IAS_LCL_PR_C_ENTITY_ID,@nomap as IAS_LCL_PR_C_SOURCE_SYSTEM_ID,@nomap as LOCAL_LINE_OF_BUSINESS_TYPE,
	@nomap as LEVEL_OF_IMPORTANCE,'*nomap*' as ELIGIBILITY_INDICATOR,@nomap as TAX_INDICATOR,NULL as QUALITY_INDICATOR,@date_to as DATE_FROM
	FROM {1}.dbo.oc_contracts co
      INNER JOIN {1}.dbo.dokument dok ON co.id_oc_report = dok.id_oc_report AND co.id_cont = dok.id_cont
	  INNER JOIN {2}.dbo.b2collat col ON dok.id_obl_zav = col.id_obl_zav
      INNER JOIN {1}.dbo.oc_customers c ON dok.id_oc_report = c.id_oc_report AND dok.id_kupca = c.id_kupca
      LEFT JOIN {1}.dbo.dejavnos dej ON c.sif_dej = dej.sif_dej AND c.id_oc_report = dej.id_oc_report
      INNER JOIN (SELECT P.* 
                 FROM {1}.dbo.p_eval P
                 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                            FROM {1}.dbo.p_eval
                            GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
                 WHERE P.id_oc_report = @id_oc_report) PE ON C.id_kupca = PE.id_kupca AND C.id_oc_report = PE.id_oc_report
      WHERE c.id_oc_report = @id_oc_report
	  --AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
	  AND (dok.id_hipot = col.id_hipot OR col.id_hipot = '*')
      AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
	  AND c.id_kupca NOT IN (SELECT customer_id from {2}.dbo.st_customer)
	  AND dok.ima = 1

	  	  
-- THIS IS SELECT FOR RAIFFEISEN CUSTOMER-NEEDED FOR FA(field MAIN_CUSTOMER_INDICATOR = 'N' if Raiffeisen customer is not on any contract, else it is already in table ST_CUSTOMERS with value 'Y')
INSERT INTO {2}.dbo.st_customer
        (CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_NAME_CONTINUED,SHORT_NAME,STREET,CITY_TOWN,POSTAL_CODE,REGION_COUNTY,
         PROVINCE,COUNTRY_OF_RESIDENCE_ISO_CODE,COUNTRY_OF_RESIDENCE_NUM_CODE,COUNTRY_OF_RESIDENCE_NAME,
         CUSTOMER_NAME_2,STREET_2,CITY_TOWN_2,POSTAL_CODE_2,REGION_COUNTY_2,PROVINCE_2,COUNTRY_2_ISO_CODE,
         COUNTRY_2_NUM_CODE,COUNTRY_2_NAME,HOME_PHONE,WORK_PHONE,MOBILE_PHONE_NUMBER,EMAIL,FAX,BRANCH_CODE,
         BRANCH_NAME,CONTACT_DATE,BIRTH_DATE,PLACE_OF_BIRTH,DECEASED_DATE,CREATION_DATE,REGISTRATION_NUMBER,
         TAX_NUMBER,GENDER,PARENT_INDICATOR,ACCOUNT_OFFICER_ID,DEPUTY_ACCOUNT_OFFICER_ID,SECTOR_ID,SECTOR_DESCRIPTION,
		 CUSTOMER_TYPE_ID,CUSTOMER_TYPE_DESCRIPTION,GROUP_CUSTOMER_TYPE_ID,GROUP_CUSTOMER_TYPE_DESCR,EMPLOYEE_INDICATOR,
         INDUSTRY_CODE,INDUSTRY_DESCRIPTION,NACE_CODE,NATIONALITY_ISO_CODE,NATIONALITY_NUM_CODE,NATIONALITY_DESCRIPTION,
         COUNTRY_OF_RISK_ISO_CODE,COUNTRY_OF_RISK_NUM_CODE,COUNTRY_OF_RISK_NAME,PARENT_CUSTOMER_ID,GAMS,INPUT_USER_ID,
         AUTH_USER_ID,EMPLOYER_DETAILS,SWIFT_ADDRESS,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,IAS_PROFIT_CENTRE_CODE,
         INTERNAL_BRANCH_INDICATOR,NATIONAL_BANK_NUMBER,MARKET_PARTICIPANT_INDICATOR,CREDIT_RELATIONSHIP,CUSTOMER_RELATION_INDICATOR,
         CUSTOMER_ASSET_CLASS_ID,STATUS_DESCRIPTION,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,SOURCE_DATE,
         BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,
         ACCT_OFF_SOURCE_SYSTEM_ID,SECTOR_APPLICATION_ID,SECTOR_ENTITY_ID,SECTOR_SOURCE_SYSTEM_ID,CUST_TP_APPLICATION_ID,
         CUST_TP_ENTITY_ID,CUST_TP_SOURCE_SYSTEM_ID,INDUSTRY_APPLICATION_ID,INDUSTRY_ENTITY_ID,INDUSTRY_SOURCE_SYSTEM_ID,
         PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,IAS_PROF_CNT_APPLICATION_ID,IAS_PROF_CNT_ENTITY_ID,
         IAS_PROF_CNT_SOURCE_SYSTEM_ID,CUST_AST_CLS_APPLICATION_ID,CUST_AST_CLS_ENTITY_ID,CUST_AST_CLS_SOURCE_SYSTEM_ID,
         PARNT_CUST_APPLICATION_ID,PARNT_CUST_ENTITY_ID,PARNT_CUST_SOURCE_SYSTEM_ID,DP_ACCT_OFF_APPLICATION_ID,
         DP_ACCT_OFF_SOURCE_SYSTEM_ID,DP_ACCT_OFF_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,
         INP_USER_APPLICATION_ID,INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,RISK_AREA_CODE,RISK_SUB_AREA_CODE,RISK_AREA_APPLICATION_ID,
         RISK_AREA_ENTITY_ID,RISK_AREA_SOURCE_SYSTEM_ID,RETAIL_INDICATOR,MAIN_CUSTOMER_INDICATOR,OENB_SECTOR_CODE,
         IAS_LOCAL_PROFIT_CENTRE_CODE,IAS_LCL_PR_C_APPLICATION_ID,IAS_LCL_PR_C_ENTITY_ID,IAS_LCL_PR_C_SOURCE_SYSTEM_ID,
         LOCAL_LINE_OF_BUSINESS_TYPE,LEVEL_OF_IMPORTANCE,ELIGIBILITY_INDICATOR,TAX_INDICATOR,QUALITY_INDICATOR,DATE_FROM)
      SELECT DISTINCT
        c.id_kupca as CUSTOMER_ID,c.naz_kr_kup as CUSTOMER_NAME,'*nomap*' as CUSTOMER_NAME_CONTINUED,'*nomap*' as SHORT_NAME,
        c.ulica_sed as STREET,c.mesto_sed as CITY_TOWN,c.id_poste_sed as POSTAL_CODE,'*nomap*' as REGION_COUNTY,
        '*nomap*' as PROVINCE,
        case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RESIDENCE_ISO_CODE,
        @nomap as COUNTRY_OF_RESIDENCE_NUM_CODE,substring(c.id_poste_sed,0,3) as COUNTRY_OF_RESIDENCE_NAME,@nomap as CUSTOMER_NAME_2,
        @nomap as STREET_2,@nomap as CITY_TOWN_2,@nomap as POSTAL_CODE_2,
        case when c.ulica_sed<>c.ulica then c.ulica+c.id_poste_sed+c.mesto else null end as REGION_COUNTY_2,@nomap as PROVINCE_2,
	@nomap as COUNTRY_2_ISO_CODE,@nomap as COUNTRY_2_NUM_CODE,@nomap as COUNTRY_2_NAME,c.telefon as HOME_PHONE,'*nomap*' as WORK_PHONE,
	c.gsm as MOBILE_PHONE_NUMBER,c.email as EMAIL,@nomap as FAX,@nomap as BRANCH_CODE,@nomap as BRANCH_NAME,@default_date_ss as CONTACT_DATE,
        IsNull(case when c.vr_osebe='FO' then c.dat_roj else c.dat_reg end, @default_date_row) as BIRTH_DATE,'*nomap*' as PLACE_OF_BIRTH, @default_date_ss as DECEASED_DATE,
        c.dat_vnosa as CREATION_DATE,c.emso as REGISTRATION_NUMBER,@nomap as TAX_NUMBER,
        case when c.vr_osebe='FO' then (case c.spol when 'M' then 'M' when 'F' then 'F' else 'U' end) else '*nomap*' end as GENDER,
	@nomap as PARENT_INDICATOR,@nomap as ACCOUNT_OFFICER_ID,@nomap as DEPUTY_ACCOUNT_OFFICER_ID,@nomap as SECTOR_ID,@nomap as SECTOR_DESCRIPTION,
	@nomap as CUSTOMER_TYPE_ID,@nomap as CUSTOMER_TYPE_DESCRIPTION,@nomap as GROUP_CUSTOMER_TYPE_ID,@nomap as GROUP_CUSTOMER_TYPE_DESCR,
	@nomap as EMPLOYEE_INDICATOR,@nomap as INDUSTRY_CODE,@nomap as INDUSTRY_DESCRIPTION,
	case when charindex(RTRIM(dej.b2grupa), @nace_code_enum) > 0 then dej.b2grupa else '*n.a.*' end as NACE_CODE,
        case when c.drzavljan is null then '*nomap*' 
			 when c.drzavljan = 'B1' then 'BA'
			 when c.drzavljan = 'B2' then 'BA'
			 when c.drzavljan = 'CS' then 'RS'
			 else c.drzavljan end as NATIONALITY_ISO_CODE,
	@nomap as NATIONALITY_NUM_CODE,
	@nomap as NATIONALITY_DESCRIPTION,
    case substring(c.id_poste_sed,0,3) when 'XX' then '*n.a.*' when 'EU' then '*n.a.*' when 'B1' then 'BA' when 'B2' then 'BA' when 'CS' then 'RS' else substring(c.id_poste_sed,0,3) end as COUNTRY_OF_RISK_ISO_CODE,
	@nomap as COUNTRY_OF_RISK_NUM_CODE,@nomap as COUNTRY_OF_RISK_NAME,@nomap as PARENT_CUSTOMER_ID,@nomap as GAMS,@nomap as INPUT_USER_ID,
	@nomap as AUTH_USER_ID,@nomap as EMPLOYER_DETAILS,'*nomap*' as SWIFT_ADDRESS,@nomap as PROFIT_CENTRE_CODE,@nomap as PROFIT_CENTRE_DESCRIPTION,
	@nomap as IAS_PROFIT_CENTRE_CODE,'Y' as INTERNAL_BRANCH_INDICATOR,'*nomap*' as NATIONAL_BANK_NUMBER,'N' as MARKET_PARTICIPANT_INDICATOR,
	@nomap as CREDIT_RELATIONSHIP,'*nomap*' as CUSTOMER_RELATION_INDICATOR,
        case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
        when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
        else '*nomap*'
        end as CUSTOMER_ASSET_CLASS_ID,
	@nomap as STATUS_DESCRIPTION,'A' as STATUS_INDICATOR,{2}.dbo.gfn_GetAnyID('customer_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id') as SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('customer_entity_id') as ENTITY_ID,
	@default_date_ss as SOURCE_DATE,@nomap as BRANCH_APPLICATION_ID,@nomap as BRANCH_ENTITY_ID,@nomap as BRANCH_SOURCE_SYSTEM_ID,
	@nomap as ACCT_OFF_APPLICATION_ID,@nomap as ACCT_OFF_ENTITY_ID,@nomap as ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as SECTOR_APPLICATION_ID,
	@nomap as SECTOR_ENTITY_ID,@nomap as SECTOR_SOURCE_SYSTEM_ID,@nomap as CUST_TP_APPLICATION_ID,@nomap as CUST_TP_ENTITY_ID,
	@nomap as CUST_TP_SOURCE_SYSTEM_ID,@nomap as INDUSTRY_APPLICATION_ID,@nomap as INDUSTRY_ENTITY_ID,@nomap as INDUSTRY_SOURCE_SYSTEM_ID,
	@nomap as PROF_CNT_APPLICATION_ID,@nomap as PROF_CNT_ENTITY_ID,@nomap as PROF_CNT_SOURCE_SYSTEM_ID,@nomap as IAS_PROF_CNT_APPLICATION_ID,
	@nomap as IAS_PROF_CNT_ENTITY_ID,@nomap as IAS_PROF_CNT_SOURCE_SYSTEM_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_application_id') as CUST_AST_CLS_APPLICATION_ID,{2}.dbo.gfn_GetAnyID('cust_ast_cls_entity_id') as CUST_AST_CLS_ENTITY_ID,
	{2}.dbo.gfn_GetAnyID('cust_ast_cls_source_system_id') as CUST_AST_CLS_SOURCE_SYSTEM_ID,@nomap as PARNT_CUST_APPLICATION_ID,@nomap as PARNT_CUST_ENTITY_ID,@nomap as PARNT_CUST_SOURCE_SYSTEM_ID,
	@nomap as DP_ACCT_OFF_APPLICATION_ID,@nomap as DP_ACCT_OFF_SOURCE_SYSTEM_ID,@nomap as DP_ACCT_OFF_ENTITY_ID,@nomap as AUTH_USER_APPLICATION_ID,
	@nomap as AUTH_USER_SOURCE_SYSTEM_ID,@nomap as AUTH_USER_ENTITY_ID,@nomap as INP_USER_APPLICATION_ID,@nomap as INP_USER_SOURCE_SYSTEM_ID,
	@nomap as INP_USER_ENTITY_ID,'*nomap*' as RISK_AREA_CODE,'*nomap*' as RISK_SUB_AREA_CODE,@nomap as RISK_AREA_APPLICATION_ID,
	@nomap as RISK_AREA_ENTITY_ID,@nomap as RISK_AREA_SOURCE_SYSTEM_ID,
        case when substring(pe.eval_model,1,2) in ('01','20') then 'Y' else 'N' end as RETAIL_INDICATOR,
        'N' as MAIN_CUSTOMER_INDICATOR,'*nomap*' as OENB_SECTOR_CODE,@nomap as IAS_LOCAL_PROFIT_CENTRE_CODE,@nomap as IAS_LCL_PR_C_APPLICATION_ID,
	@nomap as IAS_LCL_PR_C_ENTITY_ID,@nomap as IAS_LCL_PR_C_SOURCE_SYSTEM_ID,@nomap as LOCAL_LINE_OF_BUSINESS_TYPE,
	@nomap as LEVEL_OF_IMPORTANCE,'*nomap*' as ELIGIBILITY_INDICATOR,@nomap as TAX_INDICATOR,NULL as QUALITY_INDICATOR,@date_to as DATE_FROM
	FROM {1}.dbo.oc_customers c
      LEFT JOIN {1}.dbo.dejavnos dej ON c.sif_dej = dej.sif_dej AND c.id_oc_report = dej.id_oc_report
      INNER JOIN (SELECT P.* 
                 FROM {1}.dbo.p_eval P
                 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                            FROM {1}.dbo.p_eval
                            GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
                 WHERE P.id_oc_report = @id_oc_report) PE ON C.id_kupca = PE.id_kupca AND C.id_oc_report = PE.id_oc_report
      WHERE c.id_oc_report = @id_oc_report
	  --AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
	  AND c.id_kupca = @id_customer_dom
	  AND c.id_kupca NOT IN (SELECT customer_id from {2}.dbo.st_customer)
	  
--INSERT INTO ST_COCUNUT_CUSTOMER_NUMBER
      INSERT INTO {2}.dbo.st_cocunut_customer_number
        (COCUNUT_ID,COCUNUT_NAME,MAIN_CUSTOMER_ID,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,
         ENTITY_ID,SOURCE_DATE,M_CUSTOMER_APPLICATION_ID,M_CUSTOMER_ENTITY_ID,M_CUSTOMER_SOURCE_SYSTEM_ID,
         QUALITY_INDICATOR,DATE_FROM)
      SELECT DISTINCT -- from contracts
        cu.ext_id as COCUNUT_ID,
		@nomap as COCUNUT_NAME,
		@nomap as MAIN_CUSTOMER_ID,
		'A' as STATUS_INDICATOR,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id')as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id')as ENTITY_ID,
        @default_date_ss as SOURCE_DATE,
		@nomap as M_CUSTOMER_APPLICATION_ID,
		@nomap as M_CUSTOMER_ENTITY_ID,
		@nomap as M_CUSTOMER_SOURCE_SYSTEM_ID,
		NULL as QUALITY_INDICATOR,
        @date_to as DATE_FROM
		FROM {1}.dbo.oc_contracts co
		INNER JOIN {1}.dbo.oc_customers cu ON co.id_oc_report = cu.id_oc_report AND co.id_kupca = cu.id_kupca
		INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
		WHERE co.id_oc_report = @id_oc_report 
		AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
		AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
     
UNION
      SELECT DISTINCT -- from frames
        cu.ext_id as COCUNUT_ID,
		@nomap as COCUNUT_NAME,
		@nomap as MAIN_CUSTOMER_ID,
		'A' as STATUS_INDICATOR,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id')as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id')as ENTITY_ID,
        @default_date_ss as SOURCE_DATE,
		@nomap as M_CUSTOMER_APPLICATION_ID,
		@nomap as M_CUSTOMER_ENTITY_ID,
		@nomap as M_CUSTOMER_SOURCE_SYSTEM_ID,
		NULL as QUALITY_INDICATOR,
        @date_to as DATE_FROM
		FROM {1}.dbo.oc_frames fr
      INNER JOIN {1}.dbo.oc_customers cu ON fr.id_oc_report = cu.id_oc_report AND fr.id_kupca = cu.id_kupca
	  INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
      WHERE fr.id_oc_report = @id_oc_report 
      AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
      AND (fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to)))
	  AND fr.b2_eligible = 1
    
      
UNION
	  SELECT DISTINCT --from documentation (collaterals)
        cu.ext_id as COCUNUT_ID,
		@nomap as COCUNUT_NAME,
		@nomap as MAIN_CUSTOMER_ID,
		'A' as STATUS_INDICATOR,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id')as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id')as ENTITY_ID,
        @default_date_ss as SOURCE_DATE,
		@nomap as M_CUSTOMER_APPLICATION_ID,
		@nomap as M_CUSTOMER_ENTITY_ID,
		@nomap as M_CUSTOMER_SOURCE_SYSTEM_ID,
		NULL as QUALITY_INDICATOR,
        @date_to as DATE_FROM
	  FROM {1}.dbo.oc_contracts co
	  INNER JOIN {1}.dbo.dokument dok ON co.id_oc_report = dok.id_oc_report AND co.id_cont = dok.id_cont
	  INNER JOIN {2}.dbo.b2collat col ON dok.id_obl_zav = col.id_obl_zav
	  INNER JOIN {1}.dbo.oc_customers cu ON dok.id_oc_report = cu.id_oc_report AND dok.id_kupca = cu.id_kupca
	  INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
	  WHERE co.id_oc_report = @id_oc_report
	  AND (dok.id_hipot = col.id_hipot OR col.id_hipot = '*')
	  AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
	  AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
	  AND dok.ima = 1
    
UNION
	SELECT DISTINCT -- only Raiffeisen customer itself
        cu.ext_id as COCUNUT_ID,
		@nomap as COCUNUT_NAME,
		@nomap as MAIN_CUSTOMER_ID,
		'A' as STATUS_INDICATOR,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id')as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id')as ENTITY_ID,
        @default_date_ss as SOURCE_DATE,
		@nomap as M_CUSTOMER_APPLICATION_ID,
		@nomap as M_CUSTOMER_ENTITY_ID,
		@nomap as M_CUSTOMER_SOURCE_SYSTEM_ID,
		NULL as QUALITY_INDICATOR,
        @date_to as DATE_FROM
      FROM {1}.dbo.oc_customers cu
	  INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
      WHERE cu.id_oc_report = @id_oc_report 
	  AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
	  AND cu.id_kupca = @id_customer_dom


      --INSERT INTO ST_CUSTOMER_COCUNUT_LINK
      INSERT INTO {2}.dbo.st_customer_cocunut_link
       (CUSTOMER_ID,COCUNUT_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,
        COCUNUT_APPLICATION_ID,COCUNUT_ENTITY_ID,COCUNUT_SOURCE_SYSTEM_ID,APPLICATION_ID,SOURCE_SYSTEM_ID,
		ENTITY_ID,DATE_FROM,SOURCE_DATE,QUALITY_INDICATOR,LINK_STATUS_INDICATOR,EFFECTIVE_DATE)
      SELECT DISTINCT -- from contracts
        cu.id_kupca as CUSTOMER_ID,
        cu.ext_id as COCUNUT_ID,
        {2}.dbo.gfn_GetAnyID('customer_application_id') as CUSTOMER_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_entity_id')as CUSTOMER_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id')as CUSTOMER_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as COCUNUT_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id') as COCUNUT_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id') as COCUNUT_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('source_system_id') as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('entity_id') as ENTITY_ID,
		@default_date_ss as DATE_FROM,
		@default_date_ss as SOURCE_DATE,
		NULL as QUALITY_INDICATOR,
		'*nomap*' as LINK_STATUS_INDICATOR,
		@date_to as effective_date
	  FROM {1}.dbo.oc_contracts co
      INNER JOIN {1}.dbo.oc_customers cu ON co.id_oc_report = cu.id_oc_report AND co.id_kupca = cu.id_kupca
	  INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
      WHERE co.id_oc_report = @id_oc_report 
      AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
      AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
    

UNION

	  SELECT DISTINCT -- from frames
        cu.id_kupca as CUSTOMER_ID,
        cu.ext_id as COCUNUT_ID,
        {2}.dbo.gfn_GetAnyID('customer_application_id') as CUSTOMER_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_entity_id')as CUSTOMER_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id')as CUSTOMER_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as COCUNUT_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id') as COCUNUT_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id') as COCUNUT_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('source_system_id') as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('entity_id') as ENTITY_ID,
		@default_date_ss as DATE_FROM,
		@default_date_ss as SOURCE_DATE,
		NULL as QUALITY_INDICATOR,
		'*nomap*' as LINK_STATUS_INDICATOR,
		@date_to as effective_date
	  FROM {1}.dbo.oc_frames fr
      INNER JOIN {1}.dbo.oc_customers cu ON fr.id_oc_report = cu.id_oc_report AND fr.id_kupca = cu.id_kupca
	  INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
      WHERE fr.id_oc_report = @id_oc_report 
      AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
      AND (fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to)))
	  AND fr.b2_eligible = 1
     

UNION

	SELECT DISTINCT -- from documentation (collaterals)
        cu.id_kupca as CUSTOMER_ID,
        cu.ext_id as COCUNUT_ID,
        {2}.dbo.gfn_GetAnyID('customer_application_id') as CUSTOMER_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_entity_id')as CUSTOMER_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id')as CUSTOMER_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as COCUNUT_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id') as COCUNUT_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id') as COCUNUT_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('source_system_id') as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('entity_id') as ENTITY_ID,
		@default_date_ss as DATE_FROM,
		@default_date_ss as SOURCE_DATE,
		NULL as QUALITY_INDICATOR,
		'*nomap*' as LINK_STATUS_INDICATOR,
		@date_to as effective_date
	FROM {1}.dbo.oc_contracts co
	INNER JOIN {1}.dbo.dokument dok ON co.id_oc_report = dok.id_oc_report AND co.id_cont = dok.id_cont
	INNER JOIN {2}.dbo.b2collat col ON dok.id_obl_zav = col.id_obl_zav
    INNER JOIN {1}.dbo.oc_customers cu ON dok.id_oc_report = cu.id_oc_report AND dok.id_kupca = cu.id_kupca
	INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
    WHERE co.id_oc_report = @id_oc_report
	AND (dok.id_hipot = col.id_hipot OR col.id_hipot = '*')
    AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
    AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
	AND dok.ima = 1
    
     
UNION
	SELECT DISTINCT -- only Raiffeisen customer itself
        cu.id_kupca as CUSTOMER_ID,
        cu.ext_id as COCUNUT_ID,
        {2}.dbo.gfn_GetAnyID('customer_application_id') as CUSTOMER_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('customer_entity_id')as CUSTOMER_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('customer_source_system_id')as CUSTOMER_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_application_id') as COCUNUT_APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_entity_id') as COCUNUT_ENTITY_ID,
        {2}.dbo.gfn_GetAnyID('cocunut_source_system_id') as COCUNUT_SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('application_id') as APPLICATION_ID,
        {2}.dbo.gfn_GetAnyID('source_system_id') as SOURCE_SYSTEM_ID,
        {2}.dbo.gfn_GetAnyID('entity_id') as ENTITY_ID,
		@default_date_ss as DATE_FROM,
		@default_date_ss as SOURCE_DATE,
		NULL as QUALITY_INDICATOR,
		'*nomap*' as LINK_STATUS_INDICATOR,
		@date_to as effective_date
     FROM {1}.dbo.oc_customers cu
	 INNER JOIN (SELECT P.* 
					FROM {1}.dbo.p_eval P
					INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
								FROM {1}.dbo.p_eval
								GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
					WHERE P.id_oc_report = @id_oc_report) PE ON CU.id_kupca = PE.id_kupca AND CU.id_oc_report = PE.id_oc_report
     WHERE cu.id_oc_report = @id_oc_report 
	 AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
	 AND cu.id_kupca = @id_customer_dom

    
--END INSERT ST_CUSTOMERS
----------------------------------------------------------------------------------------------END OF COUNTERPARTY---------------------------------------------------------------------------------------------------------

print 'ID_OC_REPORT:' print @id_oc_report
--------------------------------------------------------------------------------------------FACILITIES---------------------------------------------------------------------------------------------------------------------------

declare @counterparty_id varchar(140)

DECLARE CONT_CRZ CURSOR  FOR
SELECT  c.id_cont,c.id_pog,c.id_kupca, 
case when tec.id_tec_new is null then
	case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end
else
	case when tecnew.id_val = 'KM' then 'BAM' when tecnew.id_val = 'DIN' then 'RSD' else tecnew.id_val end
end,
c.vr_val,case when tec.id_tec_new is null then c.id_tec else tec.id_tec_new end,c.nacin_leas,
IsNull(c.dat_aktiv,@default_date_row),c.ex_max_datum_dok,c.opcija,c.dat_zakl,
CASE WHEN c.dat_zakl > @date_to THEN 'A' ELSE c.status_akt END,
c.id_vrste,c.ex_g1_neto,c.ex_g1_neto_opc_nezap, c.net_nal,
nl.leas_kred,nl.tip_knjizenja, vo.id_grupe,
case when ((c.status_akt = 'Z' and c.dat_zakl <= @date_to) or c.aneks = 'T') then 0 else c.varscina end,c.ex_g1_davek_fin, c.dobrocno,
case when nl.ddv_takoj = 1 then c.ex_g1_davek - c.ex_g1_davek_fin else 0 end
FROM {1}.dbo.oc_contracts c
INNER JOIN {1}.dbo.nacini_l nl ON c.id_oc_report = nl.id_oc_report and c.nacin_leas = nl.nacin_leas
INNER JOIN {1}.dbo.vrst_opr vo ON c.id_oc_report = vo.id_oc_report and c.id_vrste = vo.id_vrste
INNER JOIN {1}.dbo.tecajnic tec ON c.id_oc_report = tec.id_oc_report and c.id_tec = tec.id_tec
LEFT JOIN {1}.dbo.tecajnic tecnew ON tec.id_oc_report = tecnew.id_oc_report and tec.id_tec_new = tecnew.id_tec
INNER JOIN (SELECT P.* 
                 FROM {1}.dbo.p_eval P
                 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                            FROM {1}.dbo.p_eval
                            GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
                 WHERE P.id_oc_report = @id_oc_report) PE ON C.id_kupca = PE.id_kupca AND C.id_oc_report = PE.id_oc_report
WHERE c.id_oc_report = @id_oc_report
AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
AND (c.status_akt = 'A' OR (c.status_akt = 'Z' AND ((month(c.dat_zakl) = month(@date_to) and year(c.dat_zakl) = year(@date_to)) OR c.dat_zakl > @date_to)))

declare @id_cont int, @id_pog varchar(140), @id_kupca varchar(140), @id_val varchar(30), @id_tec char(3), @vr_val decimal(21,4), @net_nal decimal(18,2),
@nacin_leas varchar(140), @dat_aktiv datetime, @ex_max_datum_dok datetime, @opcija decimal(18,2), @varscina decimal(18,2), @ex_g1_neto decimal(18,2),
@ex_g1_neto_opc_nezap decimal(18,2), @provision_amount decimal(21,4), @ex_g1_davek_fin decimal(21,4), 
@dobrocno bit, @leas_kred char(1), @tip_knjizenja char(1), @min_dat_zap datetime, @dat_zakl datetime, @status_akt char(1),
@id_vrste char(4), @id_grupe char(3), @ex_g1_davek decimal(18,2)

declare @financni_leasing bit, @ol_na_nacin_fl bit, @leasing_type char(2)
declare @product_type_id varchar(140), @product_subtype_id varchar(140), @group_product_type_id varchar(30)
declare @counterparty_indicator varchar(7)

declare @current_principal decimal(21,4), @leasing_npv_amount decimal(21,4), @leasing_residual_amount decimal(21,4), @total_odr decimal(18,2),
		@future_capital_total decimal(18,2), @neto_not_booked decimal(18,2), @neto_not_dued decimal(18,2), @buyout_not_booked decimal(18,2), 
		@other_not_dued decimal(18,2), @fin_dav_not_booked decimal(18,2), @fin_dav_not_dued decimal(18,2), @max_due_days int

OPEN CONT_CRZ

FETCH NEXT FROM CONT_CRZ INTO @id_cont,@id_pog,@id_kupca,@id_val,@vr_val,@id_tec,
                              @nacin_leas,@dat_aktiv,@ex_max_datum_dok,@opcija,@dat_zakl,@status_akt,@id_vrste,@ex_g1_neto,@ex_g1_neto_opc_nezap, @net_nal,
                              @leas_kred,@tip_knjizenja,@id_grupe,@varscina,@ex_g1_davek_fin,@dobrocno,@ex_g1_davek
WHILE @@FETCH_STATUS = 0
BEGIN
    -- if @financni_leasing = 1 then gre za pravi financni lizing, ali za operativni leas, ki se obravnava kot financni lizing
    -- if @financni_leasing = 0 then gre za pravi operativni leasing
    -- @ol_na_nacin_fl = 1 - operativni leas, ki se obravnava kot financni lizing
    

    -- operative leasing reported as finance leasing
    set @ol_na_nacin_fl = (select case when @company_id = 'RLHR' then
											case when (@tip_knjizenja = 1 and @dat_aktiv < '20050101') then 1 else 0 end      
                                       when @company_id = 'RLSI' then
                                            case when @tip_knjizenja = 1 and @nacin_leas NOT IN ('ON') then 1 else 0 end
									   when @company_id = 'RRRS' then
                                            case when @tip_knjizenja = 1 and @nacin_leas NOT IN ('OX') then 1 else 0 end
                                       else -- RLRS,  RLBH
                                            case when @tip_knjizenja = 1 then 1 else 0 end
                                  end)
    -- finance leasing (real finance leasing and operative leasing reported as finance leasing
    set @financni_leasing = (select case when @company_id = 'RLHR' then
											case when (@tip_knjizenja = 1 and @dat_aktiv >= '20050101') then 0 else 1 end
                                         when @company_id = 'RLSI' then
											case when @tip_knjizenja = 1 AND @nacin_leas IN ('ON') then 0 else 1 end
										 when @company_id = 'RRRS' then
											case when @tip_knjizenja = 1 AND @nacin_leas IN ('OX') then 0 else 1 end
                                         else 1
                                    end)
    IF @leas_kred = 'K' BEGIN
      SET @leasing_type = 'LO'
    END ELSE BEGIN
      IF @financni_leasing = 1 BEGIN SET @leasing_type = 'FL' END
      ELSE BEGIN SET @leasing_type = 'OL' END
    END
	
	SET @product_type_id = @leasing_type + '-' + @id_grupe
	SET @product_subtype_id = @nacin_leas + '-' + @id_vrste
	SET @group_product_type_id = {2}.dbo.gfn_GetOpprodGpc(@leasing_type, @id_vrste, @nacin_leas, @company_id)

	IF @group_product_type_id IS NULL
	BEGIN
        set @err_msg = 'B2OPPROD MAPPING ERROR FOR leasing type: {0}, id_vrste: {1}. GPC CODE NOT FOUND!'
        set @err_msg = (select replace(@err_msg, '{0}', @leasing_type))
        set @err_msg = (select replace(@err_msg, '{1}', @id_vrste))
		print @err_msg
		RAISERROR(@err_msg, 16, 1)
    END
	
    --insert into ST_PRODUCT_TYPE_SUBTYPE
    IF(NOT EXISTS (SELECT product_type_id, product_subtype_id
               FROM {2}.dbo.st_product_type_subtype
               WHERE product_type_id = @product_type_id
               AND product_subtype_id = @product_subtype_id))
    BEGIN
      INSERT INTO {2}.dbo.st_product_type_subtype
      (product_type_id,product_subtype_id, PRODUCT_TYPE_SUBTYPE_DESCR, group_product_type_id,
	   GROUP_PRODUCT_TYPE_DESCRIPTION, PRODUCT_TYPE_BASLE2_ID, PRODUCT_TYPE_B2_DESCR, ON_BALANCE_INDICATOR,
	   LETTER_OF_CREDIT_INDICATOR, NOTE_ISSUANCE_INDICATOR, REVOLVE_UNDERWRITE_INDICATOR, 
       application_id,source_system_id,entity_id, 
	   SOURCE_DATE, TRANSACTION_TYPE_ID, TXN_TYPE_APPLICATION_ID, TXN_TYPE_SOURCE_SYSTEM_ID, TXN_TYPE_ENTITY_ID,
	   status_indicator, QUALITY_INDICATOR, date_from)
      VALUES 
      (@product_type_id, @product_subtype_id, @nomap, @group_product_type_id,
	   @nomap, @nomap, @nomap, @nomap,
	   @nomap, @nomap, @nomap,
       {2}.dbo.gfn_GetAnyID('application_id'), {2}.dbo.gfn_GetAnyID('source_system_id'), {2}.dbo.gfn_GetAnyID('entity_id'),
	   @default_date_ss, @nomap, @nomap, @nomap, @nomap,
	   'A', NULL, @date_to)
    END
	
	set @provision_amount = 0
    set @provision_amount = IsNull((SELECT sum({1}.dbo.gfn_Xchange(@id_tec,lsk.kredit_val - lsk.debit_val,lsk.id_tec,@date_to,@id_oc_report))
									FROM {1}.dbo.oc_lsk lsk
									WHERE lsk.id_oc_report = @id_oc_report
									AND lsk.id_cont = @id_cont
									AND lsk.konto IN (SELECT pa.konto FROM {2}.dbo.b2provision_accounts pa)), 0)

	IF(@leas_kred = 'K') 
			SET @counterparty_indicator = 'L'
	ELSE BEGIN
		IF @financni_leasing = 1
			SET @counterparty_indicator = 'LS'
		ELSE
			SET @counterparty_indicator = 'AC'
	END

    --get min(dat_zap) for certain report(id_oc_report) and certain contract(id_contract)
    SET @min_dat_zap = (SELECT MIN(dat_zap) FROM {1}.dbo.oc_claims 
	                    WHERE id_oc_report = @id_oc_report AND id_cont = @id_cont)

	set @total_odr = 0 set @neto_not_booked = 0 set @neto_not_dued = 0 set @other_not_dued = 0 set @fin_dav_not_booked = 0 set @fin_dav_not_dued = 0
	set @max_due_days = 0
	set @future_capital_total = 0 set @leasing_npv_amount = 0 set @current_principal = 0 set @leasing_residual_amount = 0
			
	SELECT  @total_odr = IsNull(SUM(case when evident='*' and ex_dni_zamude >= 0
                                          then {1}.dbo.gfn_Xchange(@id_tec, ex_saldo_val_claim, cl.id_tec, @date_to, @id_oc_report)
                                          else 0 end), 0),
			@neto_not_booked = IsNull(SUM(case when cl.evident='' and vt.sif_terj in ('LOBR','OPC','POLO','VARS')
											then ({1}.dbo.gfn_Xchange(@id_tec, (cl.ex_debit_val_claim * cl.neto / cl.debit), cl.id_tec, @date_to, @id_oc_report))
										   else 0 end), 0),
            @neto_not_dued = IsNull(SUM(case when cl.evident='*' and cl.ex_dni_zamude<0 and vt.sif_terj in ('LOBR','OPC','POLO','VARS')
											then ({1}.dbo.gfn_Xchange(@id_tec, (cl.ex_debit_val_claim  * cl.neto / cl.debit), cl.id_tec, @date_to, @id_oc_report))
										 else 0 end), 0),									 
			@other_not_dued = IsNull(SUM(case when cl.evident='*' and cl.ex_dni_zamude<0 and vt.sif_terj not in ('LOBR','OPC','POLO','VARS')
											then IsNull({1}.dbo.gfn_Xchange(@id_tec, cl.ex_debit_val_claim, cl.id_tec, @date_to, @id_oc_report), 0)
										 else 0 end), 0),
			@fin_dav_not_booked = IsNull(SUM(case when cl.evident='' and vt.sif_terj in ('LOBR','OPC','POLO','VARS') and @dobrocno = 1
											then {1}.dbo.gfn_Xchange(@id_tec, (cl.ex_debit_val_claim * cl.davek / cl.debit), cl.id_tec, @date_to, @id_oc_report)
									  else 0 end), 0),
			@fin_dav_not_dued = IsNull(SUM(case when cl.evident='*' and cl.ex_dni_zamude<0 and vt.sif_terj in ('LOBR','OPC','POLO','VARS') and @dobrocno = 1
										then {1}.dbo.gfn_Xchange(@id_tec, (cl.ex_debit_val_claim * cl.davek / cl.debit), cl.id_tec, @date_to, @id_oc_report)
									else 0 end), 0),
			@max_due_days = max(cl.ex_dni_zamude)
  
    FROM {1}.dbo.oc_claims cl
    INNER JOIN {1}.dbo.vrst_ter vt ON cl.id_terj = vt.id_terj and cl.id_oc_report = vt.id_oc_report
    WHERE cl.id_oc_report = @id_oc_report AND cl.id_cont = @id_cont
    GROUP BY cl.id_cont,cl.id_oc_report

    set @future_capital_total = @ex_g1_neto + IsNull(@neto_not_booked,0) + Isnull(@neto_not_dued,0) + IsNull(@other_not_dued, 0) + @ex_g1_davek_fin + IsNull(@fin_dav_not_booked, 0) + IsNull(@fin_dav_not_dued, 0) + @ex_g1_davek
	set @leasing_residual_amount = @ex_g1_neto_opc_nezap
    
  
	
---------------------------------------------------------------------------------------------------REAL OPERATIVE LEASING------------------------------------------------------------------------------------------------
--TABLES: ST_ACCOUNT, ST_ACCOUNT_BALANCE, ST_CUSTOMER_COUNTERPARTY_ROLE
    IF @leas_kred = 'L' AND @financni_leasing = 0 BEGIN 
        INSERT INTO {2}.dbo.ST_ACCOUNT
       (ACCOUNT_ID,RETAIL_ACCOUNT_NO,NOSTRO_ACCOUNT_ID,COUNTERPARTY_NAME,CUSTOMER_ID,CATEGORY_ID,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,
	PRODUCT_TYPE_BASLE2_ID,GROUP_ACCOUNT_TYPE_ID,PRINCIPAL_CURRENCY_ISO_CODE,SEQUENCE_NUMBER,STATUS_BLOCKED,STATUS_RISK,ACCOUNT_OFFICER_ID,
	ACCOUNT_OFFICER_NAME,BRANCH_CODE,BRANCH_NAME,DATE_OPENED,DATE_CLOSED,CR_INTEREST_ID,CR_DEBIT_CREDIT_INDICATOR,DR_INTEREST_ID,
	DR_DEBIT_CREDIT_INDICATOR,DR_INTEREST_LIQU_ACCT,CR_INTEREST_LIQU_ACCT,DR_INT_CAP_FREQUENCY,CR_INT_CAP_FREQUENCY,CR_INT_CAP_DAY,
	DR_INT_CAP_DAY,STATEMENT_DAY,STATEMENT_FREQUENCY,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,DISTRIBUTION_CHANNEL_ID,
	DISTRIBUTION_CHANNEL_DESCR,OVERDRAFT_AMOUNT,OVERDRAFT_START_DATE,OVERDRAFT_MATURITY_DATE,OVERDRAFT_REVIEW_DATE,INPUT_USER_ID,
	AUTH_USER_ID,PRIMARY_ACCOUNT_INDICATOR,PRIMARY_ACCOUNT_NUMBER,EMPLOYEE_INDICATOR,BOOK_CODE,ACCRUAL_METHOD,ACCRUAL_AMOUNT_METHOD,
	ACCRUAL_FREQUENCY,CLASSIFICATION_ID,NETTING_INDICATOR,SECURED_INDICATOR,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,
	ENTITY_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,
	CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,
	PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,
	GL_DR_ACCOUNT_ID,GL_DR_ACCOUNT_APPLICATION_ID,GL_DR_ACCOUNT_SOURCE_SYSTEM_ID,GL_DR_ACCOUNT_ENTITY_ID,GL_CR_ACCOUNT_ID,GL_CR_ACCOUNT_APPLICATION_ID,
	GL_CR_ACCOUNT_ENTITY_ID,GL_CR_ACCOUNT_SOURCE_SYSTEM_ID,CR_INT_APPLICATION_ID,CR_INT_SOURCE_SYSTEM_ID,CR_INT_ENTITY_ID,DR_INT_APPLICATION_ID,
	DR_INT_SOURCE_SYSTEM_ID,DR_INT_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,INP_USER_APPLICATION_ID,
	INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,NOSTRO_ACCT_APPLICATION_ID,NOSTRO_ACCT_SOURCE_SYSTEM_ID,NOSTRO_ACCT_ENTITY_ID,NETTING_AGREEMENT_ID,
	NETTING_AGMNT_APPLICATION_ID,NETTING_AGMNT_ENTITY_ID,NETTING_AGMNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_SECTION_ID,GL_ACCT_SECN_APPLICATION_ID,
	GL_ACCT_SECN_ENTITY_ID,GL_ACCT_SECN_SOURCE_SYSTEM_ID,GL_ACCT_INT_INC_ID,GL_ACCT_I_INC_APPLICATION_ID,GL_ACCT_I_INC_ENTITY_ID,
	GL_ACCT_I_INC_SOURCE_SYSTEM_ID,GL_ACCT_INT_EXP_ID,GL_ACCT_I_EXP_APPLICATION_ID,GL_ACCT_I_EXP_ENTITY_ID,GL_ACCT_I_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_EXP_ID,
	GL_ACCT_P_EXP_APPLICATION_ID,GL_ACCT_P_EXP_ENTITY_ID,GL_ACCT_P_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_INC_ID,GL_ACCT_P_INC_SOURCE_SYSTEM_ID,
	GL_ACCT_P_INC_ENTITY_ID,GL_ACCT_P_INC_APPLICATION_ID,GL_ACCT_WRITE_OFF_INC_ID,GL_WRFF_INC_APPLICATION_ID,GL_WRFF_INC_ENTITY_ID,
	GL_WRFF_INC_SOURCE_SYSTEM_ID,GL_ACCT_WRITE_OFF_EXP_ID,GL_WRFF_EXP_APPLICATION_ID,GL_WRFF_EXP_ENTITY_ID,GL_WRFF_EXP_SOURCE_SYSTEM_ID,
	SUSPENSE_INDICATOR,TRANSFER_RATE_SRC_INDICATOR,ORGANISATION_UNIT_ID,ORG_UNIT_APPLICATION_ID,ORG_UNIT_ENTITY_ID,ORG_UNIT_SOURCE_SYSTEM_ID,
	SOURCE_DATE,WRITE_OFF_AMOUNT,PROVISION_AMOUNT,PROVISION_ACCOUNT_ID,PROV_ACCT_APPLICATION_ID,PROV_ACCT_ENTITY_ID,PROV_ACCT_SOURCE_SYSTEM_ID,
	DATE_SINCE_PAST_DUE,COUNTRY_OF_RISK_ISO_CODE,FUNDING_CURRENCY_ISO_CODE,DEFAULT_INDICATOR,DEFAULT_CONTAGION_INDICATOR,DEAL_BOOK_ID,
	EXTERNAL_INDICATOR,STRUCTURED_CONTRACT,LOCATION_NAME,SCORING_POOL_ID,SCR_POOL_APPLICATION_ID,SCR_POOL_ENTITY_ID,SCR_POOL_SOURCE_SYSTEM_ID,
	COLLECTION_STATUS_INDICATOR,RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,QUALITY_INDICATOR,PROVISION_CURRENCY_ISO_CODE,WRITE_OFF_CURRENCY_ISO_CODE,
	OVERDRAFT_CURRENCY_ISO_CODE,OFSA_PRODUCT_CODE,COMMITMENT_INDICATOR,DATE_FROM
	)
	VALUES (@id_pog,@nomap,@nomap,@nomap,@id_kupca,@nomap,@product_type_id,@product_subtype_id,@nomap,'C',
		@id_val,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,IsNull(@dat_aktiv, @default_date_row),IsNull(@ex_max_datum_dok, @default_date_row),@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,@default_date_ss,
		@default_date_ss,@default_date_ss,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		'N',@nomap,case @status_akt when 'A' then 'A' when 'Z' then 'I' end,{2}.dbo.gfn_GetAnyID('application_id'),
		{2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,{2}.dbo.gfn_GetAnyID('customer_application_id'),
		{2}.dbo.gfn_GetAnyID('customer_entity_id'),{2}.dbo.gfn_GetAnyID('customer_source_system_id'),
		{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),{2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),
		{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@default_date_ss,NULL,
		case when @max_due_days >= 90 then @provision_amount else 0 end,
		@nomap,@nomap,@nomap,@nomap,IsNull(@min_dat_zap, @default_date_row),@drzava,@id_val,@nomap,@nomap,
		@company_id + '_B','*nomap*','*nomap*',@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,NULL,@id_val,@nomap,@nomap,@nomap,@nomap,@date_to)
      
      --account balance
      INSERT INTO {2}.dbo.ST_ACCOUNT_BALANCE
       (ACCOUNT_ID,CUSTOMER_ID,LAST_MOVEMENT_DATE,LAST_STATEMENT_DATE,CLEARED_BALANCE,PROFIT_CENTRE_CODE,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,
	CATEGORY_ID,BRANCH_CODE,COST_CENTRE_CODE,ACCOUNT_OFFICER_ID,AVAILABLE_BALANCE,GL_BALANCE,OVERDUE_AMOUNT,NO_OF_DAYS_OVERDUE,
	TURNOVER_CREDIT,TURNOVER_DEBIT,TOTAL_HELD_ITEMS,ACCOUNT_APPLICATION_ID,ACCOUNT_ENTITY_ID,ACCOUNT_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,
	ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,CATEGORY_APPLICATION_ID,
	CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,COST_CNT_APPLICATION_ID,COST_CNT_ENTITY_ID,COST_CNT_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,
	CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,
	PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,RWA_BALANCE,RWA_1_ON_BALANCE,RWA_2_ON_BALANCE,APPLICATION_ID,ENTITY_ID,SOURCE_SYSTEM_ID,
	DATE_FROM,SOURCE_DATE,QUALITY_INDICATOR,RWA_1_OFF_BALANCE,RWA_2_OFF_BALANCE,PRINCIPAL_CURRENCY_ISO_CODE,AVAILABLE_BALANCE_CURR_CODE,
	CLEARED_BALANCE_CURRENCY_CODE,GL_BALANCE_CURRENCY_ISO_CODE,DEPOSIT_INSURANCE,STANDARD_RISK_COSTS,EFFECTIVE_DATE
       )
       VALUES  (@id_pog,@id_kupca,@default_date_ss,@default_date_ss,-(@total_odr + @other_not_dued),@nomap,@product_type_id,@product_subtype_id,
		@nomap,@nomap,@nomap,@nomap,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2}.dbo.gfn_GetAnyID('account_application_id'),
		{2}.dbo.gfn_GetAnyID('account_entity_id'),{2}.dbo.gfn_GetAnyID('account_source_system_id'),@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		{2}.dbo.gfn_GetAnyID('customer_application_id'),{2}.dbo.gfn_GetAnyID('customer_entity_id'),
		{2}.dbo.gfn_GetAnyID('customer_source_system_id'),{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),
		{2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),
		@nomap,@nomap,@nomap,NULL,NULL,NULL,{2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('entity_id'),
		{2}.dbo.gfn_GetAnyID('source_system_id'),@default_date_ss,@default_date_ss,NULL,NULL,NULL,@nomap,@nomap,
		@id_val,@nomap,NULL,NULL,@date_to)
      
    END --end of real operative leasing
    
    ELSE BEGIN --if not real operative leasing (financial, operative threated as financial, loans)	
-------------------------------------------------------------FINANCIAL LEASING AND OPERATIVE LEASING THREATED AS FINANCIAL--------------------------------------------------------------------------------------------------------------------------------
--TABLES: ST_LEASING, ST_CONTRACT_BALANCE, ST_CUSTOMER_COUNTERPARTY_ROLE
    --if financial leasing or operative leasing threated as financial
    IF @leas_kred = 'L' AND @financni_leasing = 1 BEGIN
		  
		  /*Both values (LEASING_NPV_AMOUNT and LEASING_RESIDUAL_AMOUNT) differs according to the value in RISK_INDICATOR field:
		         In case RISK_INDICATOR is equal to 1, in field LEASING_NPV_AMOUNT we should report outstanding + residual value amount in field LEASING_RESIDUAL_AMOUNT we should report 0.
	                  In case RISK_INDICATOR is equal to 0, in field LEASING_NPV_AMOUNT we should report outstanding without residual value amount in field LEASING_RESIDUAL_AMOUNT we should report residual value amount.
		  */
		  -- RISK_INDICATOR = 0
		  IF @ol_na_nacin_fl = 1 BEGIN
			SET @leasing_npv_amount = @total_odr + @future_capital_total - @leasing_residual_amount + @varscina
			SET @leasing_residual_amount = @leasing_residual_amount
		  END ELSE
		  -- RISK_INDICATOR = 1
		  IF @ol_na_nacin_fl = 0 BEGIN
			SET @leasing_npv_amount = @total_odr + @future_capital_total 
			SET @leasing_residual_amount = 0
		  
		  END
		  

      INSERT INTO {2}.dbo.[st_leasing]
       (CONTRACT_ID,COUNTERPARTY_NAME,CUSTOMER_ID,CUSTOMER_NAME,PRINCIPAL_CURRENCY_ISO_CODE,ORIGINAL_PRINCIPAL_AMOUNT,
	CONTRACT_TERM,CATEGORY_ID,CATEGORY_DESCRIPTION,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,PRODUCT_TYPE_BASLE2_ID,
	OFSA_PRODUCT_CODE,DEAL_DATE,VALUE_DATE,MATURITY_DATE,CONTRACT_INTEREST_ID,ACCRUAL_METHOD,ACCRUAL_FREQUENCY,
	VALUE_CLAUSE_INDICATOR,BRANCH_CODE,BRANCH_NAME,ACCOUNT_OFFICER_ID,ACCOUNT_OFFICER_NAME,DISTRIBUTION_CHANNEL_ID,
	PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,COUNTRY_OF_RISK_ISO_CODE,INPUT_USER_ID,AUTH_USER_ID,LEASING_TYPE_ID,
	LEASED_OBJECT_TYPE,LEASED_OBJECT_DESCRIPTION,LEASED_OBJECT_PRICE,RISK_INDICATOR,AMORTISATION_TYPE,
	REVOCABLE_INDICATOR,LEASING_DEPOT_AMOUNT,LEASING_PAYMENT_AMOUNT,REPAYMENT_FREQUENCY,FINAL_PAYMENT_DATE,
	PAYMENT_METHOD_BASLE2,ACCOUNT_DEBTOR,SECURED_INDICATOR,DEBIT_CREDIT_INDICATOR,DISCOUNT_AMOUNT,STATUS_INDICATOR,
	APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,
	CUSTOMER_SOURCE_SYSTEM_ID,CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,
	BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,
	PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_ID,GL_ACCOUNT_APPLICATION_ID,
	GL_ACCOUNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_ENTITY_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,
	INP_USER_APPLICATION_ID,INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,
	AUTH_USER_ENTITY_ID,CNTR_INT_APPLICATION_ID,CNTR_INT_SOURCE_SYSTEM_ID,CNTR_INT_ENTITY_ID,GL_ACCT_INT_INC_EXP_ID,
	GL_ACCT_II_XP_APPLICATION_ID,GL_ACCT_II_XP_ENTITY_ID,GL_ACCT_II_XP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_EXP_ID,
	GL_ACCT_P_EXP_APPLICATION_ID,GL_ACCT_P_EXP_ENTITY_ID,GL_ACCT_P_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_INC_ID,
	GL_ACCT_P_INC_APPLICATION_ID,GL_ACCT_P_INC_ENTITY_ID,GL_ACCT_P_INC_SOURCE_SYSTEM_ID,GL_ACCT_WRITE_OFF_INC_EXP_ID,
	GL_ACCT_WOIXP_APPLICATION_ID,GL_ACCT_WOIXP_ENTITY_ID,GL_ACCT_WOIXP_SOURCE_SYSTEM_ID,CLOSE_DATE,
	TRANSFER_RATE_SRC_INDICATOR,LINKED_CONTRACT_ID,LINKED_CTR_APPLICATION_ID,LINKED_CTR_ENTITY_ID,LINKED_CTR_SOURCE_SYSTEM_ID,
	ORGANISATION_UNIT_ID,ORG_UNIT_APPLICATION_ID,ORG_UNIT_SOURCE_SYSTEM_ID,ORG_UNIT_ENTITY_ID,ORIGINAL_BORROWER_ID,
	ORIG_BORROWER_APPLICATION_ID,ORIG_BORROWER_ENTITY_ID,ORIG_BORROWER_SOURCE_SYSTEM_ID,ORIGINAL_BORROWER_NAME,
	QUALITY_INDICATOR,CANCELABLE_INDICATOR,WRITE_OFF_AMOUNT,PROVISION_AMOUNT,PROVISION_ACCOUNT_ID,PROV_ACCT_APPLICATION_ID,
	PROV_ACCT_ENTITY_ID,PROV_ACCT_SOURCE_SYSTEM_ID,DATE_SINCE_PAST_DUE,NETTING_INDICATOR,FUNDING_CURRENCY_ISO_CODE,
	DEFAULT_INDICATOR,DEFAULT_CONTAGION_INDICATOR,DEAL_BOOK_ID,EXTERNAL_INDICATOR,STRUCTURED_CONTRACT,LOCATION_NAME,
	SCORING_POOL_ID,SCR_POOL_APPLICATION_ID,SCR_POOL_ENTITY_ID,SCR_POOL_SOURCE_SYSTEM_ID,COLLECTION_STATUS_INDICATOR,
	RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,DISCOUNT_CURRENCY_ISO_CODE,PROVISION_CURRENCY_ISO_CODE,
	WRITE_OFF_CURRENCY_ISO_CODE,DATE_FROM)
      VALUES(@id_pog,@nomap,@id_kupca,@nomap,@id_val,@net_nal,@nomap,@nomap,@nomap,@product_type_id,@product_subtype_id,
	     @nomap,@nomap,@default_date_ss,@dat_aktiv,@ex_max_datum_dok,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
             @nomap,@nomap,@nomap,@nomap,@nomap,@drzava,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,
             /*case @ol_na_nacin_fl when 1 then 0 else 1 end*/1,@nomap,@nomap,NULL,NULL,@nomap,@default_date_ss,@nomap,
             @nomap,@nomap,@nomap,NULL,
             case @status_akt when 'A' then 'A' when 'Z' then 'I' end,{2}.dbo.gfn_GetAnyID('application_id'),
             {2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),@default_date_ss,
             {2}.dbo.gfn_GetAnyID('customer_application_id'),{2}.dbo.gfn_GetAnyID('customer_entity_id'),
             {2}.dbo.gfn_GetAnyID('customer_source_system_id'),@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
             @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),
             {2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),@nomap,@nomap,
             @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
             @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@default_date_ss,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
             @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,@nomap,NULL,
			 case when @max_due_days >= 90 then @provision_amount else 0 end,
			 @nomap,@nomap,@nomap,@nomap,
             @min_dat_zap,'N',@id_val,@nomap,@nomap,
			 @company_id + '_B','*n.a.*', null,@nomap,
             @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@id_val,@nomap,@date_to)
    END -- end of financial and operative as financial
	
		
-------------------------------------------------------------------------------------------------------LOANS-----------------------------------------------------------------------------------------------------------------------
--TABLES: ST_CUSTOMER_LOAN, ST_CONTRACT_BALANCE, ST_CONTRACT_ACCRUALS, ST_CUSTOMER_COUNTERPARTY_ROLE
    ELSE BEGIN

		set @current_principal = @total_odr + @future_capital_total
		set @leasing_npv_amount = 0
		set @leasing_residual_amount = 0
      --insert into ST_CUSTOMER_LOAN
	  INSERT INTO {2}.dbo.[st_customer_loan]
       (CONTRACT_ID,CUSTOMER_ID,CUSTOMER_NAME,PRINCIPAL_CURRENCY_ISO_CODE,ORIGINAL_PRINCIPAL_AMOUNT,CONTRACT_TERM,
	CATEGORY_ID,CATEGORY_DESCRIPTION,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,PRODUCT_TYPE_BASLE2_ID,OFSA_PRODUCT_CODE,
	DEAL_DATE,VALUE_DATE,MATURITY_DATE,CONTRACT_INTEREST_ID,VALUE_CLAUSE_INDICATOR,BRANCH_CODE,BRANCH_NAME,
	ACCOUNT_OFFICER_ID,ACCOUNT_OFFICER_NAME,DISTRIBUTION_CHANNEL_ID,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,
	INPUT_USER_ID,AUTH_USER_ID,CUSTOMER_LOAN_REPAY_TYPE_ID,CUSTOMER_LOAN_REPAY_TYPE_DESCR,INTEREST_PAYMENT_METHOD,
	ANNUITY_PAYMENT_METHOD,REPAY_FREQUENCY_CAPITAL,REPAY_FREQUENCY_INTEREST,DRAWDOWN_ACCOUNT_ID,PRINCIPAL_LIQUIDATION_ACCT_ID,
	BENEFICIARY_BANK,BENEFICIARY_ADDRESS,BENEFICIARY_ACCOUNT,CUSTOMER_LOAN_NARRATIVE,THIRD_PARTY_REFERENCE,
	GRACE_PERIOD_INTEREST,GRACE_PERIOD_PRINCIPAL,COUNTRY_OF_RISK_ISO_CODE,ACCRUAL_METHOD,ACCRUAL_FREQUENCY,SECURED_INDICATOR,
	NOTICE_DAYS,DISCOUNT_AMOUNT,LOAN_PURPOSE,ROLLOVER_CONTRACT_ID,RO_COUNTERPARTY_INDICATOR,GL_ACCOUNT_ID,MORATORY_INDICATOR,
	MORATORY_TYPE_ID,MORATORY_INTEREST_INDICATOR,MORATORY_START_DATE,MORATORY_END_DATE,STATUS_INDICATOR,DEBIT_CREDIT_INDICATOR,
	APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,
	CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,
	BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,
	PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,CL_RP_TP_APPLICATION_ID,CL_RP_TP_ENTITY_ID,CL_RP_TP_SOURCE_SYSTEM_ID,
	GL_ACCOUNT_APPLICATION_ID,GL_ACCOUNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_ENTITY_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,
	PROD_TP_SOURCE_SYSTEM_ID,MORAT_TP_APPLICATION_ID,MORAT_TP_SOURCE_SYSTEM_ID,MORAT_TP_ENTITY_ID,INP_USER_APPLICATION_ID,
	INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,
	CNTR_INT_APPLICATION_ID,CNTR_INT_SOURCE_SYSTEM_ID,CNTR_INT_ENTITY_ID,RO_CONTRACT_APPLICATION_ID,RO_CONTRACT_SOURCE_SYSTEM_ID,
	RO_CONTRACT_ENTITY_ID,SYNDICATION_INDICATOR,BAD_LOAN_INDICATOR,GL_ACCT_INT_INC_EXP_ID,GL_ACCT_II_XP_APPLICATION_ID,
	GL_ACCT_II_XP_ENTITY_ID,GL_ACCT_II_XP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_EXP_ID,GL_ACCT_P_EXP_APPLICATION_ID,
	GL_ACCT_P_EXP_ENTITY_ID,GL_ACCT_P_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_INC_ID,GL_ACCT_P_INC_APPLICATION_ID,GL_ACCT_P_INC_ENTITY_ID,
	GL_ACCT_P_INC_SOURCE_SYSTEM_ID,GL_ACCT_WRITE_OFF_INC_EXP_ID,GL_ACCT_WOIXP_APPLICATION_ID,GL_ACCT_WOIXP_ENTITY_ID,
	GL_ACCT_WOIXP_SOURCE_SYSTEM_ID,CLOSE_DATE,TRANSFER_RATE_SRC_INDICATOR,LINKED_CONTRACT_ID,LINKED_CTR_APPLICATION_ID,LINKED_CTR_ENTITY_ID,
	LINKED_CTR_SOURCE_SYSTEM_ID,ORGANISATION_UNIT_ID,ORG_UNIT_APPLICATION_ID,ORG_UNIT_SOURCE_SYSTEM_ID,ORG_UNIT_ENTITY_ID,
	ORIGINAL_BORROWER_ID,ORIG_BORROWER_APPLICATION_ID,ORIG_BORROWER_ENTITY_ID,ORIG_BORROWER_SOURCE_SYSTEM_ID,ORIGINAL_BORROWER_NAME,
	COUNTERPARTY_NAME,CANCELABLE_INDICATOR,SENIORITY_INDICATOR,WRITE_OFF_AMOUNT,PROVISION_AMOUNT,PROVISION_ACCOUNT_ID,
	PROV_ACCT_APPLICATION_ID,PROV_ACCT_ENTITY_ID,PROV_ACCT_SOURCE_SYSTEM_ID,DATE_SINCE_PAST_DUE,NETTING_INDICATOR,
	FUNDING_CURRENCY_ISO_CODE,DEFAULT_INDICATOR,DEFAULT_CONTAGION_INDICATOR,DEAL_BOOK_ID,EXTERNAL_INDICATOR,STRUCTURED_CONTRACT,
	LOCATION_NAME,SCORING_POOL_ID,SCR_POOL_APPLICATION_ID,SCR_POOL_ENTITY_ID,SCR_POOL_SOURCE_SYSTEM_ID,COLLECTION_STATUS_INDICATOR,
	RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,QUALITY_INDICATOR,DISCOUNT_CURRENCY_ISO_CODE,PROVISION_CURRENCY_ISO_CODE,
	WRITE_OFF_CURRENCY_ISO_CODE,DATE_FROM)
      VALUES(@id_pog,@id_kupca,@nomap,@id_val,@vr_val,@nomap,@nomap,@nomap,@product_type_id,@product_subtype_id,@nomap,@nomap,
	     @default_date_ss,@dat_aktiv,@ex_max_datum_dok,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
	     @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,
	     NULL,@drzava,@nomap,@nomap,@nomap,NULL,NULL,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@default_date_ss,
	     @default_date_ss,case @status_akt when 'A' then 'A' when 'Z' then 'I' end,@nomap,{2}.dbo.gfn_GetAnyID('application_id'),
	     {2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),@default_date_ss,
	     {2}.dbo.gfn_GetAnyID('customer_application_id'),{2}.dbo.gfn_GetAnyID('customer_entity_id'),
	     {2}.dbo.gfn_GetAnyID('customer_source_system_id'),@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
	     @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),
	     {2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),@nomap,@nomap,@nomap,
	     @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
	     @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@default_date_ss,
	     @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,'1',
	     NULL,case when @max_due_days >= 90 then @provision_amount else 0 end,
		 @nomap,@nomap,@nomap,@nomap,@min_dat_zap,'N',@id_val,@nomap,@nomap,
	     @company_id + '_B','*nomap*','*nomap*',@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
	     NULL,@nomap,@id_val,@nomap,@date_to)

      --insert into ST_CONTRACT_ACCRUALS
    
      INSERT INTO {2}.dbo.[st_contract_accruals]
	 (CONTRACT_ID,COUNTERPARTY_INDICATOR,CUSTOMER_ID,START_DATE,PROFIT_CENTRE_CODE,ROLLOVER_DATE,PRODUCT_TYPE_ID,
	  PRODUCT_SUBTYPE_ID,CATEGORY_ID,LAST_RATE_CHANGE_DATE,NEXT_RATE_CHANGE_DATE,LAST_INTEREST_PAY_DATE,
	  NEXT_INTEREST_PAY_DATE,BRANCH_CODE,ACCOUNT_OFFICER_ID,TOTAL_ACCRUAL_AMOUNT,APPLICATION_ID,SOURCE_SYSTEM_ID,
	  ENTITY_ID,DATE_FROM,SOURCE_DATE,PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,CATEGORY_APPLICATION_ID,
	  CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,
	  ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,
	  PROD_TP_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,CONTRACT_APPLICATION_ID,
	  CONTRACT_SOURCE_SYSTEM_ID,CONTRACT_ENTITY_ID,SPREAD_RATE_1,SPREAD_RATE_2,INTEREST_RATE,MIS_REFERENCE_RATE,
	  EFFECTIVE_RATE,BASE_RATE,PRODUCT_RATE,QUALITY_INDICATOR,TOTAL_ACCRUAL_CURRENCY_CODE,EFFECTIVE_DATE)
      VALUES(@id_pog,@counterparty_indicator,@id_kupca,@default_date_ss,@nomap,@default_date_ss,@product_type_id,@product_subtype_id,@nomap,
	     @default_date_ss,@default_date_ss,@default_date_ss,@default_date_ss,@nomap,@nomap,0,
	     {2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),
	     @default_date_ss,@default_date_ss,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
	     @nomap,{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),{2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),
	     {2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),{2}.dbo.gfn_GetAnyID('customer_application_id'),
	     {2}.dbo.gfn_GetAnyID('customer_entity_id'),{2}.dbo.gfn_GetAnyID('customer_source_system_id'),
	     {2}.dbo.gfn_GetAnyID('contract_application_id'),{2}.dbo.gfn_GetAnyID('contract_source_system_id'),
	     {2}.dbo.gfn_GetAnyID('contract_entity_id'),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,@id_val,@date_to)

    END --end of loans
    
    --insert into ST_CONTRACT_BALANCE    
     INSERT INTO {2}.dbo.[st_contract_balance]
	(CONTRACT_ID,COUNTERPARTY_INDICATOR,CUSTOMER_ID,PROFIT_CENTRE_CODE,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,CATEGORY_ID,
	 BRANCH_CODE,ACCOUNT_OFFICER_ID,CONTRACT_SCORING_ID,PRINCIPAL_CURRENCY_ISO_CODE,CURRENT_PRINCIPAL,FORWARD_PRINCIPAL,
	 LAST_PAYMENT_DATE,LEASING_NPV_AMOUNT,LEASING_RESIDUAL_AMOUNT,ALREADY_PAID_AMOUNT,NEXT_PAYMENT_DATE,APPLICATION_ID,
	 SOURCE_SYSTEM_ID,ENTITY_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,
	 BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,
	 CONTRACT_APPLICATION_ID,CONTRACT_ENTITY_ID,CONTRACT_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,
	 CUSTOMER_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,
	 PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,DATE_FROM,SOURCE_DATE,RWA_BALANCE,RWA_1_BALANCE,RWA_2_BALANCE,
	 QUALITY_INDICATOR,LEASING_NPV_CURRENCY_ISO_CODE,LEASING_RESIDUAL_CURRENCY_CODE,CNTR_SCORING_APPLICATION_ID,
	 CNTR_SCORING_ENTITY_ID,CNTR_SCORING_SOURCE_SYSTEM_ID,DEPOSIT_INSURANCE,STANDARD_RISK_COSTS,EFFECTIVE_DATE)
      VALUES(@id_pog,@counterparty_indicator,@id_kupca,@nomap,@product_type_id,@product_subtype_id,@nomap,@nomap,@nomap,
	     @nomap,@id_val,@current_principal,NULL,@default_date_ss,@leasing_npv_amount,@leasing_residual_amount,NULL,
	     @default_date_ss,{2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),
	     @nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,{2}.dbo.gfn_GetAnyID('contract_application_id'),
	     {2}.dbo.gfn_GetAnyID('contract_entity_id'),{2}.dbo.gfn_GetAnyID('contract_source_system_id'),{2}.dbo.gfn_GetAnyID('customer_application_id'),
	     {2}.dbo.gfn_GetAnyID('customer_entity_id'),{2}.dbo.gfn_GetAnyID('customer_source_system_id'),{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),
	     {2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),@nomap,@nomap,@nomap,@default_date_ss,
	     @default_date_ss,NULL,NULL,NULL,NULL,@id_val,@id_val,@nomap,@nomap,@nomap,NULL,NULL,@date_to)

    END -- end of financial, operative as financial and loans
	
	--insert into ST_CUSTOMER_COUNTERPARTY_ROLE (is filled for all facilities -> all leasings and loans) 
    INSERT INTO {2}.dbo.[st_customer_counterparty_role]
	(CUSTOMER_ID,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,CUSTOMER_ROLE_CODE,
	 STATUS_INDICATOR,DATE_FROM,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,
	 COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,COUNTERP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,EFFECTIVE_DATE)
    VALUES(@id_kupca,@id_pog,@counterparty_indicator,{2}.dbo.gfn_GetAnyID('application_id'),
	   {2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),@nomap,
	   case @status_akt when 'A' then 'A' when 'Z' then 'I' end,@default_date_ss,
	   @default_date_ss,{2}.dbo.gfn_GetAnyID('customer_application_id'),{2}.dbo.gfn_GetAnyID('customer_entity_id'),
	   {2}.dbo.gfn_GetAnyID('customer_source_system_id'),{2}.dbo.gfn_GetAnyID('counterp_application_id'),
	   {2}.dbo.gfn_GetAnyID('counterp_entity_id'),{2}.dbo.gfn_GetAnyID('counterp_source_system_id'),NULL,@date_to)

   set @counter = @counter + 1
  
    FETCH NEXT FROM CONT_CRZ INTO @id_cont,@id_pog,@id_kupca,@id_val,@vr_val,@id_tec,
                                  @nacin_leas,@dat_aktiv,@ex_max_datum_dok,@opcija,@dat_zakl,@status_akt,@id_vrste,@ex_g1_neto,@ex_g1_neto_opc_nezap, @net_nal,
                                  @leas_kred,@tip_knjizenja,@id_grupe,@varscina,@ex_g1_davek_fin,@dobrocno,@ex_g1_davek
  END

  CLOSE CONT_CRZ
  DEALLOCATE CONT_CRZ
-------------------------------------------------------------------------------END OF FACILITIES---------------------------------------------------------------------------------------------------------------------------














------------------------------------------------------------------------------------------------FRAMES-----------------------------------------------------------------------------------------------------------------------------
--TABLES: ST_LIMIT_REFERENCE, ST_COUNTERP_LIMIT, ST_CUSTOMER_COUNTERPARTY_ROLE
declare @id_frame int, @dat_odobritve datetime, @dat_zak datetime, @znesek_val decimal(21,4), @frame_type char(3), 
@drzava_sed char(3), @velja_do datetime, @b2_eligible bit

DECLARE FRM_CRZ CURSOR  FOR
SELECT fr.id_frame,fr.id_kupca,fr.id_tec,fr.dat_odobritve,fr.dat_zak,fr.znesek_val,fr.frame_type, t.id_val, fr.velja_do, fr.b2_eligible
FROM {1}.dbo.oc_frames fr
INNER JOIN {1}.dbo.tecajnic t ON fr.id_tec = t.id_tec AND fr.id_oc_report = t.id_oc_report
INNER JOIN (SELECT P.* 
			 FROM {1}.dbo.p_eval P
			 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
						FROM {1}.dbo.p_eval
						GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
			 WHERE P.id_oc_report = @id_oc_report) PE ON fr.id_kupca = pe.id_kupca AND fr.id_oc_report = pe.id_oc_report
WHERE fr.id_oc_report = @id_oc_report 
AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
AND
(
	fr.b2_eligible = 1
	AND
	(fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to)))
)	

OPEN FRM_CRZ

FETCH NEXT FROM FRM_CRZ INTO @id_frame,@id_kupca,@id_tec,@dat_odobritve,@dat_zak,@znesek_val,@frame_type,@id_val,@velja_do,@b2_eligible
WHILE @@FETCH_STATUS = 0
BEGIN

-- we get drzava_sed as first two characters of field id_poste_sed from table oc_customers 
set @drzava_sed = (SELECT substring(id_poste_sed,0,3) FROM {1}.dbo.oc_customers
								  WHERE id_oc_report = @id_oc_report
								  AND id_kupca = @id_kupca)


-- insert frame type into table ST_PRODUCT_TYPE_SUBTYPE
set @product_type_id = '*nomap*'
set @product_subtype_id = '*nomap*'
 
--insert into ST_LIMIT_REFERENCE
INSERT INTO {2}.dbo.[st_limit_reference] 
(LIMIT_REFERENCE,LIMIT_TYPE_ID,LIMIT_TYPE_DESCRIPTION,SECURED_INDICATOR,COMMITMENT_INDICATOR,PARTIAL_EXPOSURE_INDICATOR,
LIMIT_TERM_INDICATOR,CURRENCY_ISO_CODE,COUNTRY_OF_RISK_ISO_CODE,START_DATE,EXPIRY_DATE,REVIEW_DATE,INTERNAL_LIMIT_AMOUNT,
ORIGINAL_LIMIT_AMOUNT,COLLATERAL_HELD_INDICATOR,REVOLVING_INDICATOR,NETTING_INDICATOR,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,
SPECIFIC_PRODUCT_TYPE_ID,SPECIFIC_PRODUCT_SUBTYPE_ID,COUNTERP_LEVEL_INDICATOR,TOP_PARENT_INDICATOR,HIERARCHY_LEVEL,
HIERARCHY_DEPTH,PARENT_LIMIT_ID,TOP_PARENT_LIMIT_ID,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,
SPEC_PROD_TP_APPLICATION_ID,SPEC_PROD_TP_SOURCE_SYSTEM_ID,SPEC_PROD_TP_ENTITY_ID,TOP_PARNT_LIM_APPLICATION_ID,
TOP_PARNT_LIM_SOURCE_SYSTEM_ID,TOP_PARNT_LIM_ENTITY_ID,PARNT_LIMIT_APPLICATION_ID,PARNT_LIMIT_SOURCE_SYSTEM_ID,
PARNT_LIMIT_ENTITY_ID,SOURCE_DATE,LIMIT_TP_APPLICATION_ID,LIMIT_TP_ENTITY_ID,LIMIT_TP_SOURCE_SYSTEM_ID,GL_ACCOUNT_ID,
GL_ACCOUNT_APPLICATION_ID,GL_ACCOUNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_ENTITY_ID,COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,
COUNTERP_SOURCE_SYSTEM_ID,COUNTERPARTY_NAME,BRANCH_CODE,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,
PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,CATEGORY_ID,
CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,CANCELABLE_INDICATOR,DEFAULT_INDICATOR,DEFAULT_CONTAGION_INDICATOR,
DEAL_BOOK_ID,EXTERNAL_INDICATOR,STRUCTURED_CONTRACT,LOCATION_NAME,SCORING_POOL_ID,SCR_POOL_APPLICATION_ID,SCR_POOL_ENTITY_ID,
SCR_POOL_SOURCE_SYSTEM_ID,RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,CUSTOMER_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,
CUSTOMER_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,NOTICE_INDICATOR,NOTICE_DAYS_NUMBER,SENIORITY_INDICATOR,GRP_LMT_TP_APPLICATION_ID,
GROUP_LIMIT_TYPE_ID,FUNDING_CURRENCY_ISO_CODE,OFSA_PRODUCT_CODE,GRP_LMT_TP_ENTITY_ID,GRP_LMT_TP_SOURCE_SYSTEM_ID,DATE_FROM)

VALUES(@id_frame,@nomap,@nomap,'Y','Y',@nomap,@nomap,case when @id_val = 'KM' then 'BAM' when @id_val = 'DIN' then 'RSD' else @id_val end,
case @drzava_sed when 'XX' then '*n.a.*' else @drzava_sed end,
@dat_odobritve,case when @dat_zak <= @date_to then @dat_zak else ISNULL(@velja_do, @default_date_row) end,@default_date_ss,
NULL,NULL,@nomap,@nomap,'N',@nomap,@nomap,@nomap,@nomap,case when @frame_type = 'POG' OR @frame_type = 'REV' then 'G' else 'S' end,
1,1,1,'*nomap*',@id_frame,case when @dat_zak <= @date_to then 'I' else 'A' end,@application_id,
@source_system_id,@entity_id,@nomap,@nomap,@nomap,@application_id,
@source_system_id,@entity_id,'*nomap*','*nomap*','*nomap*',@default_date_ss,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap, @product_type_id, @product_subtype_id,'*nomap*','*nomap*',
'*nomap*',@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@company_id + '_B',
'N','*nomap*',@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,'Y','1','1',
{2}.dbo.gfn_GetAnyID('grp_lmt_tp_application_id'),case when @frame_type = 'POG' OR @frame_type = 'REV' then 'CC' else 'OC' end,
case when @id_val = 'KM' then 'BAM' when @id_val = 'DIN' then 'RSD' else @id_val end,
@nomap,{2}.dbo.gfn_GetAnyID('grp_lmt_tp_entity_id'),{2}.dbo.gfn_GetAnyID('grp_lmt_tp_source_system_id'),@date_to)

--insert into ST_CUSTOMER_COUNTERPARTY_ROLE
INSERT INTO {2}.dbo.[st_customer_counterparty_role]
(CUSTOMER_ID,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,CUSTOMER_ROLE_CODE,STATUS_INDICATOR,
DATE_FROM,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,
COUNTERP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,EFFECTIVE_DATE)
VALUES(@id_kupca,@id_frame,'LIM',@application_id,@source_system_id,
@entity_id,@nomap,case when @dat_zak IS NULL then 'A' else 'I' end,
@default_date_ss,@default_date_ss,
@application_id,@entity_id,@source_system_id,
@application_id,@entity_id,@source_system_id,NULL,@date_to)

FETCH NEXT FROM FRM_CRZ INTO @id_frame,@id_kupca,@id_tec,@dat_odobritve,@dat_zak,@znesek_val,@frame_type,@id_val,@velja_do,@b2_eligible
END
CLOSE FRM_CRZ
DEALLOCATE FRM_CRZ

--FRAMES_COUNTERPARTY
DECLARE FRM_CRZ1 CURSOR  FOR
SELECT fr.id_frame, fr.id_kupca, fr.id_tec, fr.dat_odobritve, fr.dat_zak, fr.znesek_val, fr.frame_type, c.id_pog, 
case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end, nl.leas_kred,
case when @company_id = 'RLHR' then
		case when (nl.tip_knjizenja = 1 and c.dat_aktiv >= '20050101') then 0 else 1 end
	 when @company_id = 'RLSI' then
		case when nl.tip_knjizenja = 1 AND c.nacin_leas IN ('ON') then 0 else 1 end
	 when @company_id = 'RRRS' then
		case when nl.tip_knjizenja = 1 AND c.nacin_leas IN ('OX') then 0 else 1 end
	 else 1
end, fr.b2_eligible, CASE WHEN c.dat_zakl > @date_to THEN 'A' ELSE c.status_akt END
FROM {1}.dbo.oc_frames fr
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON fr.id_kupca = pe.id_kupca AND fr.id_oc_report = pe.id_oc_report
LEFT JOIN {1}.dbo.frame_pogodba fp on fr.id_frame = fp.id_frame AND fr.id_oc_report = fp.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON fr.id_tec = tec.id_tec AND fr.id_oc_report = tec.id_oc_report
LEFT JOIN {1}.dbo.oc_contracts c ON c.id_cont = fp.id_cont AND c.id_oc_report = fp.id_oc_report
LEFT JOIN {1}.dbo.nacini_l nl ON c.nacin_leas = nl.nacin_leas AND c.id_oc_report = nl.id_oc_report
WHERE fr.id_oc_report = @id_oc_report
AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
AND
(	
	fr.b2_eligible = 1
	AND
	((fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to))))
	AND 
	(((c.status_akt = 'A' OR (c.status_akt = 'Z' AND ((month(c.dat_zakl) = month(@date_to) and year(c.dat_zakl) = year(@date_to)) OR c.dat_zakl > @date_to))) OR c.status_akt is null)) 
)	


UNION

SELECT fr.id_frame, fr.id_kupca, fr.id_tec, fr.dat_odobritve, fr.dat_zak, fr.znesek_val, fr.frame_type, null, 
	   case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end, null, 
	   fr.b2_eligible, null, null
FROM {1}.dbo.oc_frames fr
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON fr.id_kupca = pe.id_kupca AND fr.id_oc_report = pe.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON fr.id_tec = tec.id_tec AND fr.id_oc_report = tec.id_oc_report
WHERE fr.id_oc_report = @id_oc_report
AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
AND
(
	fr.b2_eligible = 1
	AND
	((fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to))))
)
AND EXISTS
(
SELECT fp.id_frame 
FROM {1}.dbo.frame_pogodba fp
WHERE fp.id_frame = fr.id_frame AND fp.id_oc_report = @id_oc_report
)
AND NOT EXISTS
(
SELECT fp.id_frame 
FROM {1}.dbo.frame_pogodba fp
INNER JOIN {1}.dbo.oc_contracts c ON fp.id_oc_report = c.id_oc_report AND fp.id_cont = c.id_cont
WHERE fp.id_frame = fr.id_frame 
AND (c.status_akt = 'A' OR (c.status_akt = 'Z' AND ((month(c.dat_zakl) = month(@date_to) and year(c.dat_zakl) = year(@date_to)) OR c.dat_zakl > @date_to)))
AND fp.id_oc_report = @id_oc_report
)
   
OPEN FRM_CRZ1

FETCH NEXT FROM FRM_CRZ1 INTO @id_frame,@id_kupca,@id_tec,@dat_odobritve,@dat_zak,@znesek_val,@frame_type,@id_pog,@id_val,@leas_kred,@financni_leasing,@b2_eligible,@status_akt
WHILE @@FETCH_STATUS = 0
BEGIN

set @product_type_id = '*nomap*'
set @product_subtype_id = '*nomap*'

INSERT INTO {2}.dbo.[st_customer_counterp_limit] 
	(CUSTOMER_ID,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,NOMINAL_CURRENCY_ISO_CODE,LIMIT_REFERENCE,
	PROFIT_CENTRE_CODE,BRANCH_CODE,ACCOUNT_OFFICER_ID,ONLINE_LIMIT_AMOUNT,AVAILABLE_LIMIT_AMOUNT,COUNTERP_PRINCIPAL_AMOUNT,RWA_BALANCE,
	LAST_CHANGE_DATE,LIMIT_TYPE_ID,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,DATE_FROM,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,
	CUSTOMER_SOURCE_SYSTEM_ID,LMT_REF_APPLICATION_ID,LMT_REF_ENTITY_ID,LMT_REF_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,
	PROF_CNT_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,
	ACCT_OFF_SOURCE_SYSTEM_ID,LIMIT_TP_APPLICATION_ID,LIMIT_TP_ENTITY_ID,LIMIT_TP_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,
	PROD_TP_SOURCE_SYSTEM_ID,COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,COUNTERP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,AVAILABLE_LIMIT_CURRENCY_CODE,
	ONLINE_LIMIT_CURRENCY_ISO_CODE,STATUS_INDICATOR,EFFECTIVE_DATE)
	VALUES(@id_kupca,@product_type_id, @product_subtype_id,case when @id_pog is null then '*n.a.*' else cast(@id_pog as varchar(140)) end,
	case when @leas_kred = 'K' then 'L' when @leas_kred = 'L' and @financni_leasing = 1 then 'LS' when @leas_kred = 'L' and @financni_leasing = 0 then 'AC' when @leas_kred is null then @nomap end,
	@nomap,@id_frame,@nomap,@nomap,@nomap,
	@znesek_val,NULL,NULL,NULL,@default_date_ss,@nomap,@application_id,@source_system_id,
	@entity_id,@default_date_ss,@default_date_ss,@application_id,@entity_id,
	@source_system_id,@application_id,@entity_id,
	@source_system_id,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
	@nomap,@nomap,@nomap,@nomap,
	@application_id,@entity_id,@source_system_id,
	NULL,@nomap,case when @id_val = 'KM' then 'BAM' when @id_val = 'DIN' then 'RSD' else @id_val end,
	'*nomap*',@date_to)

FETCH NEXT FROM FRM_CRZ1 INTO @id_frame,@id_kupca,@id_tec,@dat_odobritve,@dat_zak,@znesek_val,@frame_type,@id_pog,@id_val,@leas_kred,@financni_leasing,@b2_eligible,@status_akt
END

CLOSE FRM_CRZ1
DEALLOCATE FRM_CRZ1

----------------------------------------------------------------------------------------------END OF FACILITIES---------------------------------------------------------------------------------------------------------













----------------------------------------------------------------------------------------------------------COLLATERALS----------------------------------------------------------------------------------------------------------
--TABLES: ST_COLLATERAL, ST_COLLATERAL_COUNTERPARTY, ST_CUSTOMER_COUNTERPARTY_ROLE

--to be querried from dokument
declare @id_dokum varchar(140), @id_obl_zav char(2), @id_kupca_dok char(6), @zacetek datetime, @vrednost decimal(21,4),
	  @dat_ocene datetime, @collat_type_b2 varchar(140), @rep_to_cust_counterp_table bit , @execution_value decimal(18,2), 
	  @ocen_vred numeric(18,2), @id_hipot char(5), @stevilka char(30), @is_elligible bit, @is_elligible_coll bit, @eval_frequency int
--COLLATERALS IZ rea.DOKUMENT-------------------------------------------
DECLARE DOK_CRZ CURSOR  FOR
SELECT dok.id_dokum,dok.id_obl_zav,dok.id_cont,case when dok.id_kupca is null then co.id_kupca else dok.id_kupca end,IsNull(dok.zacetek,@default_date_row),IsNull(dok.velja_do, @default_date_spec),dok.vrednost,IsNull(dok.dat_ocene,@default_date_row),dok.id_tec,dok.ocen_vred,dok.id_hipot,dok.stevilka,
col.collat_type_b2, col.coll_counterp, co.dat_aktiv, d.is_elligible, dok.is_elligible, d.eval_frequency, co.ex_max_datum_dok,
case when tecd.id_tec is null then
	case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end
else
	case when tecd.id_val = 'KM' then 'BAM' when tecd.id_val = 'DIN' then 'RSD' else tecd.id_val end
end,
CASE WHEN co.dat_zakl > @date_to THEN 'A' ELSE co.status_akt END, co.id_pog, nl.leas_kred,
case when @company_id = 'RLHR' then
		case when (nl.tip_knjizenja = 1 and co.dat_aktiv >= '20050101') then 0 else 1 end
	 when @company_id = 'RLSI' then
		case when nl.tip_knjizenja = 1 AND co.nacin_leas IN ('ON') then 0 else 1 end
	 when @company_id = 'RRRS' then
		case when nl.tip_knjizenja = 1 AND co.nacin_leas IN ('OX') then 0 else 1 end
   else 1
end
FROM {1}.dbo.oc_contracts co
INNER JOIN {1}.dbo.nacini_l nl ON co.nacin_leas = nl.nacin_leas AND co.id_oc_report = nl.id_oc_report
INNER JOIN {1}.dbo.dokument dok ON co.id_cont = dok.id_cont AND co.id_oc_report = dok.id_oc_report
INNER JOIN {1}.dbo.dok d ON dok.id_obl_zav = d.id_obl_zav AND dok.id_oc_report = d.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON co.id_tec = tec.id_tec AND co.id_oc_report = tec.id_oc_report
LEFT JOIN {1}.dbo.tecajnic tecd ON dok.id_tec = tecd.id_tec AND dok.id_oc_report = tecd.id_oc_report
INNER JOIN {2}.dbo.b2collat col ON dok.id_obl_zav = col.id_obl_zav
INNER JOIN (SELECT P.* 
			 FROM {1}.dbo.p_eval P
			 INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
						FROM {1}.dbo.p_eval
						GROUP BY id_oc_report, id_kupca) E ON P.id_kupca = E.id_kupca AND P.dat_eval = E.dat_eval AND P.id_oc_report = E.id_oc_report
			 WHERE P.id_oc_report = @id_oc_report) PE ON co.id_kupca = pe.id_kupca AND co.id_oc_report = pe.id_oc_report
WHERE dok.id_oc_report = @id_oc_report
AND substring(pe.eval_model, 1, 2) NOT IN ('01', '20')
AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
AND (dok.id_hipot = col.id_hipot OR col.id_hipot = '*')
AND dok.ima = 1

OPEN DOK_CRZ

FETCH NEXT FROM DOK_CRZ INTO @id_dokum,@id_obl_zav,@id_cont,@id_kupca_dok,@zacetek,@velja_do,@vrednost,
						   @dat_ocene,@id_tec,@ocen_vred,@id_hipot,@stevilka,@collat_type_b2,@rep_to_cust_counterp_table, @dat_aktiv,
						   @is_elligible, @is_elligible_coll, @eval_frequency, @ex_max_datum_dok, @id_val, @status_akt, @id_pog, @leas_kred,
						   @financni_leasing
						   

WHILE @@FETCH_STATUS = 0
BEGIN
if(@collat_type_b2 = '10' OR @collat_type_b2 = '14')
   set @execution_value = @ocen_vred 
else
  set @execution_value = @vrednost


      --izraËunaj execution_value (za vse (razen 10, 14): dokument.vrednost, za 10,14: dokument.oce_vrendost*koeficient(iz thipot))
      --insert into ST_COLLATERAL
INSERT INTO {2}.dbo.[st_collateral]
(COLLATERAL_ID,COLLATERAL_TYPE_ID,COLLATERAL_TYPE_DESCRIPTION,COLLATERAL_TYPE_BASLE2_ID,COLLATERAL_TYPE_BASLE2_DESCR,COLLATERAL_CUSTOMER_ID,
COLLATERAL_COUNTERPARTY_ID,COLL_COUNTERPARTY_INDICATOR,COUNTERPARTY_NAME,CUSTOMER_SECURED_ID,NOMINAL_CURRENCY_ISO_CODE,START_DATE,
REVIEW_DATE,EXPIRY_DATE,NOMINAL_VALUE,EXECUTION_VALUE,POOLED_INDICATOR,COLLATERAL_NARRATIVE,COLLATERAL_RATING,OVERALL_ALLOCATION,
RW_APPROACH_CODE,RWA_BALANCE,MAXIMUM_AMOUNT,ELIGIBILITY_INDICATOR,LIABILITY_PERCENTAGE,COLLATERAL_CLASS_ID,INSURANCE_TYPE_ID,
INSURANCE_TYPE_DESCRIPTION,DEBT_SECURITY_MATURITY_DATE,OWN_HAIRCUT_RATE,DAILY_QUOTING_INDICATOR,MAIN_INDEX_INDICATOR,STOCK_EXCHANGE_CODE,
ISIN,NUMBER_OF_SECURITIES,BANK_IDENTIFIER_CODE,DEPOSIT_REFERENCE_NUMBER,CLASSIFICATION_ID,REVALUATION_FREQUENCY,REVALUATION_DATE,
COUNTER_GUARANTOR_CUSTOMER_ID,GUARANTOR_TYPE_ID,BRANCH_CODE,ROUTER_ACCOUNT_NUMBER,INSURANCE_CONTRACT_NUMBER,INSURANCE_COMPANY,
INSURANCE_CLAIM_INDICATOR,INSURANCE_CLAIM_AMOUNT,INSURANCE_CLAIM_DATE,INSURANCE_PREMIUM,COMPENSATION_AMOUNT,PRIOR_CLAIMS_AMOUNT,
DISCOUNT_RATE,PRIOR_CLAIMS_RATE,FUND_HAIRCUT_INDICATOR,ELIGIBLE_WO_RATING_INDICATOR,EXTERNAL_DEPOSIT_INDICATOR,POSITION_TO_DEFAULT,
RESTRUCTURING_INDICATOR,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,GL_ACCOUNT_ID,GL_ACCOUNT_APPLICATION_ID,
GL_ACCOUNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_ENTITY_ID,SOURCE_DATE,COLL_TP_APPLICATION_ID,COLL_TP_ENTITY_ID,COLL_TP_SOURCE_SYSTEM_ID,
CUST_SECURED_APPLICATION_ID,CUST_SECURED_ENTITY_ID,CUST_SECURED_SOURCE_SYSTEM_ID,COLL_CLS_APPLICATION_ID,COLL_CLS_ENTITY_ID,
COLL_CLS_SOURCE_SYSTEM_ID,INSURANCE_TP_APPLICATION_ID,INSURANCE_TP_ENTITY_ID,INSURANCE_TP_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,
BRANCH_SOURCE_SYSTEM_ID,BRANCH_ENTITY_ID,COLL_CNP_APPLICATION_ID,COLL_CNP_ENTITY_ID,COLL_CNP_SOURCE_SYSTEM_ID,COUNT_GR_CUST_APPLICATION_ID,
COUNT_GR_CUST_ENTITY_ID,COUNT_GR_CUST_SOURCE_SYSTEM_ID,COLL_CUST_APPLICATION_ID,COLL_CUST_SOURCE_SYSTEM_ID,COLL_CUST_ENTITY_ID,CATEGORY_ID,
CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,SENIORITY_INDICATOR,COUNTRY_OF_RISK_ISO_CODE,DEAL_BOOK_ID,
STRUCTURED_CONTRACT,LOCATION_NAME,RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,QUALITY_INDICATOR,ISSUER_TYPE_ID,ISSUER_TP_APPLICATION_ID,
ISSUER_TP_ENTITY_ID,ISSUER_TP_SOURCE_SYSTEM_ID,OFSA_PRODUCT_CODE,STOCK_EX_APPLICATION_ID,STOCK_EX_ENTITY_ID,STOCK_EX_SOURCE_SYSTEM_ID,
MAXIMUM_CURRENCY_ISO_CODE,EXECUTION_CURRENCY_ISO_CODE,PRIOR_CLAIMS_CURRENCY_ISO_CODE,DATE_FROM)
VALUES('COLL-'+@id_dokum,@nomap,@nomap,@collat_type_b2,@nomap,@id_kupca_dok,'*nomap*','*nomap*',@nomap,@nomap,@nomap,@zacetek,
@default_date_ss,@velja_do,NULL,IsNull(@execution_value, 0),@nomap,@nomap,
@nomap,NULL,case when @collat_type_b2 = 10 OR @collat_type_b2 = 14 then 'Y' else '*nomap*' end,
NULL,NULL,case when @is_elligible_coll = 1 then 'Y' else 'N' end,
NULL,@nomap,@nomap,@nomap,@default_date_ss,NULL,'*nomap*','*nomap*','*nomap*','*nomap*',null,
'*nomap*',case when @collat_type_b2 = 0 then @stevilka else '*nomap*' end,
'*nomap*',case when @eval_frequency = 0 then NULL else @eval_frequency end,
case when @dat_ocene is null then @default_date_row else @dat_ocene end,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,@default_date_ss,
NULL,NULL,NULL,NULL,NULL,'*nomap*','*nomap*',case when @collat_type_b2 = 0 then 'Y' else '*nomap*' end,
null,'*nomap*',
case when month(@velja_do)=month(@date_to) AND year(@velja_do)=year(@date_to) then 'I' else 'A' end,
{2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),
@nomap,@nomap,@nomap,@nomap,@default_date_ss,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,'*nomap*','*nomap*','*nomap*',@nomap,@nomap,@nomap,{2}.dbo.gfn_GetAnyID('coll_application_id'),
{2}.dbo.gfn_GetAnyID('coll_source_system_id'),  {2}.dbo.gfn_GetAnyID('coll_entity_id'), @nomap,@nomap,@nomap,@nomap,'1',
case when @collat_type_b2 = '10' or @collat_type_b2 = '14' then @drzava else @nomap end,@nomap,@nomap,@nomap,@nomap,
'*nomap*',NULL,'*nomap*','*nomap*', '*nomap*','*nomap*',@nomap,'*nomap*','*nomap*','*nomap*',@nomap,
case when @id_val is null OR @id_val = 'KM' OR @id_val = 'DIN' then @id_val_dom else @id_val end,@nomap,@date_to)
										  
 --insert into ST_COLLATERAL_COUNTERPARTY
INSERT INTO {2}.dbo.[st_collateral_counterparty] 
(COLLATERAL_ID,SECURED_COUNTERPARTY_ID,SECURED_COUNTERPARTY_INDICATOR,EXPIRY_DATE,ALLOCATION_AMOUNT,ALLOCATION_PERCENTAGE,
COLLATERAL_COUNTERPARTY_ID,COLL_COUNTERPARTY_INDICATOR,NOMINAL_VALUE,EXECUTION_VALUE,NOMINAL_CURRENCY_ISO_CODE,MATURITY_DATE,
OWN_CURRENCY_HAIRCUT_RATE,START_DATE,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,DATE_FROM,SOURCE_DATE,COLL_APPLICATION_ID,
COLL_ENTITY_ID,COLL_SOURCE_SYSTEM_ID,SECURED_CNP_APPLICATION_ID,SECURED_CNP_ENTITY_ID,SECURED_CNP_SOURCE_SYSTEM_ID,
COLL_CNP_APPLICATION_ID,COLL_CNP_ENTITY_ID,COLL_CNP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,EXECUTION_CURRENCY_ISO_CODE,
ALLOCATION_CURRENCY_ISO_CODE,STATUS_INDICATOR,EFFECTIVE_DATE)
VALUES('COLL-'+@id_dokum,@id_pog,
case when @leas_kred = 'K' then 'L' when @leas_kred = 'L' and @financni_leasing = 1 then 'LS' when @leas_kred = 'L' and @financni_leasing = 0 then 'AC' end,
@default_date_ss,NULL,NULL,'*nomap*',
'*nomap*',NULL,NULL,@nomap,@default_date_ss,NULL,@default_date_ss,{2}.dbo.gfn_GetAnyID('application_id'),
{2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),@default_date_ss,@default_date_ss,
{2}.dbo.gfn_GetAnyID('coll_application_id'),{2}.dbo.gfn_GetAnyID('coll_entity_id'),{2}.dbo.gfn_GetAnyID('coll_source_system_id'),
{2}.dbo.gfn_GetAnyID('secured_cnp_application_id'),{2}.dbo.gfn_GetAnyID('secured_cnp_entity_id'),
{2}.dbo.gfn_GetAnyID('secured_cnp_source_system_id'),@nomap,@nomap,@nomap,NULL,@nomap,@nomap,'*nomap*',@date_to)

IF(@rep_to_cust_counterp_table = 1) BEGIN --le za life insurance in guarantees
--insert into ST_CUSTOMER_COUNTERPARTY_ROLE
--set @id_kupca = (SELECT DISTINCT id_kupca from {1}.dbo.oc_contracts where id_oc_report=@id_oc_report and id_cont = @id_cont)
--(CUSTOMER_ID must be the same as COLLATERAL_CUSTOMER_ID in table ST_COLLATERAL)
	INSERT INTO {2}.dbo.[st_customer_counterparty_role]
	(CUSTOMER_ID,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,CUSTOMER_ROLE_CODE,STATUS_INDICATOR,
	DATE_FROM,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,
	COUNTERP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,EFFECTIVE_DATE)
	VALUES(@id_kupca_dok,'COLL-'+@id_dokum,'COL',{2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('source_system_id'),@entity_id,
	@nomap,case when month(@velja_do)=month(@date_to) AND year(@velja_do)=year(@date_to) then 'I' else 'A' end,
	@default_date_ss,@default_date_ss,{2}.dbo.gfn_GetAnyID('customer_application_id'),
	{2}.dbo.gfn_GetAnyID('customer_entity_id'),{2}.dbo.gfn_GetAnyID('customer_source_system_id'),
	{2}.dbo.gfn_GetAnyID('counterp_application_id'),{2}.dbo.gfn_GetAnyID('counterp_entity_id'),
	{2}.dbo.gfn_GetAnyID('counterp_source_system_id'),NULL,@date_to)

END

FETCH NEXT FROM DOK_CRZ INTO @id_dokum,@id_obl_zav,@id_cont,@id_kupca_dok,@zacetek,@velja_do,@vrednost,
						   @dat_ocene,@id_tec,@ocen_vred,@id_hipot,@stevilka,@collat_type_b2,@rep_to_cust_counterp_table, @dat_aktiv,
						   @is_elligible, @is_elligible_coll, @eval_frequency, @ex_max_datum_dok, @id_val, @status_akt, @id_pog, @leas_kred,
						   @financni_leasing

END
CLOSE DOK_CRZ
DEALLOCATE DOK_CRZ
----------------------------------------------------------------------------------------------END OF COLLATERALS------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------FIXED ASSETS----------------------------------------------------------------------------------------------------------------------------
--TABLES: ST_ACCOUNT, ST_ACCOUNT_BALANCE
declare @inv_stev char(7), @ex_present_val decimal(24,4), @id_knjizbe char(10), @dat_likv datetime

DECLARE FA_CRZ CURSOR FOR

SELECT f.inv_stev, f.ex_present_val, f.id_knjizbe, 'OL-' + vo.id_grupe, 'OL-' + co.id_vrste, 
{2}.dbo.gfn_GetOpprodGpc('OL', co.id_vrste, co.nacin_leas, @company_id), co.id_vrste, 
case when co.status_akt = 'A' OR co.dat_zakl > @date_to then 'A' else 'I' end
FROM {1}.dbo.oc_contracts co
INNER JOIN {1}.dbo.fa f ON co.id_oc_report = f.id_oc_report AND co.id_cont = f.id_cont
INNER JOIN {1}.dbo.nacini_l nl ON co.id_oc_report = nl.id_oc_report and co.nacin_leas = nl.nacin_leas
INNER JOIN {1}.dbo.vrst_opr vo ON co.id_oc_report = vo.id_oc_report and co.id_vrste = vo.id_vrste
WHERE co.id_oc_report = @id_oc_report
AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
AND 1 = CASE WHEN @company_id = 'RLSI' THEN CASE WHEN nl.tip_knjizenja = 1 AND co.nacin_leas IN ('ON') THEN 1 ELSE 0 END
			 WHEN @company_id = 'RLHR' THEN CASE WHEN nl.tip_knjizenja = 1 AND co.dat_aktiv >= '20050101' THEN 1 ELSE 0 END
			 WHEN @company_id = 'RRRS' THEN CASE WHEN nl.tip_knjizenja = 1 AND co.nacin_leas IN ('OX') THEN 1 ELSE 0 END
			 ELSE 0
		END
--AND f.ex_present_val > 0

UNION ALL

SELECT inv_stev, ex_present_val, id_knjizbe, 'FA-' + id_knjizbe, 'FA', {2}.dbo.gfn_GetFaGpc(id_knjizbe, @company_id), NULL, 
case when dat_likv is null then 'A' else 'I' end
FROM {1}.dbo.fa
WHERE id_oc_report = @id_oc_report
AND id_cont IS NULL
--AND ex_present_val > 0

OPEN FA_CRZ
FETCH NEXT FROM FA_CRZ INTO @inv_stev, @ex_present_val, @id_knjizbe, @product_type_id, @product_subtype_id, @group_product_type_id, @id_vrste, @status_akt

WHILE @@FETCH_STATUS = 0 BEGIN

IF @group_product_type_id IS NULL
	BEGIN
		IF @id_vrste IS NULL BEGIN
			set @err_msg = 'B2FAPROD MAPPING ERROR FOR id_knjizbe: {0}. GPC CODE NOT FOUND!'
			set @err_msg = (select replace(@err_msg, '{0}', @id_knjizbe))
			print @err_msg
			RAISERROR(@err_msg, 16, 1)
		END ELSE BEGIN
			set @err_msg = 'B2OPPROD MAPPING ERROR FOR leasing type: {0}, id_vrste: {1}. GPC CODE NOT FOUND!'
			set @err_msg = (select replace(@err_msg, '{0}', 'OL'))
			set @err_msg = (select replace(@err_msg, '{1}', @id_vrste))
			print @err_msg
			RAISERROR(@err_msg, 16, 1)
		END

	END

IF(NOT EXISTS (SELECT product_type_id, product_subtype_id
               FROM {2}.dbo.st_product_type_subtype
               WHERE product_type_id = @product_type_id
               AND product_subtype_id = @product_subtype_id))
BEGIN
INSERT INTO {2}.dbo.st_product_type_subtype
      (product_type_id,product_subtype_id, PRODUCT_TYPE_SUBTYPE_DESCR, group_product_type_id,
	   GROUP_PRODUCT_TYPE_DESCRIPTION, PRODUCT_TYPE_BASLE2_ID, PRODUCT_TYPE_B2_DESCR, ON_BALANCE_INDICATOR,
	   LETTER_OF_CREDIT_INDICATOR, NOTE_ISSUANCE_INDICATOR, REVOLVE_UNDERWRITE_INDICATOR, 
       application_id,source_system_id,entity_id, 
	   SOURCE_DATE, TRANSACTION_TYPE_ID, TXN_TYPE_APPLICATION_ID, TXN_TYPE_SOURCE_SYSTEM_ID, TXN_TYPE_ENTITY_ID,
	   status_indicator, QUALITY_INDICATOR, date_from)
      VALUES 
      (@product_type_id, @product_subtype_id, @nomap, @group_product_type_id,
	   @nomap, @nomap, @nomap, @nomap,
	   @nomap, @nomap, @nomap,
       {2}.dbo.gfn_GetAnyID('application_id'), {2}.dbo.gfn_GetAnyID('source_system_id'), {2}.dbo.gfn_GetAnyID('entity_id'), 
	   @default_date_ss, @nomap, @nomap, @nomap, @nomap,
	   'A', NULL, @date_to)
END


INSERT INTO {2}.dbo.ST_ACCOUNT
    (ACCOUNT_ID,RETAIL_ACCOUNT_NO,NOSTRO_ACCOUNT_ID,COUNTERPARTY_NAME,CUSTOMER_ID,CATEGORY_ID,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,
	PRODUCT_TYPE_BASLE2_ID,GROUP_ACCOUNT_TYPE_ID,PRINCIPAL_CURRENCY_ISO_CODE,SEQUENCE_NUMBER,STATUS_BLOCKED,STATUS_RISK,ACCOUNT_OFFICER_ID,
	ACCOUNT_OFFICER_NAME,BRANCH_CODE,BRANCH_NAME,DATE_OPENED,DATE_CLOSED,CR_INTEREST_ID,CR_DEBIT_CREDIT_INDICATOR,DR_INTEREST_ID,
	DR_DEBIT_CREDIT_INDICATOR,DR_INTEREST_LIQU_ACCT,CR_INTEREST_LIQU_ACCT,DR_INT_CAP_FREQUENCY,CR_INT_CAP_FREQUENCY,CR_INT_CAP_DAY,
	DR_INT_CAP_DAY,STATEMENT_DAY,STATEMENT_FREQUENCY,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,DISTRIBUTION_CHANNEL_ID,
	DISTRIBUTION_CHANNEL_DESCR,OVERDRAFT_AMOUNT,OVERDRAFT_START_DATE,OVERDRAFT_MATURITY_DATE,OVERDRAFT_REVIEW_DATE,INPUT_USER_ID,
	AUTH_USER_ID,PRIMARY_ACCOUNT_INDICATOR,PRIMARY_ACCOUNT_NUMBER,EMPLOYEE_INDICATOR,BOOK_CODE,ACCRUAL_METHOD,ACCRUAL_AMOUNT_METHOD,
	ACCRUAL_FREQUENCY,CLASSIFICATION_ID,NETTING_INDICATOR,SECURED_INDICATOR,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,
	ENTITY_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,
	CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,
	PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,
	GL_DR_ACCOUNT_ID,GL_DR_ACCOUNT_APPLICATION_ID,GL_DR_ACCOUNT_SOURCE_SYSTEM_ID,GL_DR_ACCOUNT_ENTITY_ID,GL_CR_ACCOUNT_ID,GL_CR_ACCOUNT_APPLICATION_ID,
	GL_CR_ACCOUNT_ENTITY_ID,GL_CR_ACCOUNT_SOURCE_SYSTEM_ID,CR_INT_APPLICATION_ID,CR_INT_SOURCE_SYSTEM_ID,CR_INT_ENTITY_ID,DR_INT_APPLICATION_ID,
	DR_INT_SOURCE_SYSTEM_ID,DR_INT_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,INP_USER_APPLICATION_ID,
	INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,NOSTRO_ACCT_APPLICATION_ID,NOSTRO_ACCT_SOURCE_SYSTEM_ID,NOSTRO_ACCT_ENTITY_ID,NETTING_AGREEMENT_ID,
	NETTING_AGMNT_APPLICATION_ID,NETTING_AGMNT_ENTITY_ID,NETTING_AGMNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_SECTION_ID,GL_ACCT_SECN_APPLICATION_ID,
	GL_ACCT_SECN_ENTITY_ID,GL_ACCT_SECN_SOURCE_SYSTEM_ID,GL_ACCT_INT_INC_ID,GL_ACCT_I_INC_APPLICATION_ID,GL_ACCT_I_INC_ENTITY_ID,
	GL_ACCT_I_INC_SOURCE_SYSTEM_ID,GL_ACCT_INT_EXP_ID,GL_ACCT_I_EXP_APPLICATION_ID,GL_ACCT_I_EXP_ENTITY_ID,GL_ACCT_I_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_EXP_ID,
	GL_ACCT_P_EXP_APPLICATION_ID,GL_ACCT_P_EXP_ENTITY_ID,GL_ACCT_P_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_INC_ID,GL_ACCT_P_INC_SOURCE_SYSTEM_ID,
	GL_ACCT_P_INC_ENTITY_ID,GL_ACCT_P_INC_APPLICATION_ID,GL_ACCT_WRITE_OFF_INC_ID,GL_WRFF_INC_APPLICATION_ID,GL_WRFF_INC_ENTITY_ID,
	GL_WRFF_INC_SOURCE_SYSTEM_ID,GL_ACCT_WRITE_OFF_EXP_ID,GL_WRFF_EXP_APPLICATION_ID,GL_WRFF_EXP_ENTITY_ID,GL_WRFF_EXP_SOURCE_SYSTEM_ID,
	SUSPENSE_INDICATOR,TRANSFER_RATE_SRC_INDICATOR,ORGANISATION_UNIT_ID,ORG_UNIT_APPLICATION_ID,ORG_UNIT_ENTITY_ID,ORG_UNIT_SOURCE_SYSTEM_ID,
	SOURCE_DATE,WRITE_OFF_AMOUNT,PROVISION_AMOUNT,PROVISION_ACCOUNT_ID,PROV_ACCT_APPLICATION_ID,PROV_ACCT_ENTITY_ID,PROV_ACCT_SOURCE_SYSTEM_ID,
	DATE_SINCE_PAST_DUE,COUNTRY_OF_RISK_ISO_CODE,FUNDING_CURRENCY_ISO_CODE,DEFAULT_INDICATOR,DEFAULT_CONTAGION_INDICATOR,DEAL_BOOK_ID,
	EXTERNAL_INDICATOR,STRUCTURED_CONTRACT,LOCATION_NAME,SCORING_POOL_ID,SCR_POOL_APPLICATION_ID,SCR_POOL_ENTITY_ID,SCR_POOL_SOURCE_SYSTEM_ID,
	COLLECTION_STATUS_INDICATOR,RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,QUALITY_INDICATOR,PROVISION_CURRENCY_ISO_CODE,WRITE_OFF_CURRENCY_ISO_CODE,
	OVERDRAFT_CURRENCY_ISO_CODE,OFSA_PRODUCT_CODE,COMMITMENT_INDICATOR,DATE_FROM
	)
	VALUES ('FA-' + @inv_stev,@nomap,@nomap,@nomap,@id_customer_dom,@nomap,@product_type_id,@product_subtype_id,@nomap,'C',
		@id_val_dom,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@default_date_ss,@default_date_ss,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,NULL,@default_date_ss,
		@default_date_ss,@default_date_ss,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		'N',@nomap,@status_akt,{2}.dbo.gfn_GetAnyID('application_id'),
		{2}.dbo.gfn_GetAnyID('source_system_id'),{2}.dbo.gfn_GetAnyID('entity_id'),@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,{2}.dbo.gfn_GetAnyID('customer_application_id'),
		{2}.dbo.gfn_GetAnyID('customer_entity_id'),{2}.dbo.gfn_GetAnyID('customer_source_system_id'),
		{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),{2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),
		{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@default_date_ss,NULL,
		NULL,@nomap,@nomap,@nomap,@nomap,@date_to,@drzava,@id_val_dom,@nomap,@nomap,
		@company_id + '_B','*nomap*','*nomap*',@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		@nomap,@nomap,NULL,'*nomap*',@nomap,@nomap,@nomap,@nomap,@date_to)

      --account balance
    INSERT INTO {2}.dbo.ST_ACCOUNT_BALANCE
    (ACCOUNT_ID,CUSTOMER_ID,LAST_MOVEMENT_DATE,LAST_STATEMENT_DATE,CLEARED_BALANCE,PROFIT_CENTRE_CODE,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,
	CATEGORY_ID,BRANCH_CODE,COST_CENTRE_CODE,ACCOUNT_OFFICER_ID,AVAILABLE_BALANCE,GL_BALANCE,OVERDUE_AMOUNT,NO_OF_DAYS_OVERDUE,
	TURNOVER_CREDIT,TURNOVER_DEBIT,TOTAL_HELD_ITEMS,ACCOUNT_APPLICATION_ID,ACCOUNT_ENTITY_ID,ACCOUNT_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,
	ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,CATEGORY_APPLICATION_ID,
	CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,COST_CNT_APPLICATION_ID,COST_CNT_ENTITY_ID,COST_CNT_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,
	CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,
	PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,RWA_BALANCE,RWA_1_ON_BALANCE,RWA_2_ON_BALANCE,APPLICATION_ID,ENTITY_ID,SOURCE_SYSTEM_ID,
	DATE_FROM,SOURCE_DATE,QUALITY_INDICATOR,RWA_1_OFF_BALANCE,RWA_2_OFF_BALANCE,PRINCIPAL_CURRENCY_ISO_CODE,AVAILABLE_BALANCE_CURR_CODE,
	CLEARED_BALANCE_CURRENCY_CODE,GL_BALANCE_CURRENCY_ISO_CODE,DEPOSIT_INSURANCE,STANDARD_RISK_COSTS,EFFECTIVE_DATE
    )
       VALUES  ('FA-' + @inv_stev,@id_customer_dom,@default_date_ss,@default_date_ss,IsNull(-@ex_present_val, 0),@nomap,@product_type_id, @product_subtype_id,
		@nomap,@nomap,@nomap,@nomap,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2}.dbo.gfn_GetAnyID('account_application_id'),
		{2}.dbo.gfn_GetAnyID('account_entity_id'),{2}.dbo.gfn_GetAnyID('account_source_system_id'),@nomap,
		@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
		{2}.dbo.gfn_GetAnyID('customer_application_id'),{2}.dbo.gfn_GetAnyID('customer_entity_id'),
		{2}.dbo.gfn_GetAnyID('customer_source_system_id'),{2}.dbo.gfn_GetAnyID('prod_tp_application_id'),
		{2}.dbo.gfn_GetAnyID('prod_tp_entity_id'),{2}.dbo.gfn_GetAnyID('prod_tp_source_system_id'),
		@nomap,@nomap,@nomap,NULL,NULL,NULL,{2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('entity_id'),
		{2}.dbo.gfn_GetAnyID('source_system_id'),@default_date_ss,@default_date_ss,NULL,NULL,NULL,@nomap,@nomap,
		@id_val_dom,@nomap,NULL,NULL,@date_to)
	
--insert into ST_CUSTOMER_COUNTERPARTY_ROLE
   INSERT INTO {2}.dbo.[st_customer_counterparty_role]
   (CUSTOMER_ID,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,CUSTOMER_ROLE_CODE,STATUS_INDICATOR,
    DATE_FROM,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,
    COUNTERP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,EFFECTIVE_DATE)

   VALUES(@id_customer_dom,'FA-' + @inv_stev,'AC',{2}.dbo.gfn_GetAnyID('application_id'),{2}.dbo.gfn_GetAnyID('source_system_id'),
	  {2}.dbo.gfn_GetAnyID('entity_id'),@nomap, @status_akt,
	  @default_date_ss,@default_date_ss,
	  {2}.dbo.gfn_GetAnyID('customer_application_id'),{2}.dbo.gfn_GetAnyID('customer_entity_id'),
	  {2}.dbo.gfn_GetAnyID('customer_source_system_id'),{2}.dbo.gfn_GetAnyID('counterp_application_id'),
	  {2}.dbo.gfn_GetAnyID('counterp_entity_id'),{2}.dbo.gfn_GetAnyID('counterp_source_system_id'),NULL,@date_to)
      
FETCH NEXT FROM FA_CRZ INTO @inv_stev, @ex_present_val, @id_knjizbe, @product_type_id, @product_subtype_id, @group_product_type_id, @id_vrste, @status_akt
END
CLOSE FA_CRZ
DEALLOCATE FA_CRZ

---------------------------------------------------------------------------------------END OF FIXED ASSETS-------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------GL------------------------------------------------------------------------------------------------------------------------------------
--ST_PRODUCT_TYPE_SUBTYPE
INSERT INTO {2}.dbo.st_product_type_subtype
(PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, PRODUCT_TYPE_SUBTYPE_DESCR,GROUP_PRODUCT_TYPE_ID, GROUP_PRODUCT_TYPE_DESCRIPTION, PRODUCT_TYPE_BASLE2_ID,
PRODUCT_TYPE_B2_DESCR, ON_BALANCE_INDICATOR, LETTER_OF_CREDIT_INDICATOR, NOTE_ISSUANCE_INDICATOR, REVOLVE_UNDERWRITE_INDICATOR, 
APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, SOURCE_DATE, TRANSACTION_TYPE_ID, TXN_TYPE_APPLICATION_ID,
TXN_TYPE_SOURCE_SYSTEM_ID, TXN_TYPE_ENTITY_ID, STATUS_INDICATOR, QUALITY_INDICATOR, DATE_FROM)
SELECT
'GL-' + konto, 'GL', @nomap, {2}.dbo.gfn_GetGlGpc(konto,@company_id),
@nomap, @nomap, @nomap, @nomap, @nomap, @nomap, @nomap,
@application_id, @source_system_id, @company_id, 
@default_date_ss, @nomap, @nomap, @nomap, @nomap,
'A', NULL, @date_to
FROM {1}.dbo.oc_gl
WHERE id_oc_report = @id_oc_report
AND konto IN (SELECT konto FROM {2}.dbo.b2glaccount)
GROUP BY konto

--ST_GL_BALANCE, ST_ACCOUNT, ST_ACCOUNT_BALANCE
INSERT INTO {2}.dbo.ST_ACCOUNT
(ACCOUNT_ID,RETAIL_ACCOUNT_NO,NOSTRO_ACCOUNT_ID,COUNTERPARTY_NAME,CUSTOMER_ID,CATEGORY_ID,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,
PRODUCT_TYPE_BASLE2_ID,GROUP_ACCOUNT_TYPE_ID,PRINCIPAL_CURRENCY_ISO_CODE,SEQUENCE_NUMBER,STATUS_BLOCKED,STATUS_RISK,ACCOUNT_OFFICER_ID,
ACCOUNT_OFFICER_NAME,BRANCH_CODE,BRANCH_NAME,DATE_OPENED,DATE_CLOSED,CR_INTEREST_ID,CR_DEBIT_CREDIT_INDICATOR,DR_INTEREST_ID,
DR_DEBIT_CREDIT_INDICATOR,DR_INTEREST_LIQU_ACCT,CR_INTEREST_LIQU_ACCT,DR_INT_CAP_FREQUENCY,CR_INT_CAP_FREQUENCY,CR_INT_CAP_DAY,
DR_INT_CAP_DAY,STATEMENT_DAY,STATEMENT_FREQUENCY,PROFIT_CENTRE_CODE,PROFIT_CENTRE_DESCRIPTION,DISTRIBUTION_CHANNEL_ID,
DISTRIBUTION_CHANNEL_DESCR,OVERDRAFT_AMOUNT,OVERDRAFT_START_DATE,OVERDRAFT_MATURITY_DATE,OVERDRAFT_REVIEW_DATE,INPUT_USER_ID,
AUTH_USER_ID,PRIMARY_ACCOUNT_INDICATOR,PRIMARY_ACCOUNT_NUMBER,EMPLOYEE_INDICATOR,BOOK_CODE,ACCRUAL_METHOD,ACCRUAL_AMOUNT_METHOD,
ACCRUAL_FREQUENCY,CLASSIFICATION_ID,NETTING_INDICATOR,SECURED_INDICATOR,STATUS_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,
ENTITY_ID,ACCT_OFF_APPLICATION_ID,ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,
CATEGORY_APPLICATION_ID,CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,
PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,
GL_DR_ACCOUNT_ID,GL_DR_ACCOUNT_APPLICATION_ID,GL_DR_ACCOUNT_SOURCE_SYSTEM_ID,GL_DR_ACCOUNT_ENTITY_ID,GL_CR_ACCOUNT_ID,GL_CR_ACCOUNT_APPLICATION_ID,
GL_CR_ACCOUNT_ENTITY_ID,GL_CR_ACCOUNT_SOURCE_SYSTEM_ID,CR_INT_APPLICATION_ID,CR_INT_SOURCE_SYSTEM_ID,CR_INT_ENTITY_ID,DR_INT_APPLICATION_ID,
DR_INT_SOURCE_SYSTEM_ID,DR_INT_ENTITY_ID,AUTH_USER_APPLICATION_ID,AUTH_USER_SOURCE_SYSTEM_ID,AUTH_USER_ENTITY_ID,INP_USER_APPLICATION_ID,
INP_USER_SOURCE_SYSTEM_ID,INP_USER_ENTITY_ID,NOSTRO_ACCT_APPLICATION_ID,NOSTRO_ACCT_SOURCE_SYSTEM_ID,NOSTRO_ACCT_ENTITY_ID,NETTING_AGREEMENT_ID,
NETTING_AGMNT_APPLICATION_ID,NETTING_AGMNT_ENTITY_ID,NETTING_AGMNT_SOURCE_SYSTEM_ID,GL_ACCOUNT_SECTION_ID,GL_ACCT_SECN_APPLICATION_ID,
GL_ACCT_SECN_ENTITY_ID,GL_ACCT_SECN_SOURCE_SYSTEM_ID,GL_ACCT_INT_INC_ID,GL_ACCT_I_INC_APPLICATION_ID,GL_ACCT_I_INC_ENTITY_ID,
GL_ACCT_I_INC_SOURCE_SYSTEM_ID,GL_ACCT_INT_EXP_ID,GL_ACCT_I_EXP_APPLICATION_ID,GL_ACCT_I_EXP_ENTITY_ID,GL_ACCT_I_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_EXP_ID,
GL_ACCT_P_EXP_APPLICATION_ID,GL_ACCT_P_EXP_ENTITY_ID,GL_ACCT_P_EXP_SOURCE_SYSTEM_ID,GL_ACCT_PROVISION_INC_ID,GL_ACCT_P_INC_SOURCE_SYSTEM_ID,
GL_ACCT_P_INC_ENTITY_ID,GL_ACCT_P_INC_APPLICATION_ID,GL_ACCT_WRITE_OFF_INC_ID,GL_WRFF_INC_APPLICATION_ID,GL_WRFF_INC_ENTITY_ID,
GL_WRFF_INC_SOURCE_SYSTEM_ID,GL_ACCT_WRITE_OFF_EXP_ID,GL_WRFF_EXP_APPLICATION_ID,GL_WRFF_EXP_ENTITY_ID,GL_WRFF_EXP_SOURCE_SYSTEM_ID,
SUSPENSE_INDICATOR,TRANSFER_RATE_SRC_INDICATOR,ORGANISATION_UNIT_ID,ORG_UNIT_APPLICATION_ID,ORG_UNIT_ENTITY_ID,ORG_UNIT_SOURCE_SYSTEM_ID,
SOURCE_DATE,WRITE_OFF_AMOUNT,PROVISION_AMOUNT,PROVISION_ACCOUNT_ID,PROV_ACCT_APPLICATION_ID,PROV_ACCT_ENTITY_ID,PROV_ACCT_SOURCE_SYSTEM_ID,
DATE_SINCE_PAST_DUE,COUNTRY_OF_RISK_ISO_CODE,FUNDING_CURRENCY_ISO_CODE,DEFAULT_INDICATOR,DEFAULT_CONTAGION_INDICATOR,DEAL_BOOK_ID,
EXTERNAL_INDICATOR,STRUCTURED_CONTRACT,LOCATION_NAME,SCORING_POOL_ID,SCR_POOL_APPLICATION_ID,SCR_POOL_ENTITY_ID,SCR_POOL_SOURCE_SYSTEM_ID,
COLLECTION_STATUS_INDICATOR,RETAIL_NONRETAIL_INDICATOR,GL_CRITERIA_CODE,QUALITY_INDICATOR,PROVISION_CURRENCY_ISO_CODE,WRITE_OFF_CURRENCY_ISO_CODE,
OVERDRAFT_CURRENCY_ISO_CODE,OFSA_PRODUCT_CODE,COMMITMENT_INDICATOR,DATE_FROM)
SELECT gl.konto,@nomap,@nomap,@nomap,
case when bgp.customer_id is null or rtrim(ltrim(bgp.customer_id)) = '' then @id_customer_dom else bgp.customer_id end,
--@id_customer_dom,
@nomap,'GL-' + gl.konto,'GL',
@nomap,'G',@id_val_dom,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@default_date_ss,@default_date_ss,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,NULL,@default_date_ss,@default_date_ss,@default_date_ss,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,'N',@nomap,'A',@application_id,@source_system_id,
@company_id,@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@application_id,@company_id,@source_system_id,
@application_id,@company_id,@source_system_id,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@default_date_ss,NULL,NULL,@nomap,@nomap,@nomap,@nomap,
@date_to,@drzava,@id_val_dom,@nomap,@nomap,@company_id + '_B',
'*nomap*','*nomap*',@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,NULL,'*nomap*',@nomap,
@nomap,@nomap,@nomap,@date_to
FROM {1}.dbo.oc_gl gl
INNER JOIN {2}.dbo.b2glaccount bgp ON gl.konto = bgp.konto
WHERE gl.id_oc_report = @id_oc_report
AND (RTRIM(LTRIM(table_name)) = 'ACCOUNT_BALANCE' OR RTRIM(LTRIM(table_name)) = 'GL_BALANCE')
GROUP BY gl.konto, bgp.customer_id

--ZA DOLO»ENE KONTE GREJO ZAPISI V ST_GL_BALANCE (tudi v tabelo ST_ACCOUNT)
INSERT INTO {2}.dbo.ST_GL_BALANCE
(GL_ACCOUNT_ID, CUSTOMER_ID, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID,GL_BALANCE, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, 
CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID, PROD_TP_ENTITY_ID, PROD_TP_SOURCE_SYSTEM_ID, 
GL_ACCOUNT_APPLICATION_ID, GL_ACCOUNT_ENTITY_ID,GL_ACCOUNT_SOURCE_SYSTEM_ID, GL_BALANCE_CURRENCY_ISO_CODE, EFFECTIVE_DATE,
LAST_MOVEMENT_DATE, PRINCIPAL_CURRENCY_ISO_CODE, PROFIT_CENTRE_CODE,CATEGORY_ID, BRANCH_CODE, COST_CENTRE_CODE, ACCOUNT_OFFICER_ID, RWA_BALANCE, 
DATE_FROM, SOURCE_DATE, PROF_CNT_APPLICATION_ID, PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID, CATEGORY_APPLICATION_ID, CATEGORY_ENTITY_ID, 
CATEGORY_SOURCE_SYSTEM_ID, BRANCH_APPLICATION_ID, BRANCH_ENTITY_ID, BRANCH_SOURCE_SYSTEM_ID, COST_CNT_APPLICATION_ID, COST_CNT_ENTITY_ID, 
COST_CNT_SOURCE_SYSTEM_ID, ACCT_OFF_APPLICATION_ID, ACCT_OFF_ENTITY_ID, ACCT_OFF_SOURCE_SYSTEM_ID, QUALITY_INDICATOR)
SELECT gl.konto, 
case when bgp.customer_id is null or rtrim(ltrim(bgp.customer_id)) = '' then @id_customer_dom else bgp.customer_id end,
--@id_customer_dom,
'GL-' + gl.konto, 'GL',
sum((gl.sum_kredit_dom - gl.sum_debit_dom) * case when bgp.saldo_debit = 1 then 1 else (-1) end), 
@application_id, @source_system_id, @company_id, @application_id, @company_id, @source_system_id, 
@application_id, @company_id, @source_system_id, @application_id, @company_id, @source_system_id, @id_val_dom, @date_to,
@default_date_ss, @nomap, @nomap, @nomap, @nomap, @nomap, @nomap, NULL,
@default_date_ss, @default_date_ss, @nomap, @nomap, @nomap, @nomap,
@nomap,@nomap, @nomap, @nomap, @nomap, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, NULL
FROM {1}.dbo.oc_gl gl
INNER JOIN {2}.dbo.b2glaccount bgp ON gl.konto = bgp.konto
WHERE gl.id_oc_report = @id_oc_report
AND RTRIM(LTRIM(table_name)) = 'GL_BALANCE'
GROUP BY gl.konto, bgp.customer_id

--ZA DOLO»ENE KONTE GREJO ZAPISI V ST_ACCOUNT_BALANCE (tudi v tabelo ST_ACCOUNT)
INSERT INTO {2}.dbo.ST_ACCOUNT_BALANCE
(ACCOUNT_ID,CUSTOMER_ID,LAST_MOVEMENT_DATE,LAST_STATEMENT_DATE,CLEARED_BALANCE,PROFIT_CENTRE_CODE,PRODUCT_TYPE_ID,PRODUCT_SUBTYPE_ID,
CATEGORY_ID,BRANCH_CODE,COST_CENTRE_CODE,ACCOUNT_OFFICER_ID,AVAILABLE_BALANCE,GL_BALANCE,OVERDUE_AMOUNT,NO_OF_DAYS_OVERDUE,
TURNOVER_CREDIT,TURNOVER_DEBIT,TOTAL_HELD_ITEMS,ACCOUNT_APPLICATION_ID,ACCOUNT_ENTITY_ID,ACCOUNT_SOURCE_SYSTEM_ID,ACCT_OFF_APPLICATION_ID,
ACCT_OFF_ENTITY_ID,ACCT_OFF_SOURCE_SYSTEM_ID,BRANCH_APPLICATION_ID,BRANCH_ENTITY_ID,BRANCH_SOURCE_SYSTEM_ID,CATEGORY_APPLICATION_ID,
CATEGORY_ENTITY_ID,CATEGORY_SOURCE_SYSTEM_ID,COST_CNT_APPLICATION_ID,COST_CNT_ENTITY_ID,COST_CNT_SOURCE_SYSTEM_ID,CUSTOMER_APPLICATION_ID,
CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,PROD_TP_APPLICATION_ID,PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID,PROF_CNT_APPLICATION_ID,
PROF_CNT_ENTITY_ID,PROF_CNT_SOURCE_SYSTEM_ID,RWA_BALANCE,RWA_1_ON_BALANCE,RWA_2_ON_BALANCE,APPLICATION_ID,ENTITY_ID,SOURCE_SYSTEM_ID,
DATE_FROM,SOURCE_DATE,QUALITY_INDICATOR,RWA_1_OFF_BALANCE,RWA_2_OFF_BALANCE,PRINCIPAL_CURRENCY_ISO_CODE,AVAILABLE_BALANCE_CURR_CODE,
CLEARED_BALANCE_CURRENCY_CODE,GL_BALANCE_CURRENCY_ISO_CODE,DEPOSIT_INSURANCE,STANDARD_RISK_COSTS,EFFECTIVE_DATE)
SELECT gl.konto, 
case when bgp.customer_id is null or rtrim(ltrim(bgp.customer_id)) = '' then @id_customer_dom else bgp.customer_id end,
--@id_customer_dom,
@default_date_ss, @default_date_ss, 
sum((gl.sum_kredit_dom - gl.sum_debit_dom) * case when bgp.saldo_debit = 1 then 1 else (-1) end), 
@nomap, 'GL-' + gl.konto,'GL',
@nomap, @nomap, @nomap, @nomap, NULL, NULL, NULL, NULL,
NULL,NULL,NULL,@application_id,@company_id,@source_system_id,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@nomap,
@nomap,@nomap,@nomap,@nomap,@nomap,@application_id,
@company_id,@source_system_id,@application_id,@company_id,@source_system_id,@nomap,
@nomap,@nomap,NULL,NULL,NULL,@application_id,@company_id,@source_system_id,
@default_date_ss,@default_date_ss,NULL,NULL,NULL,@nomap,@nomap,
@id_val_dom,@nomap,NULL,NULL,@date_to
FROM {1}.dbo.oc_gl gl
INNER JOIN {2}.dbo.b2glaccount bgp ON gl.konto = bgp.konto
WHERE gl.id_oc_report = @id_oc_report
AND RTRIM(LTRIM(table_name)) = 'ACCOUNT_BALANCE'
GROUP BY gl.konto, bgp.customer_id

--ST_EQUITY_EXPOSURE, ST_SEC_TRADING_POSITION (zaenkrat imajo to le v RLRS, RRRS, RLBH)
INSERT INTO {2}.dbo.ST_EQUITY_EXPOSURE
(EQUITY_EXPOSURE_ID, EXCEPTION_INDICATOR, DEDUCTION_INDICATOR, MATERIALITY_LEVEL_INDICATOR, SOURCE_DATE, 
 ENTITY_ID, SOURCE_SYSTEM_ID, APPLICATION_ID, EQUITY_EXPOSURE_RATE, GRANDFATHERING_RATE, GRANDFATHERING_AMOUNT, 
 STRATEGIC_INDICATOR, EXCHANGE_INDICATOR, CATEGORY_ID, CATEGORY_APPLICATION_ID, CATEGORY_ENTITY_ID, CATEGORY_SOURCE_SYSTEM_ID, 
 GL_ACCOUNT_ID, GL_ACCOUNT_APPLICATION_ID, GL_ACCOUNT_ENTITY_ID, GL_ACCOUNT_SOURCE_SYSTEM_ID, EQUITY_EXPOSURE_TYPE_ID,
 EQT_EXP_TP_APPLICATION_ID, EQT_EXP_TP_ENTITY_ID, EQT_EXP_TP_SOURCE_SYSTEM_ID, QUALITY_INDICATOR, COUNTERPARTY_NAME, BRANCH_CODE,
 BRANCH_APPLICATION_ID, BRANCH_ENTITY_ID, BRANCH_SOURCE_SYSTEM_ID, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, PROD_TP_APPLICATION_ID,
 PROD_TP_ENTITY_ID, PROD_TP_SOURCE_SYSTEM_ID, START_DATE, END_DATE, DISCOUNT_AMOUNT, POSITION_CURRENCY_ISO_CODE, SENIORITY_INDICATOR, 
 WRITE_OFF_AMOUNT, PROVISION_ACCOUNT_ID, PROV_ACCT_APPLICATION_ID, PROV_ACCT_ENTITY_ID, PROV_ACCT_SOURCE_SYSTEM_ID, DATE_SINCE_PAST_DUE,
 COUNTRY_OF_RISK_ISO_CODE, DEFAULT_INDICATOR, DEFAULT_CONTAGION_INDICATOR, DEAL_BOOK_ID, EXTERNAL_INDICATOR, STRUCTURED_CONTRACT, 
 LOCATION_NAME, GL_CRITERIA_CODE, CUSTOMER_ID, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, GRANDFATHERING_CURRENCY_CODE, 
 PRODUCT_TYPE_BASLE2_ID, OFSA_PRODUCT_CODE, WRITE_OFF_CURRENCY_ISO_CODE, STATUS_INDICATOR, DISCOUNT_CURRENCY_ISO_CODE, DATE_FROM)
SELECT gl.konto, @nomap, 'N', @nomap, @default_date_ss, 
@entity_id, @source_system_id, @application_id, null, 0, null,
'N', 'N', @nomap, @nomap, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, 'C',
'HO_INITIAL', 'HO', 'HO_INITIAL', null, @nomap, @nomap,
@nomap, @nomap, @nomap, 'GL-' + gl.konto, 'GL', @application_id, 
@entity_id, @source_system_id, @default_date_ss, @default_date_ss, null, @nomap, '1',
null, @nomap, @nomap, @nomap, @nomap, @default_date_ss,
@drzava, @nomap, @nomap, @company_id + '_B', '*nomap*', '*nomap*',
@nomap, @nomap, case when bgp.customer_id is null or rtrim(ltrim(bgp.customer_id)) = '' then @id_customer_dom else bgp.customer_id end,
@application_id, @entity_id, @source_system_id, '*n.a.*',
@nomap, @nomap, @nomap, 'A', @nomap, @date_to
FROM {1}.dbo.oc_gl gl
INNER JOIN {2}.dbo.b2glaccount bgp ON gl.konto = bgp.konto
WHERE gl.id_oc_report = @id_oc_report
AND RTRIM(LTRIM(table_name)) = 'EQUITY_EXPOSURE'
GROUP BY gl.konto, bgp.customer_id

INSERT INTO {2}.dbo.ST_SEC_TRADING_POSITION
(SEC_MASTER_ID, CUSTOMER_ID, LAST_TRADE_DATE, SEC_PORTFOLIO_ID, SEC_DEPOT_ID, SECURITY_CURRENCY_ISO_CODE, PROFIT_CENTRE_CODE,
 PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, CATEGORY_ID, BRANCH_CODE, ACCOUNT_OFFICER_ID, CURRENT_POSITION, CLEARED_POSITION, MARKET_PRICE, 
 MARKET_PRICE_CURRENCY_ISO_CODE, CURRENT_AVERAGE_PRICE, DISCOUNT_ACCRUED, COUPON_ACCRUED, CURRENT_COUPON, REVAL_UNREAL_PL, 
 RWA_BALANCE, REALLOWANCE_RECEIVED, HEDGED_AMOUNT, POSITION_NOMINAL, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID,
 DATE_FROM, SOURCE_DATE, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, SEC_PRTF_APPLICATION_ID, SEC_PRTF_ENTITY_ID,
 SEC_PRTF_SOURCE_SYSTEM_ID, SEC_DEPOT_APPLICATION_ID, SEC_DEPOT_ENTITY_ID, SEC_DEPOT_SOURCE_SYSTEM_ID, PROF_CNT_APPLICATION_ID,
 PROF_CNT_ENTITY_ID, PROF_CNT_SOURCE_SYSTEM_ID, CATEGORY_APPLICATION_ID, CATEGORY_ENTITY_ID, CATEGORY_SOURCE_SYSTEM_ID,
 BRANCH_APPLICATION_ID, BRANCH_ENTITY_ID, BRANCH_SOURCE_SYSTEM_ID, ACCT_OFF_APPLICATION_ID, ACCT_OFF_ENTITY_ID, ACCT_OFF_SOURCE_SYSTEM_ID,
 PROD_TP_APPLICATION_ID, PROD_TP_ENTITY_ID, PROD_TP_SOURCE_SYSTEM_ID, SEC_MST_APPLICATION_ID, SEC_MST_ENTITY_ID, SEC_MST_SOURCE_SYSTEM_ID,
 QUALITY_INDICATOR, RWA_1_BALANCE, RWA_2_BALANCE, LONG_SHORT_INDICATOR, PROP_BUSINESS_DEAL_INDICATOR, TRANSFER_RATE_SRC_INDICATOR, 
 REFERENCE_RATE_SRC_INDICATOR, REALIZED_PL, GL_ACCT_INT_INC_EXP_ID, GL_ACCT_TRADING_INCOME_ID, GL_ACCT_REAL_P_L_ID, GL_ACCT_R_P_L_APPLICATION_ID,
 GL_ACCT_R_P_L_ENTITY_ID, GL_ACCT_R_P_L_SOURCE_SYSTEM_ID, GL_ACCT_UNREAL_P_L_ID, GL_ACCT_U_P_L_APPLICATION_ID, GL_ACCT_U_P_L_ENTITY_ID,
 GL_ACCT_U_P_L_SOURCE_SYSTEM_ID, GL_ACCT_II_XP_APPLICATION_ID, GL_ACCT_II_XP_ENTITY_ID, GL_ACCT_II_XP_SOURCE_SYSTEM_ID, 
 GL_ACCT_T_INC_APPLICATION_ID, GL_ACCT_T_INC_ENTITY_ID, GL_ACCT_T_INC_SOURCE_SYSTEM_ID, POSITION_CURRENCY_ISO_CODE, EQUITY_EXPOSURE_ID, 
 EQT_EXP_APPLICATION_ID, EQT_EXP_ENTITY_ID, EQT_EXP_SOURCE_SYSTEM_ID, PROVISION_AMOUNT, PROVISION_CURRENCY_ISO_CODE, HEDGED_CURRENCY_ISO_CODE, 
 EFFECTIVE_DATE)
SELECT '*n.a.*', case when bgp.customer_id is null or rtrim(ltrim(bgp.customer_id)) = '' then @id_customer_dom else bgp.customer_id end, 
@default_date_ss, '*n.a.*', @nomap, @id_val_dom, @nomap,
'GL-' + gl.konto, 'GL', @nomap, @nomap, @nomap, null, null, sum((gl.sum_kredit_dom - gl.sum_debit_dom) * case when bgp.saldo_debit = 1 then 1 else (-1) end),
@id_val_dom, null, null, null, null, null, 
null, null, sum((gl.sum_kredit_dom - gl.sum_debit_dom) * case when bgp.saldo_debit = 1 then 1 else (-1) end), null, @application_id, @source_system_id, @entity_id, 
@default_date_ss, @default_date_ss, @application_id, @entity_id, @source_system_id, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, @nomap, @nomap,
@application_id, @entity_id, @source_system_id, @nomap, @nomap, @nomap, 
null, null, null, 'L', @nomap, @nomap, 
@nomap, null, @nomap, @nomap, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, @nomap,
@nomap, @nomap, @nomap, @nomap, 
@nomap, @nomap, @nomap, @nomap, gl.konto,
@application_id, @entity_id, @source_system_id, 0, @id_val_dom, @id_val_dom,
@date_to
FROM {1}.dbo.oc_gl gl
INNER JOIN {2}.dbo.b2glaccount bgp ON gl.konto = bgp.konto
WHERE gl.id_oc_report = @id_oc_report
AND RTRIM(LTRIM(table_name)) = 'EQUITY_EXPOSURE'
GROUP BY gl.konto, bgp.customer_id


INSERT INTO {2}.dbo.[st_customer_counterparty_role]
(CUSTOMER_ID,COUNTERPARTY_ID,COUNTERPARTY_INDICATOR,APPLICATION_ID,SOURCE_SYSTEM_ID,ENTITY_ID,CUSTOMER_ROLE_CODE,STATUS_INDICATOR,
DATE_FROM,SOURCE_DATE,CUSTOMER_APPLICATION_ID,CUSTOMER_ENTITY_ID,CUSTOMER_SOURCE_SYSTEM_ID,COUNTERP_APPLICATION_ID,COUNTERP_ENTITY_ID,
COUNTERP_SOURCE_SYSTEM_ID,QUALITY_INDICATOR,EFFECTIVE_DATE)
SELECT 
case when bgp.customer_id is null or rtrim(ltrim(bgp.customer_id)) = '' then @id_customer_dom else bgp.customer_id end,
gl.konto, case when RTRIM(LTRIM(table_name)) = 'ACCOUNT_BALANCE' OR RTRIM(LTRIM(table_name)) = 'GL_BALANCE' then 'A' when RTRIM(LTRIM(table_name)) = 'EQUITY_EXPOSURE' then 'EE' end, 
@application_id, @source_system_id, @company_id, 
case when RTRIM(LTRIM(table_name)) = 'ACCOUNT_BALANCE' OR RTRIM(LTRIM(table_name)) = 'GL_BALANCE' then @nomap when RTRIM(LTRIM(table_name)) = 'EQUITY_EXPOSURE' then '4' end,
'A', @default_date_ss, @default_date_ss,
@application_id, @company_id, @source_system_id,@application_id, @company_id, @source_system_id, NULL, @date_to
FROM {1}.dbo.oc_gl gl
INNER JOIN {2}.dbo.b2glaccount bgp ON gl.konto = bgp.konto
WHERE gl.id_oc_report = @id_oc_report
GROUP BY gl.konto, bgp.table_name, bgp.customer_id
       Óê  -------------------------------------------------------------------------------
-- This procedure transfers data for Marker Risk
--
-- History
-- 15.04.2007 MatjazB; Task ID 5067 - Created
-- 24.04.2007 MatjazB; Task ID 5067 - minor fix (cosmetic - removed some comment lines)
-- 10.05.2007 MatjazB; Task ID 5067 - Add script for Assets (account table) and fix some where clouses
-- 12.06.2007 MatjazB; Task ID 5067 - change filter for Retail and Non-retail aggregate and OUTSTANDING <> 0 (table Loandepo)
-- 14.06.2007 MatjazB; Task ID 5067 - add case in MATURITY_DATE and add field FIXING_NEXT_DATE (table Loandepo)
-- 26.06.2007 MatjazB; Task ID 5067 - change filling table mr_account, change calculating xchange for non-retail
--				and deposit (kred_pog), add case in MATURITY_DATE for retail
-- 03.07.2007 MatjazB; Task ID 5067 - add script for Provisions Retail
-- 04.07.2007 MatjazB; Task ID 5067 - change filter for Provisions (id_dogodka = 'TR_PROV' --> ..konti_nl.konto_id IN ('#TRP')
-- 16.07.2007 MatjazB; Task ID 5067 - fix MATURITY_DATE
-- 20.07.2007 MatjazB; Task ID 5067  fix FIXING_NEXT_DATE and other small changes
-- 30.07.2007 Matjaz; Task ID 5067 - Removed PERIODICITY from grouping for Retail - constant N is now used
-- 02.08.2007 Matjaz; Task ID 5067 - 'unknown aggregate' is inserted into COUNTERPARTY_CODE for Retail based on mail from RLBH 30.07.2007
-- 27.08.2007 MatjazB; Task ID 5067 - change filter for Retail and Non-retail (p_eval), added field FIRST_AMORT_DATE,
--				multiply NOMINAL with -1 in pasiva (TYPE = TM0104) and added min_dat_zap, UPPER() for id_val
-- 13.09.2007 MatjazB; Task ID 5067 - added SUBSTRING in filter for Retail and Non-retail
-- 17.09.2007 MatjazB; Task ID 5067 - change value of COUNTERPARTY_CODE from 'XXXX' to 'XXX', if RATE = 'FIX' then FIXING_NEXT_DATE = null,
--				fix min_dat_zap in pasiva, filter for closed contract in pasiva (aneks <> 'N')
-- 25.09.2007 MatjazB; Task ID 5067 - added GROUP BY in account table, add case in MATURITY_DATE for pasiva, fill FIXING_PERIODICITY in pasiva from cursor o2
--				added CASE for multiply BALANCE in table ACCOUNT
-- 27.09.2007 MatjazB; Maintenance ID 11094 - CASE for id_val = 'KM', added 'P' for type FL0100 in field CONTRACT_REFERENCE ('RLxx_P' + id_pog)
-- 14.11.2007 MatjazB; Maintenance ID 11671 - change FIXING_NEXT_DATE (FL0100 and FL01001), add field FIXING_RULE with default B (LO0001 and FL01001 - retail provisions),
--				combine  CONTRACT_REFERENCE -> 'RLxx_' + bucket +'_'+ currency +'_'+ rate [F or D]  (LO0001),
--				combine  CONTRACT_REFERENCE -> 'RLxx_P' + bucket +'_'+ rate [F or D] (FL01001 - retail provisions),
--				'unknown aggregate' is inserted into COUNTERPARTY_CODE (ACCOUNT assets- IS01010_OL)
-- 14.11.2007 MatjazB; Maintenance ID 11860 - change FIXING_NEXT_DATE (TM0104), change MATURITY_DATE (FL0100, FL01001 and TM0104), remove field ACCRUALS - otherwise fill with NULL (TM0104)
--				multiply OUTSTANDING with -1 in (TM0104), remove field FIXING_CURRENT_VALUE - otherwise fill with NULL(all ACCOUNT), add HAVING for BALANCE <> 0 (all ACCOUNT),
--				remove ISNULL for ACCRUALS (ACCOUNT)
-- 14.11.2007 MatjazB; added 'AP' in field CONTRACT_REFERENCE ['RLxx_AP' + id_pog] (FL01001), 'A' in field CONTRACT_REFERENCE ['RLxx_A' + id_pog] (FL0100),
--				'P' in field CONTRACT_REFERENCE ['RLxx_P' + id_pog] (TM0104) because CONTRACT_REFERENCE must be unique ID,
--				change provisons (CURRENCY = @dom_val and all values are in dom_val)
-- 14.11.2007 MatjazB; Maintenance ID 11875; change CONTRACT_REFERENCE (new XSD schema - replace / with -) (FL0100, FL01001 and TM0104)
-- 30.11.2007 MatjazB; Maintenance ID 12253; change some INNER JOIN to LEFT JOIN (TM0104), 'unknown aggregate' is inserted into COUNTERPARTY_CODE (ACCOUNT assets- IS01010_OWN)
-- 30.11.2007 MatjazB; Maintenance ID 12255; change obr_mera with dej_obr in case for field AMORTIZING_PERIODICITY (all LOANDEPO),
--				change grouping and added fields FIXING_PERIODICITY, FIXING_NEXT_DATE, AMORTIZING_AMOUNT, AMORTIZING_PERIODICITY(LO0001 and FL01001 - retail provisions),
--				combine CONTRACT_REFERENCE  -> 'RLxx' + bucket +'_'+ CURRENCY + LEFT(RATE, 1) + PERIODICITY + FIXING_PERIODICITY (LO0001 and FL01001 - retail provisions)
-- 10.12.2007 MatjazB; Maintenance ID 12255  -change filter for provisons - added #P_90, #P_120 and #P_180  (FL01001 - NRT and RET)
-- 28.12.2007 MatjazB; Maintenance ID 12727 - added CASE for MATURITY_DATE (FL0100, FL01001 and TM0104), remove FIXING_NEXT_DATE (LO0001 and FL01001 - retail provisions),
--				fix NOMINAL and OUTSTANDING - negative saldo (FL01001 and FL01001- retail provisions)
-- 14.01.2008 MatjazB; Maintenance ID 12780 - added filter dat_sklen <= target_date (FL0100 and FL01001), use ABS() for AMORTIZING_AMOUNT (FL01001 - retail provisions),
--				fix PERIODICITY and AMORTIZING_PERIODICITY if there is no enumaration (TM0104), fix FIXITG_NEXT_DATE (FL0100 and FL01001)
-- 18.01.2008 MatjazB; Maintenance ID 12780 - added INNER JOIN vrst_ter and WHERE vt.sif_terj IN ('LOBR','OPC','POLO','DDV') (LO0001),  use CWIR for INTEREST_RATE (ACCOUNT assets- IS01010_OL)
-- 31.01.2008 MatjazB; Maintenance ID 13387 - add tip_knjizenja to #contract_candidates and add CASE for NPV (FL0100, FL01001)
-- 06.02.2008 MatjazB; Maintenance ID 13524 - remove filter -> l.datum_dok >= @target_date (FL01001 - retail provisions)
-- 25.02.2008 MatjazB; Maintenance ID 13797 - combine ACCOUNT_REFERENCE -> added id_val (ACCOUNT), added update for MATURITY_DATE (LO0001 and FL01001 - retail provisions)
-- 26.02.2008 MatjazB; Maintenance ID 13813 - change CASE -> remove dej_obr=0 in AMORTIZING_PERIODICITY (LOANDEPO), change CASE for MATURITY_DATE and FIXING_NEXT_DATE (FL0100, FL01001 and TM0104)
-- 26.05.2008 MatjazB; Maintenance ID 15230 - add ISNULL to AMORTIZING_AMOUNT (FL0100 (LD_21))
-- 04.07.2008 MatjazB; Maintenance ID 15750 - remove field ACCRUALS (FL01001)
-------------------------------------------------------------------------------
DECLARE @target_date datetime
SET @target_date = '{0}'

DECLARE @mr_company_id varchar(30), @mr_cocunut_id varchar(12), @dom_val varchar(3)
SELECT @mr_company_id = ini.company_id, @mr_cocunut_id = ini.rl_cocunut_id, @dom_val = ini.id_val FROM {1}.dbo.mrini ini

-- insert v mr_reports
DECLARE @id_mr_report int
INSERT INTO {1}.dbo.mr_reports VALUES (getdate(), '{2}', @target_date)
SELECT @id_mr_report = MAX(id_mr_report) FROM {1}.dbo.mr_reports WHERE user_name = '{2}'

-- podatki partnerja iz tabele p_eval
SELECT * 
  INTO #tmp_peval
  FROM dbo.p_eval a
 WHERE dat_eval IN (SELECT MAX(dat_eval) FROM dbo.p_eval b WHERE b.id_kupca = a.id_kupca)

----------------------------------------------------------------------------------------------------------------
-- TABLE LOANDEPO
----------------------------------------------------------------------------------------------------------------
--------------------------------------- NON-RETAIL ---- (activa and provisions) --------------------------------

DECLARE @id_terj varchar(2)
SELECT @id_terj = vt.id_terj FROM dbo.vrst_ter vt WHERE vt.sif_terj = 'LOBR'

-- najprej vse kandidate pogodb v eno tabelo
SELECT p.id_cont, n.tip_knjizenja
  INTO #contract_candidates
  FROM dbo.pogodba p
 INNER JOIN dbo.nacini_l n ON p.nacin_leas = n.nacin_leas
 INNER JOIN #tmp_peval pe ON p.id_kupca = pe.id_kupca
 WHERE p.status_akt = 'A' AND p.dat_sklen <= @target_date AND
		(n.tip_knjizenja = '2' OR
			{1}.dbo.gfn_MR_ol2fl(@mr_company_id, n.tip_knjizenja, p.dat_aktiv, p.nacin_leas)=1)
		AND (SUBSTRING(pe.eval_model, 1, 2) NOT IN ('01', '20'))

-- potem pa group vrednosti iz planp
SELECT PP.ID_Cont, PP.ID_Tec,
    -- zapadle neplacane terjatve
--    SUM(CASE WHEN PP.datum_dok <= @target_date AND PP.evident = '*' AND VT.sif_terj IN ('LOBR','OPC','POLO','DDV') THEN PP.saldo ELSE 0 END) AS znp_saldo_brut_LPOD,
--    SUM(CASE WHEN PP.datum_dok <= @target_date AND PP.evident = '*' AND VT.sif_terj IN ('LOBR','OPC','POLO','DDV') THEN PP.Saldo*(PP.Debit-PP.Davek)/PP.Debit ELSE 0 END) AS znp_saldo_net_LPOD,
    
--    SUM(CASE WHEN PP.datum_dok <= @target_date AND PP.evident = '*' THEN PP.saldo ELSE 0 END) AS znp_saldo_brut_ALL,
--    SUM(CASE WHEN PP.datum_dok <= @target_date AND PP.evident = '*' THEN PP.Saldo*(PP.Debit-PP.Davek)/PP.Debit ELSE 0 END) AS znp_saldo_net_ALL,
    
    -- nezapadle terjatve
    SUM(CASE WHEN (PP.datum_dok > @target_date OR PP.evident = '') AND VT.sif_terj IN ('LOBR','OPC','POLO','DDV') THEN PP.neto ELSE 0 END) bod_neto_LPOD,
    
    -- ostalo
--    MAX (PP.Dat_zap) AS max_dat_zap,
    MAX (PP.datum_dok) AS max_datum_dok
  INTO #tmp_planp
  FROM dbo.planp PP
 INNER JOIN #contract_candidates c ON pp.id_cont = c.id_cont
 INNER JOIN dbo.Vrst_ter VT ON PP.id_terj = VT.id_terj
 INNER JOIN dbo.Nacini_L NL ON PP.Nacin_leas = NL.Nacin_leas 
 WHERE PP.Debit > 0 AND PP.Zaprto <> 'Z'
 GROUP BY PP.ID_Cont, PP.ID_Tec

SELECT 
 pds.id_cont, 
--    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.znp_saldo_brut_LPOD, pds.ID_TEC, @target_date)) AS ZNP_SALDO_BRUT_LPOD,
--    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.znp_saldo_net_LPOD, pds.ID_TEC, @target_date)) AS ZNP_SALDO_NET_LPOD,
--    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.znp_saldo_brut_ALL, pds.ID_TEC, @target_date)) AS znp_saldo_brut_ALL,
--    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.znp_saldo_net_ALL, pds.ID_TEC, @target_date)) AS znp_saldo_net_ALL,
    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.bod_neto_LPOD, pds.ID_TEC, @target_date)) AS bod_neto_LPOD,
--	MAX (max_dat_zap) AS max_dat_zap,
    MAX (max_datum_dok) AS max_datum_dok
  INTO #planp_sum
  FROM #tmp_planp pds
 INNER JOIN dbo.pogodba p ON pds.id_cont = p.id_cont
 GROUP BY pds.id_cont

-- FL0100 - Loan & Risk Participation: Billateral Loan
INSERT INTO {1}.dbo.MR_LOANDEPO (CONTRACT_REFERENCE, CONTRACT_TYPE, CONTRACT_DESC, BOOK_CODE,
	COUNTERPARTY_CODE, TRADE_DATE, VALUE_DATE, MATURITY_DATE, RATE, RATE_VALUE, PERIODICITY,
	COMPOUND_PERIODICITY, ACCRUAL_BASIS, AMORTIZING_TYPE, FIRST_AMORT_DATE, BROKEN_PERIOD_TYPE, NPV, YIELD,
	NOMINAL, ACCRUALS, CURRENCY, MKT_SPREAD, FIXING_PERIODICITY, FIXING_NEXT_DATE, OUTSTANDING, DISCOUNT_RATE,
	CALC_DAY_CONVENTION, PAY_DAY_CONVENTION, FIXING_RULE, FIXING_DAY_CONVENTION, FIXING_CALENDAR,
	AMORTIZING_AMOUNT, AMORTIZING_PERIODICITY, ID_MR_REPORT)
SELECT @mr_company_id+'_A'+REPLACE(p.id_pog, '/', '-') CONTRACT_REFERENCE,
	'FL0100' CONTRACT_TYPE,
	'Loan & Risk Participation: Billateral Loan' CONTRACT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	CASE WHEN par.ext_id <> '' THEN par.ext_id ELSE 'XXX' END COUNTERPARTY_CODE,
	p.dat_sklen TRADE_DATE,
	p.dat_aktiv VALUE_DATE,
	CASE WHEN pp.max_datum_dok <= @target_date THEN DATEADD(dd, 1, @target_date) ELSE pp.max_datum_dok END MATURITY_DATE,
	CASE r.id_tiprep WHEN '0' THEN 'FIX' ELSE 'DISC' END RATE,
	p.obr_mera RATE_VALUE,
	CASE WHEN p.dej_obr=0 THEN 'N'
		WHEN o.obnaleto=1 THEN 'A'
		WHEN o.obnaleto=2 THEN 'S'
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END PERIODICITY, --'N' uporabljamo tudi za dinamike, ki niso predvidene v seznamu moûnih vrednosti
	'N' COMPOUND_PERIODICITY,
	'5' ACCRUAL_BASIS,
	'A' AMORTIZING_TYPE,
	ISNULL(p.zap_2ob, p.dat_pol) FIRST_AMORT_DATE,
	'E' BROKEN_PERIOD_TYPE,
	ISNULL(pp.bod_neto_LPOD, 0)  + CASE WHEN @mr_company_id = 'RLHR' AND cc.tip_knjizenja = '1' THEN p.varscina ELSE 0 END NPV,
	NULL YIELD,
	p.net_nal NOMINAL,
	dbo.gfn_GetAccruals(p.id_cont, @target_date, @id_terj, p.dat_aktiv) ACCRUALS,
	CASE WHEN UPPER(p.id_val) = 'KM' THEN 'BAM' ELSE UPPER(p.id_val) END CURRENCY,
	CASE WHEN r.id_tiprep= '0' THEN 0 ELSE p.fix_del *100 END MKT_SPREAD,
	CASE WHEN r.id_tiprep='0' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D'
		WHEN o2.obnaleto=52 THEN '1W'
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y'
		ELSE '' END FIXING_PERIODICITY, --'' uporabljamo tudi za dinamike, ki niso predvidene v seznamu moûnih vrednosti
	CASE WHEN r.id_tiprep = '0' THEN null
		WHEN DATEADD(mm, (12/o2.obnaleto), p.rind_datum) >= pp.max_datum_dok THEN null
		WHEN DATEADD(mm, (12/o2.obnaleto), p.rind_datum) < @target_date	THEN 
			CASE WHEN pp.max_datum_dok < @target_date THEN null ELSE DATEADD(dd, 1, @target_date) END
		ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END FIXING_NEXT_DATE,
	ISNULL(pp.bod_neto_LPOD, 0) OUTSTANDING, --NPV
	'DISC' DISCOUNT_RATE,
	1 CALC_DAY_CONVENTION,
	2 PAY_DAY_CONVENTION,
	'B' FIXING_RULE,
	3 FIXING_DAY_CONVENTION,
	CASE WHEN UPPER(p.id_val) = 'KM' THEN 'BAM' ELSE UPPER(p.id_val) END FIXING_CALENDAR,
	ISNULL(p.obrok1, 0) AMORTIZING_AMOUNT,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4'
		ELSE '0' END AMORTIZING_PERIODICITY,
	@id_mr_report
  FROM dbo.pogodba p
 INNER JOIN #contract_candidates cc ON p.id_cont = cc.id_cont
 INNER JOIN dbo.partner par ON p.id_kupca = par.id_kupca
  LEFT JOIN #planp_sum pp ON p.id_cont = pp.id_cont
 INNER JOIN dbo.obdobja o ON p.id_obd = o.id_obd
 INNER JOIN dbo.rtip r ON p.id_rtip = r.id_rtip
 INNER JOIN dbo.obdobja o2 ON r.id_obdrep = o2.id_obd
 WHERE ISNULL(pp.bod_neto_LPOD, 0) <> 0

-- priprava iz LSK
SELECT SUM(l.debit_dom) AS debit, SUM(l.kredit_dom) AS kredit, l.id_cont
  INTO #lsk_sum
  FROM dbo.lsk l
 INNER JOIN #contract_candidates cc ON l.id_cont = cc.id_cont
 WHERE l.konto IN (SELECT DISTINCT konto FROM dbo.konti_nl WHERE id_konta IN ('#TRP', '#P_90', '#P_120', '#P_180'))
 GROUP BY l.id_cont

-- FL01001 - Provisions
INSERT INTO {1}.dbo.MR_LOANDEPO (CONTRACT_REFERENCE, CONTRACT_TYPE, CONTRACT_DESC, BOOK_CODE,
	COUNTERPARTY_CODE, TRADE_DATE, VALUE_DATE, MATURITY_DATE, RATE, RATE_VALUE, PERIODICITY,
	COMPOUND_PERIODICITY, ACCRUAL_BASIS, AMORTIZING_TYPE, FIRST_AMORT_DATE, BROKEN_PERIOD_TYPE, NPV, YIELD,
	NOMINAL, CURRENCY, MKT_SPREAD, FIXING_PERIODICITY, FIXING_NEXT_DATE, OUTSTANDING, DISCOUNT_RATE,
	CALC_DAY_CONVENTION, PAY_DAY_CONVENTION, FIXING_RULE, FIXING_DAY_CONVENTION, FIXING_CALENDAR,
	AMORTIZING_AMOUNT, AMORTIZING_PERIODICITY, ID_MR_REPORT)
SELECT @mr_company_id+'_AP'+REPLACE(p.id_pog, '/', '-') CONTRACT_REFERENCE,
	'FL01001' CONTRACT_TYPE,
	'Provisions' CONTRACT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	CASE WHEN par.ext_id<>'' THEN par.ext_id ELSE 'XXX' END COUNTERPARTY_CODE,
	p.dat_sklen TRADE_DATE,
	p.dat_aktiv VALUE_DATE,
	CASE WHEN pp.max_datum_dok < @target_date THEN DATEADD(dd, 1, @target_date) ELSE pp.max_datum_dok END MATURITY_DATE,
	CASE r.id_tiprep WHEN '0' THEN 'FIX' ELSE 'DISC' END RATE,
	p.obr_mera RATE_VALUE,
	CASE WHEN p.dej_obr=0 THEN 'N' 
		WHEN o.obnaleto=1 THEN 'A' 
		WHEN o.obnaleto=2 THEN 'S' 
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END PERIODICITY, --'N' uporabljamo tudi za dinamike, ki niso predvidene v seznamu moûnih vrednosti
	'N' COMPOUND_PERIODICITY,
	'5' ACCRUAL_BASIS,
	'A' AMORTIZING_TYPE,
	ISNULL(p.zap_2ob, p.dat_pol) FIRST_AMORT_DATE,
	'E' BROKEN_PERIOD_TYPE,
	ISNULL(pp.bod_neto_LPOD, 0)  + CASE WHEN @mr_company_id = 'RLHR' AND cc.tip_knjizenja = '1' THEN p.varscina ELSE 0 END NPV,
	NULL YIELD,
	ISNULL(ls.debit, 0) - ISNULL(ls.kredit, 0) NOMINAL,
	@dom_val CURRENCY,
	CASE WHEN r.id_tiprep= '0' THEN 0 ELSE p.fix_del *100 END MKT_SPREAD,
	CASE WHEN r.id_tiprep='0' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D' 
		WHEN o2.obnaleto=52 THEN '1W' 
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y'
		ELSE '' END FIXING_PERIODICITY, --'' uporabljamo tudi za dinamike, ki niso predvidene v seznamu moûnih vrednosti
	CASE WHEN r.id_tiprep = '0' THEN null
		WHEN DATEADD(mm, (12/o2.obnaleto), p.rind_datum) >= pp.max_datum_dok THEN null
		WHEN DATEADD(mm, (12/o2.obnaleto), p.rind_datum) < @target_date	THEN 
			CASE WHEN pp.max_datum_dok <= @target_date THEN null ELSE DATEADD(dd, 1, @target_date) END
		ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END FIXING_NEXT_DATE,
	ISNULL(ls.debit, 0) - ISNULL(ls.kredit, 0) OUTSTANDING,
	'DISC' DISCOUNT_RATE,
	1 CALC_DAY_CONVENTION,
	2 PAY_DAY_CONVENTION,
	'B' FIXING_RULE,
	3 FIXING_DAY_CONVENTION,
	CASE WHEN UPPER(p.id_val) = 'KM' THEN 'BAM' ELSE UPPER(p.id_val) END FIXING_CALENDAR,
	p.obrok1 AMORTIZING_AMOUNT,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4'
		ELSE '0' END AMORTIZING_PERIODICITY,
	@id_mr_report
  FROM dbo.pogodba p
 INNER JOIN #contract_candidates cc ON p.id_cont = cc.id_cont
 INNER JOIN dbo.partner par ON p.id_kupca = par.id_kupca
  LEFT JOIN #planp_sum pp ON p.id_cont = pp.id_cont
 INNER JOIN dbo.obdobja o ON p.id_obd = o.id_obd
 INNER JOIN dbo.rtip r ON p.id_rtip = r.id_rtip
 INNER JOIN dbo.obdobja o2 ON r.id_obdrep = o2.id_obd
  LEFT JOIN #lsk_sum ls ON p.id_cont = ls.id_cont
 WHERE (ISNULL(ls.debit, 0) - ISNULL(ls.kredit, 0)) <> 0


DROP TABLE #contract_candidates
DROP TABLE #tmp_planp
DROP TABLE #planp_sum
DROP TABLE #lsk_sum


--------------------------------------- RETAIL -----------------------------------------------------------------
SELECT CAST(@mr_company_id
		+'_'+{1}.dbo.gfn_MR_Bucket(
			CASE r.id_tiprep
				WHEN '0' THEN pp.datum_dok
				ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END, @target_date) AS varchar(50)) CONTRACT_REFERENCE,	--GROUP
	'LO0001' CONTRACT_TYPE,
	'Loans Retail' CONTRACT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	'unknown aggregate' COUNTERPARTY_CODE,
	@target_date VALUE_DATE,
	{1}.dbo.gfn_MR_MaturityDateRetail_LD(
		CASE r.id_tiprep
			WHEN '0' THEN pp.datum_dok
			ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END,
		@target_date) MATURITY_DATE,
	CASE r.id_tiprep WHEN '0' THEN 'FIX' ELSE 'DISC' END RATE,	--GROUP
	CASE WHEN SUM(pp.neto)=0 THEN 0 ELSE SUM(pp.neto*p.obr_mera)/SUM(pp.neto) END RATE_VALUE,
	CASE WHEN p.dej_obr=0 THEN 'N'
		WHEN o.obnaleto=1 THEN 'A'
		WHEN o.obnaleto=2 THEN 'S'
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END PERIODICITY,	--GROUP
	'5' ACCRUAL_BASIS,
	'A' AMORTIZING_TYPE,
	'E' BROKEN_PERIOD_TYPE,
	SUM(pp.neto) NOMINAL,
	CASE WHEN UPPER(pp.id_val) = 'KM' THEN 'BAM' ELSE UPPER(pp.id_val) END CURRENCY,	--GROUP
	CASE WHEN r.id_tiprep='0' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D' 
		WHEN o2.obnaleto=52 THEN '1W' 
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y'
		ELSE '' END FIXING_PERIODICITY,	--GROUP ('' uporabljamo tudi za dinamike, ki niso predvidene v seznamu moûnih vrednosti)
	'DISC' DISCOUNT_RATE,
	2 CALC_DAY_CONVENTION,
	2 PAY_DAY_CONVENTION,
	'B' FIXING_RULE,
	SUM(pp.neto) AMORTIZING_AMOUNT,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4'
		ELSE '0' END AMORTIZING_PERIODICITY	--GROUP
  INTO #tmp_retail
  FROM dbo.planp pp
 INNER JOIN dbo.partner par ON pp.id_kupca = par.id_kupca
 INNER JOIN #tmp_peval pe ON par.id_kupca = pe.id_kupca
 INNER JOIN dbo.pogodba p ON pp.id_cont = p.id_cont
 INNER JOIN dbo.obdobja o ON p.id_obd = o.id_obd
 INNER JOIN dbo.rtip r ON p.id_rtip = r.id_rtip
 INNER JOIN dbo.obdobja o2 ON r.id_obdrep = o2.id_obd
 INNER JOIN dbo.nacini_l n ON p.nacin_leas = n.nacin_leas
 INNER JOIN dbo.vrst_ter vt ON pp.id_terj = vt.id_terj
 WHERE p.status_akt ='A' AND
		(n.tip_knjizenja = '2' OR
			{1}.dbo.gfn_MR_ol2fl(@mr_company_id, n.tip_knjizenja, p.dat_aktiv, p.nacin_leas)=1)
		AND (SUBSTRING(pe.eval_model, 1, 2) IN ('01','20'))
		AND (pp.datum_dok >= @target_date)
		AND vt.sif_terj IN ('LOBR','OPC','POLO','DDV')
 GROUP BY CAST(@mr_company_id
		+'_'+{1}.dbo.gfn_MR_Bucket(
			CASE r.id_tiprep
				WHEN '0' THEN pp.datum_dok
				ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END, @target_date) AS varchar(50)),
	CASE WHEN UPPER(pp.id_val) = 'KM' THEN 'BAM' ELSE UPPER(pp.id_val) END,
	CASE r.id_tiprep WHEN '0' THEN 'FIX' ELSE 'DISC' END,
	CASE WHEN p.dej_obr=0 THEN 'N'
		WHEN o.obnaleto=1 THEN 'A'
		WHEN o.obnaleto=2 THEN 'S'
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END,
	CASE WHEN r.id_tiprep='0' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D' 
		WHEN o2.obnaleto=52 THEN '1W' 
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y'
		ELSE '' END,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4'
		ELSE '0' END,
	-- zaradi delovanja SQL - ni dodatnih grup, ker se ujema z prvim grupiranjem
	{1}.dbo.gfn_MR_MaturityDateRetail_LD(
		CASE r.id_tiprep
			WHEN '0' THEN pp.datum_dok
			ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END,
		@target_date)

UPDATE #tmp_retail SET CONTRACT_REFERENCE = CONTRACT_REFERENCE +'_'+ CURRENCY + LEFT(RATE, 1) + PERIODICITY + FIXING_PERIODICITY,
	MATURITY_DATE = CASE WHEN MATURITY_DATE <= @target_date THEN DATEADD(dd, 1, @target_date) ELSE MATURITY_DATE END

INSERT INTO {1}.dbo.mr_loandepo (CONTRACT_REFERENCE, CONTRACT_TYPE, CONTRACT_DESC, BOOK_CODE,
	COUNTERPARTY_CODE, VALUE_DATE, MATURITY_DATE, RATE, RATE_VALUE, PERIODICITY, ACCRUAL_BASIS,
	AMORTIZING_TYPE, BROKEN_PERIOD_TYPE, NOMINAL, CURRENCY, FIXING_PERIODICITY,
	DISCOUNT_RATE, CALC_DAY_CONVENTION,	PAY_DAY_CONVENTION, FIXING_RULE,
	AMORTIZING_AMOUNT, AMORTIZING_PERIODICITY, ID_MR_REPORT)
SELECT *, @id_mr_report FROM #tmp_retail ORDER BY MATURITY_DATE

DROP TABLE #tmp_retail

-- Retail provisions
SELECT CAST(@mr_company_id
		+'_P'+ {1}.dbo.gfn_MR_Bucket(
			CASE r.id_tiprep
				WHEN '0' THEN l.datum_dok
				ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END, @target_date) AS varchar(50)) CONTRACT_REFERENCE,--GROUP
	'FL01001' CONTRACT_TYPE,
	'Provisions Retail' CONTRACT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	'unknown aggregate' COUNTERPARTY_CODE,
	@target_date VALUE_DATE,
	{1}.dbo.gfn_MR_MaturityDateRetail_LD(
		CASE r.id_tiprep
			WHEN '0' THEN l.datum_dok
			ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END,
		@target_date) MATURITY_DATE,
	CASE r.id_tiprep WHEN '0' THEN 'FIX' ELSE 'DISC' END RATE,	--GROUP
	CASE WHEN SUM(l.kredit_dom-l.debit_dom)=0 THEN 0 
		ELSE SUM((l.kredit_dom-l.debit_dom)*p.obr_mera)/SUM(l.kredit_dom-l.debit_dom) END RATE_VALUE,
	CASE WHEN p.dej_obr=0 THEN 'N'
		WHEN o.obnaleto=1 THEN 'A'
		WHEN o.obnaleto=2 THEN 'S'
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END PERIODICITY,	--GROUP
	'5' ACCRUAL_BASIS,
	'A' AMORTIZING_TYPE,
	'E' BROKEN_PERIOD_TYPE,
	SUM(l.debit_dom - l.kredit_dom) NOMINAL,
	@dom_val CURRENCY,
	CASE WHEN r.id_tiprep='0' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D' 
		WHEN o2.obnaleto=52 THEN '1W' 
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y'
		ELSE '' END FIXING_PERIODICITY,	--GROUP ('' uporabljamo tudi za dinamike, ki niso predvidene v seznamu moûnih vrednosti)
	'DISC' DISCOUNT_RATE,
	2 CALC_DAY_CONVENTION,
	2 PAY_DAY_CONVENTION,
	'B' FIXING_RULE,
	ABS(SUM(l.debit_dom - l.kredit_dom)) AMORTIZING_AMOUNT,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4'
		ELSE '0' END AMORTIZING_PERIODICITY	--GROUP
  INTO #tmp_pretail
  FROM dbo.lsk l
 INNER JOIN dbo.partner par ON l.id_kupca = par.id_kupca
 INNER JOIN #tmp_peval pe ON par.id_kupca = pe.id_kupca
 INNER JOIN dbo.pogodba p ON l.id_cont = p.id_cont
 INNER JOIN dbo.obdobja o ON p.id_obd = o.id_obd
 INNER JOIN dbo.rtip r ON p.id_rtip = r.id_rtip
 INNER JOIN dbo.obdobja o2 ON r.id_obdrep = o2.id_obd
 INNER JOIN dbo.nacini_l n ON p.nacin_leas = n.nacin_leas
 WHERE p.status_akt ='A' AND
	(n.tip_knjizenja = '2' OR
		{1}.dbo.gfn_MR_ol2fl(@mr_company_id, n.tip_knjizenja, p.dat_aktiv, p.nacin_leas)=1)
	AND (SUBSTRING(pe.eval_model, 1, 2) IN ('01','20'))
	AND l.konto IN (SELECT DISTINCT konto FROM dbo.konti_nl WHERE id_konta IN ('#TRP', '#P_90', '#P_120', '#P_180'))
 GROUP BY CAST(@mr_company_id
		+'_P'+ {1}.dbo.gfn_MR_Bucket(
			CASE r.id_tiprep
				WHEN '0' THEN l.datum_dok
				ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END, @target_date) AS varchar(50)),
	CASE r.id_tiprep WHEN '0' THEN 'FIX' ELSE 'DISC' END,
	CASE WHEN p.dej_obr=0 THEN 'N'
		WHEN o.obnaleto=1 THEN 'A'
		WHEN o.obnaleto=2 THEN 'S'
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END,
	CASE WHEN r.id_tiprep='0' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D' 
		WHEN o2.obnaleto=52 THEN '1W' 
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y'
		ELSE '' END,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4'
		ELSE '0' END,
	-- zaradi delovanja SQL - ni dodatnih grup, ker se ujema z prvim grupiranjem
	{1}.dbo.gfn_MR_MaturityDateRetail_LD(
		CASE r.id_tiprep
			WHEN '0' THEN l.datum_dok
			ELSE DATEADD(mm, (12/o2.obnaleto), p.rind_datum) END,
		@target_date)
HAVING (SUM(l.debit_dom - l.kredit_dom)) <> 0

UPDATE #tmp_pretail SET CONTRACT_REFERENCE = CONTRACT_REFERENCE +'_'+ CURRENCY + LEFT(RATE, 1) + PERIODICITY + FIXING_PERIODICITY,
	MATURITY_DATE = CASE WHEN MATURITY_DATE <= @target_date THEN DATEADD(dd, 1, @target_date) ELSE MATURITY_DATE END

INSERT INTO {1}.dbo.mr_loandepo (CONTRACT_REFERENCE, CONTRACT_TYPE, CONTRACT_DESC, BOOK_CODE,
	COUNTERPARTY_CODE, VALUE_DATE, MATURITY_DATE, RATE, RATE_VALUE, PERIODICITY, ACCRUAL_BASIS,
	AMORTIZING_TYPE, BROKEN_PERIOD_TYPE, NOMINAL, CURRENCY, FIXING_PERIODICITY,
	DISCOUNT_RATE, CALC_DAY_CONVENTION,	PAY_DAY_CONVENTION, FIXING_RULE,
	AMORTIZING_AMOUNT, AMORTIZING_PERIODICITY, ID_MR_REPORT)
SELECT *, @id_mr_report FROM #tmp_pretail ORDER BY MATURITY_DATE

DROP TABLE #tmp_pretail


--------------------------------------- KREDITNE POGODBE (pasiva) ----------------------------------------------
SELECT 
    pp.id_kredpog, pp.id_tec,
    -- zapadle neplacane terjatve
--    SUM(CASE WHEN PP.dat_zap <= @target_date THEN ISNULL(PP.anuiteta, 0) ELSE 0 END) AS znp_saldo_brut_LPOD,
--    SUM(CASE WHEN PP.dat_zap <= @target_date THEN ISNULL(PP.znes_r, 0) ELSE 0 END) AS znp_saldo_net_LPOD,
    
    -- nezapadle terjatve
    SUM(CASE WHEN PP.dat_zap > @target_date THEN ISNULL(PP.znes_r, 0) ELSE 0 END) bod_neto_LPOD,
    
    -- ostalo
    MAX (PP.dat_zap) AS max_dat_zap,
--    MAX (PP.dat_obr) AS max_dat_obr,
	MIN(CASE WHEN pp.is_event = 0 THEN pp.dat_zap ELSE NULL END) AS min_dat_zap
  INTO #tmp_kplanp
  FROM dbo.kred_planp pp
 INNER JOIN dbo.kred_pog c ON pp.id_kredpog = c.id_kredpog
 GROUP BY pp.id_kredpog, pp.id_tec
 

SELECT 
 pds.id_kredpog, 
--    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.znp_saldo_brut_LPOD, pds.ID_TEC, @target_date)) AS ZNP_SALDO_BRUT_LPOD,
--    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.znp_saldo_net_LPOD, pds.ID_TEC, @target_date)) AS ZNP_SALDO_NET_LPOD,
    SUM(dbo.GFN_XCHANGE(dbo.gfn_GetNewTec(p.id_tec), pds.bod_neto_LPOD, pds.ID_TEC, @target_date)) AS bod_neto_LPOD,
	MAX (max_dat_zap) AS max_dat_zap,
--    MAX (max_dat_obr) AS max_dat_obr,
	MIN (min_dat_zap) AS min_dat_zap
  INTO #kplanp_sum
  FROM #tmp_kplanp pds
 INNER JOIN dbo.kred_pog p ON pds.id_kredpog = p.id_kredpog
 GROUP BY pds.id_kredpog


-- insert kreditne pogodbe
INSERT INTO {1}.dbo.MR_LOANDEPO (CONTRACT_REFERENCE, CONTRACT_TYPE, CONTRACT_DESC, BOOK_CODE,
	COUNTERPARTY_CODE, TRADE_DATE, VALUE_DATE, MATURITY_DATE, RATE, RATE_VALUE, PERIODICITY,
	COMPOUND_PERIODICITY, ACCRUAL_BASIS, AMORTIZING_TYPE, FIRST_AMORT_DATE, BROKEN_PERIOD_TYPE, NPV, YIELD,
	NOMINAL, CURRENCY, MKT_SPREAD, FIXING_PERIODICITY, FIXING_NEXT_DATE, OUTSTANDING, DISCOUNT_RATE,
	CALC_DAY_CONVENTION, PAY_DAY_CONVENTION, FIXING_RULE, FIXING_DAY_CONVENTION, FIXING_CALENDAR,
	AMORTIZING_AMOUNT, AMORTIZING_PERIODICITY, ID_MR_REPORT)
SELECT @mr_company_id+'_P'+REPLACE(p.id_kredpog, '/', '-') CONTRACT_REFERENCE,
	'TM0104' CONTRACT_TYPE,
	'Money Market: Deposit: Term Deposits' CONTRACT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	CASE WHEN par.ext_id<>'' THEN par.ext_id ELSE 'XXX' END COUNTERPARTY_CODE,
	p.dat_sklen TRADE_DATE,
	p.crpan_dat VALUE_DATE,
	CASE WHEN pp.max_dat_zap <= @target_date THEN DATEADD(dd, 1, @target_date) ELSE pp.max_dat_zap END MATURITY_DATE,
	CASE WHEN p.id_rtip='0' OR p.id_rtip='' THEN 'FIX' ELSE 'DISC' END RATE,
	p.obresti RATE_VALUE,
	CASE WHEN p.obresti=0 THEN 'N' 
		WHEN o.obnaleto=1 THEN 'A' 
		WHEN o.obnaleto=2 THEN 'S' 
		WHEN o.obnaleto=4 THEN 'Q'
		WHEN o.obnaleto=12 THEN 'M'
		ELSE 'N' END PERIODICITY,
	'N' COMPOUND_PERIODICITY,
	'2' ACCRUAL_BASIS,
	CASE WHEN p.tip_izracuna = '2' THEN 'M' ELSE 'A' END AMORTIZING_TYPE,
	min_dat_zap FIRST_AMORT_DATE,
	'E' BROKEN_PERIOD_TYPE,
	pp.bod_neto_LPOD NPV,
	NULL YIELD,
	(p.crpan_znes)*(-1) NOMINAL,
	CASE WHEN UPPER(t.id_val) = 'KM' THEN 'BAM' ELSE UPPER(t.id_val) END CURRENCY,
	CASE p.id_rtip WHEN '0' THEN 0 ELSE p.fix_del * 100 END MKT_SPREAD,
	CASE WHEN p.id_rtip='0' OR p.id_rtip='' THEN '' 
		WHEN o2.obnaleto=360 THEN '1D' 
		WHEN o2.obnaleto=52 THEN '1W' 
		WHEN o2.obnaleto=12 THEN '1M'
		WHEN o2.obnaleto=6 THEN '2M'
		WHEN o2.obnaleto=4 THEN '3M'
		WHEN o2.obnaleto=3 THEN '4M'
		WHEN o2.obnaleto=2.4 THEN '5M'
		WHEN o2.obnaleto=2 THEN '6M'
		WHEN o2.obnaleto=1.33 THEN '9M'
		WHEN o2.obnaleto=1 THEN '1Y' END FIXING_PERIODICITY,
	CASE WHEN r.id_tiprep = '0' THEN null
		WHEN DATEADD(mm, (12/o2.obnaleto), @target_date) >= pp.max_dat_zap THEN null
		ELSE DATEADD(mm, (12/o2.obnaleto), @target_date) END FIXING_NEXT_DATE,
	(pp.bod_neto_LPOD)*(-1) OUTSTANDING,
	'DISC' DISCOUNT_RATE,
	2 CALC_DAY_CONVENTION,
	2 PAY_DAY_CONVENTION,
	'B' FIXING_RULE,
	3 FIXING_DAY_CONVENTION,
	CASE WHEN UPPER(t.id_val) = 'KM' THEN 'BAM' ELSE UPPER(t.id_val) END FIXING_CALENDAR,
	p.anuiteta AMORTIZING_AMOUNT,
	CASE WHEN o.obnaleto=1 THEN '1' 
		WHEN o.obnaleto=2 THEN '2' 
		WHEN o.obnaleto=4 THEN '3'
		WHEN o.obnaleto=12 THEN '4' 
		ELSE '0' END AMORTIZING_PERIODICITY,
	@id_mr_report
  FROM dbo.kred_pog p
 INNER JOIN dbo.partner par ON p.id_kupca = par.id_kupca
  LEFT JOIN #kplanp_sum pp ON p.id_kredpog = pp.id_kredpog
 INNER JOIN dbo.obdobja o ON p.id_odplac = o.id_obd
 INNER JOIN dbo.tecajnic t ON p.id_tec = t.id_tec
  LEFT JOIN dbo.rtip r ON p.id_rtip = r.id_rtip
  LEFT JOIN dbo.obdobja o2 ON r.id_obdrep = o2.id_obd
 WHERE p.aneks <> 'N'

DROP TABLE #tmp_kplanp
DROP TABLE #kplanp_sum
DROP TABLE #tmp_peval

---------------------------------------------------------------------------------
-- TABEL ACCOUNTS
---------------------------------------------------------------------------------
SELECT gl.konto, SUM(gl.debit_dom - gl.kredit_dom) AS saldo_dom, 
	SUM(gl.debit_val - gl.kredit_val) AS saldo_val,
	CASE WHEN a.predp_tec = 1 THEN gl.id_val ELSE @dom_val END AS id_val
  INTO #account
  FROM dbo.gl
 INNER JOIN dbo.akonplan a ON gl.konto = a.konto
 WHERE gl.konto in (SELECT account FROM {1}.dbo.mr_account_maping) AND gl.datum_dok <= @target_date
 GROUP BY gl.konto, CASE WHEN a.predp_tec = 1 THEN gl.id_val ELSE @dom_val END

SELECT gl.konto, SUM(gl.debit_dom - gl.kredit_dom) AS saldo_dom, 
	SUM(gl.debit_val - gl.kredit_val) AS saldo_val,
	CASE WHEN a.predp_tec = 1 THEN gl.id_val ELSE @dom_val END AS id_val
  INTO #accruals_account
  FROM dbo.gl
 INNER JOIN dbo.akonplan a ON gl.konto = a.konto
 WHERE gl.konto in (SELECT accruals_account FROM {1}.dbo.mr_account_maping) AND gl.datum_dok <= @target_date
 GROUP BY gl.konto, CASE WHEN a.predp_tec = 1 THEN gl.id_val ELSE @dom_val END


INSERT INTO {1}.dbo.MR_ACCOUNT (ACCOUNT_REFERENCE, ACCOUNT_TYPE, ACCOUNT_DESC,
	BOOK_CODE, COUNTERPARTY_CODE, CURRENCY, BALANCE,
	INTEREST_RATE, ACCRUALS, RATE, PERIODICITY, ACCRUAL_BASIS,
	DISCOUNT_RATE, PAY_DAY_CONVENTION, COMPOUND_PERIODICITY, ID_MR_REPORT)
SELECT @mr_company_id+'_'+map.account+'_'+CASE WHEN UPPER(ac.id_val) = 'KM' THEN 'BAM' ELSE UPPER(ac.id_val) END ACCOUNT_REFERENCE,
	map.account_type_id ACCOUNT_TYPE,
	map.account_desc ACCOUNT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	@mr_cocunut_id COUNTERPARTY_CODE,
	CASE WHEN UPPER(ac.id_val) = 'KM' THEN 'BAM' ELSE UPPER(ac.id_val) END CURRENCY,
	SUM(CASE WHEN ac.id_val=@dom_val THEN ac.saldo_dom ELSE ac.saldo_val END * CASE WHEN map.active_account = 0 THEN -1 ELSE 1 END) AS BALANCE,
	0 INTEREST_RATE,
	SUM(CASE WHEN aac.id_val=@dom_val THEN aac.saldo_dom ELSE aac.saldo_val END) AS ACCRUALS,
	'FIX' RATE,
	'N' PERIODICITY,
	'2' ACCRUAL_BASIS,
	'DISC' DISCOUNT_RATE,
	1 PAY_DAY_CONVENTION,
	'N' COMPOUND_PERIODICITY,
	@id_mr_report
  FROM {1}.dbo.mr_account_maping map
 INNER JOIN #account ac ON map.account = ac.konto
  LEFT JOIN #accruals_account aac ON map.accruals_account = aac.konto
 GROUP BY @mr_company_id+'_'+map.account+'_'+CASE WHEN UPPER(ac.id_val) = 'KM' THEN 'BAM' ELSE UPPER(ac.id_val) END,
	map.account_type_id, map.account_desc,
	CASE WHEN UPPER(ac.id_val) = 'KM' THEN 'BAM' ELSE UPPER(ac.id_val) END
HAVING SUM(CASE WHEN ac.id_val=@dom_val THEN ac.saldo_dom ELSE ac.saldo_val END) <> 0

DROP TABLE #account
DROP TABLE #accruals_account


-- Assets
INSERT INTO {1}.dbo.MR_ACCOUNT (ACCOUNT_REFERENCE, ACCOUNT_TYPE, ACCOUNT_DESC,
	BOOK_CODE, COUNTERPARTY_CODE, CURRENCY, BALANCE,
	INTEREST_RATE, RATE, PERIODICITY, ACCRUAL_BASIS,
	DISCOUNT_RATE, PAY_DAY_CONVENTION, COMPOUND_PERIODICITY, ID_MR_REPORT)

SELECT @mr_company_id + '_IS01010_OL' ACCOUNT_REFERENCE,
	'IS01010' ACCOUNT_TYPE,
	'Tangible assets in OL' ACCOUNT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	'unknown aggregate' COUNTERPARTY_CODE,
	CASE WHEN UPPER(@dom_val) = 'KM' THEN 'BAM' ELSE UPPER(@dom_val) END CURRENCY,
	SUM(fa.nabav_vred + fa.rev_osnove + fa.spr_osnove - (fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp)) BALANCE,
	CASE WHEN SUM(fa.nabav_vred + fa.rev_osnove + fa.spr_osnove -
			(fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp)) = 0 THEN 0 
		ELSE SUM((fa.nabav_vred + fa.rev_osnove + fa.spr_osnove -
					(fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp)) * p.dej_obr)/
				SUM(fa.nabav_vred + fa.rev_osnove + fa.spr_osnove -
					(fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp))
		END INTEREST_RATE,
	'FIX' RATE,
	'N' PERIODICITY,
	'2' ACCRUAL_BASIS,
	'DISC' DISCOUNT_RATE,
	1 PAY_DAY_CONVENTION,
	'N' COMPOUND_PERIODICITY,
	@id_mr_report
  FROM dbo.fa
 INNER JOIN dbo.pogodba p ON fa.id_cont = p.id_cont
 INNER JOIN dbo.nacini_l n ON p.nacin_leas = n.nacin_leas
 WHERE (n.tip_knjizenja = '1' AND
		{1}.dbo.gfn_MR_ol2fl(@mr_company_id, n.tip_knjizenja, p.dat_aktiv, p.nacin_leas)=0) AND
		fa.status = 'A'
HAVING SUM(fa.nabav_vred + fa.rev_osnove + fa.spr_osnove - (fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp)) <> 0

UNION ALL

SELECT @mr_company_id + '_IS01010_OWN' ACCOUNT_REFERENCE,
	'IS01010' ACCOUNT_TYPE,
	'Tangible assets in OWN' ACCOUNT_DESC,
	@mr_company_id+'_BB' BOOK_CODE,
	'unknown aggregate' COUNTERPARTY_CODE,
	CASE WHEN UPPER(@dom_val) = 'KM' THEN 'BAM' ELSE UPPER(@dom_val) END CURRENCY,
	SUM(fa.nabav_vred + fa.rev_osnove + fa.spr_osnove - (fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp)) BALANCE,
	0 INTEREST_RATE,
	'FIX' RATE,
	'N' PERIODICITY,
	'2' ACCRUAL_BASIS,
	'DISC' DISCOUNT_RATE,
	1 PAY_DAY_CONVENTION,
	'N' COMPOUND_PERIODICITY,
	@id_mr_report
  FROM dbo.fa
 WHERE fa.status = 'A' AND (fa.id_cont IS NULL OR fa.id_cont = '')
HAVING SUM(fa.nabav_vred + fa.rev_osnove + fa.spr_osnove - (fa.odpis_vred + fa.mes_amort + fa.spr_odpisa + fa.rev_odpisa + fa.iztrz_vred - fa.ucinek_odp)) <> 0
      u•  SET NOCOUNT ON

delete from {2}.dbo.retail_st_customer_counterp_limit
delete from {2}.dbo.retail_st_contract_balance
delete from {2}.dbo.retail_st_account_balance
delete from {2}.dbo.retail_st_leasing
delete from {2}.dbo.retail_st_customer_loan
delete from {2}.dbo.retail_st_account
delete from {2}.dbo.retail_st_limit_reference
delete from {2}.dbo.retail_st_collateral_counterparty
delete from {2}.dbo.retail_st_collateral
delete from {2}.dbo.retail_st_customer
delete from {2}.dbo.retail_st_product_type_subtype

delete from {2}.dbo.retail_st_counterparty_indicator
delete from {2}.dbo.retail_st_counterparty_past_due

declare @id_oc_report int
declare @date_to datetime
declare @company_id varchar(15)
declare @drzava char(2)
declare @id_val_dom char(3)
declare @id_customer_dom char(6)
declare @application_id char(4)
declare @source_system_id char(4)
declare @nomap char(7)
declare @na char(6)
declare @default_date_ss datetime
declare @default_date_row datetime
declare @default_date_spec datetime

set @id_oc_report = {0}
set @date_to = (SELECT date_to FROM {1}.dbo.oc_reports 
                                 WHERE id_oc_report = @id_oc_report)
set @company_id = (select company_id from {2}.dbo.b2ini)
set @drzava = (select drzava from {2}.dbo.b2ini)
set @id_val_dom = (select id_val from {2}.dbo.b2ini)
set @id_customer_dom = (select id_customer_dom from {2}.dbo.b2ini)
set @application_id = 'NOVA'
set @source_system_id = 'NOVA'
set @nomap = '*nomap*'
set @na = '*n.a.*'
set @default_date_ss = '19010101' -- should be 9999-09-01 00:00:00 (transformation performed C#)
set @default_date_row = '19000101' -- should be 9999-08-01 00:00:00 (transformation performed C#)
set @default_date_spec = '19020101' -- should be 9999-10-01 00:00:00 (transformation performed C#)

declare @customer_asset_class_enum varchar(1000)
set @customer_asset_class_enum = '1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                                    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 53, 54, 55,
                                    56, 57'

-- table retail_st_customer is not relevant enymore -> retail and non retail customers go together in table st_customer in non-retail script.
/*
--RETAIL_ST_CUSTOMER
--CONTRACTS
INSERT INTO {2}.dbo.retail_st_customer
(CUSTOMER_ID, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, CUSTOMER_ASSET_CLASS_ID, STATUS_INDICATOR,
 DATE_FROM, CUST_AST_CLS_APPLICATION_ID, CUST_AST_CLS_ENTITY_ID, CUST_AST_CLS_SOURCE_SYSTEM_ID)
SELECT DISTINCT 
cu.id_kupca, @application_id, @source_system_id, @company_id, 
case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
else '*nomap*'
end, 
'A', @date_to, @application_id, @company_id, @source_system_id
FROM {1}.dbo.oc_contracts co
INNER JOIN {1}.dbo.oc_customers cu ON co.id_kupca = cu.id_kupca AND co.id_oc_report = cu.id_oc_report
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON cu.id_kupca = pe.id_kupca AND cu.id_oc_report = pe.id_oc_report
WHERE cu.id_oc_report = @id_oc_report
AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
ORDER BY cu.id_kupca

--FRAMES
INSERT INTO {2}.dbo.retail_st_customer
(CUSTOMER_ID, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, CUSTOMER_ASSET_CLASS_ID, STATUS_INDICATOR,
 DATE_FROM, CUST_AST_CLS_APPLICATION_ID, CUST_AST_CLS_ENTITY_ID, CUST_AST_CLS_SOURCE_SYSTEM_ID)
SELECT DISTINCT cu.id_kupca, @application_id, @source_system_id, @company_id, 
case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
else '*nomap*'
end, 
'A', @date_to, @application_id, @company_id, @source_system_id
FROM {1}.dbo.oc_frames fr
INNER JOIN {1}.dbo.oc_customers cu ON fr.id_kupca = cu.id_kupca AND fr.id_oc_report = cu.id_oc_report
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON cu.id_kupca = pe.id_kupca AND cu.id_oc_report = pe.id_oc_report
WHERE cu.id_oc_report = @id_oc_report
AND
(
	(
		fr.b2_eligible = 1
		AND
		(fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to)))
	)
)
AND cu.id_kupca NOT IN (SELECT customer_id from {2}.dbo.retail_st_customer)
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
ORDER BY cu.id_kupca

--COLLATERALS
INSERT INTO {2}.dbo.retail_st_customer
(CUSTOMER_ID, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, CUSTOMER_ASSET_CLASS_ID, STATUS_INDICATOR,
 DATE_FROM, CUST_AST_CLS_APPLICATION_ID, CUST_AST_CLS_ENTITY_ID, CUST_AST_CLS_SOURCE_SYSTEM_ID)
SELECT DISTINCT cu.id_kupca, @application_id, @source_system_id, @company_id, 
case when len(pe.eval_model) > 1 then
          case when substring(pe.eval_model, 1, 1) = '0' then
               case when charindex(substring(pe.eval_model, 2, 1), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 2, 1)
                    else '*nomap*'
               end
               else
                 case when charindex(convert(char(2), pe.eval_model), @customer_asset_class_enum) > 0 then substring(pe.eval_model, 1, 2)
                      else '*nomap*'
               end
          end
when len(pe.eval_model) = 1 then
          case when charindex(pe.eval_model, @customer_asset_class_enum) > 0 then pe.eval_model
               else '*nomap*' 
        end
else '*nomap*'
end, 
'A', @date_to, @application_id, @company_id, @source_system_id
FROM {1}.dbo.oc_contracts co
INNER JOIN {1}.dbo.dokument dok ON co.id_oc_report = dok.id_oc_report AND co.id_cont = dok.id_cont
INNER JOIN {2}.dbo.b2collat col ON dok.id_obl_zav = col.id_obl_zav
INNER JOIN {1}.dbo.oc_customers cu ON dok.id_oc_report = cu.id_oc_report AND dok.id_kupca = cu.id_kupca
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON cu.id_kupca = pe.id_kupca AND cu.id_oc_report = pe.id_oc_report
WHERE cu.id_oc_report = @id_oc_report
AND (dok.id_hipot = col.id_hipot OR col.id_hipot = '*')
AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
AND cu.id_kupca NOT IN (SELECT customer_id from {2}.dbo.retail_st_customer)
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
AND dok.ima = 1
ORDER BY cu.id_kupca
*/




-------------------------------------------------RETAIL_CONTRACTS-----------------------------------------------------------------
declare @id_cont int, @id_pog varchar(140), @id_kupca varchar(140), @dat_aktiv datetime, @ex_max_datum_dok datetime,
        @id_val varchar(30), @id_tec char(3), @id_vrste char(4), @id_grupe char(3), @vr_val decimal(21,4), @net_nal decimal(18,2), @ex_g1_neto decimal(18,2),
        @ex_g1_neto_opc_nezap decimal(18,2), @provision_amount decimal(21,4), @nacin_leas char(2),@leas_kred char(1), @tip_knjizenja char(1), 
        @status_akt char(1), @ol_na_nacin_fl bit, @financni_leasing bit, @leasing_type char(2), @product_type_id varchar(140), @product_subtype_id varchar(140), @group_product_type_id varchar(30), 
        @total_odr decimal(21,4), @neto_not_booked decimal(21,4), @neto_not_dued decimal(21,4), @leasing_npv_amount decimal(21,4), @leasing_residual_amount decimal(21,4), @future_capital_total decimal(21,4),
        @current_principal decimal(21,4), @p_status varchar(10), @ex_dni_zamude int, @varscina decimal(18,2), @other_not_dued decimal(21,4), @fin_dav_not_booked decimal(21,4),
		@fin_dav_not_dued decimal(21,4), @ex_g1_davek_fin decimal(21,4), @dobrocno bit, @max_due_days int, @ex_g1_davek decimal(18,2)


DECLARE CONT_CRZ CURSOR FAST_FORWARD FOR

SELECT
co.id_cont, co.id_pog, co.id_kupca, IsNull(co.dat_aktiv, @default_date_row), co.ex_max_datum_dok,
case when tec.id_tec_new is null then  
	case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end
else 
	case when tecnew.id_val = 'KM' then 'BAM' when tecnew.id_val = 'DIN' then 'RSD' else tecnew.id_val end
end, 
case when tec.id_tec_new is null then co.id_tec else tec.id_tec_new end, co.id_vrste,
co.vr_val, co.net_nal, co.status_akt, co.nacin_leas, 
{1}.dbo.gfn_Xchange('000', co.ex_g1_neto, co.id_tec, @date_to, @id_oc_report), 
{1}.dbo.gfn_Xchange('000', co.ex_g1_neto_opc_nezap, co.id_tec, @date_to, @id_oc_report), 
nl.leas_kred, nl.tip_knjizenja, vo.id_grupe, cu.p_status, IsNull(c.ex_dni_zamude, 0),
{1}.dbo.gfn_Xchange('000', case when ((co.status_akt = 'Z' and co.dat_zakl <= @date_to) or co.aneks = 'T') then 0 else co.varscina end, co.id_tec, @date_to, @id_oc_report),
{1}.dbo.gfn_Xchange('000', co.ex_g1_davek_fin, co.id_tec, @date_to, @id_oc_report),
dobrocno,
case when @company_id = 'RLHR' then 
		case when (nl.tip_knjizenja = 1 and co.dat_aktiv < '20050101') then 1 else 0 end      
     when @company_id = 'RLSI' then
        case when nl.tip_knjizenja = 1 and co.nacin_leas NOT IN ('ON') then 1 else 0 end
     when @company_id = 'RRRS' then
        case when nl.tip_knjizenja = 1 and co.nacin_leas NOT IN ('OX') then 1 else 0 end
     else -- RLRS  RLBH
        case when nl.tip_knjizenja = 1 then 1 else 0 end
end,
case when @company_id = 'RLHR' then
		case when (nl.tip_knjizenja = 1 and co.dat_aktiv >= '20050101') then 0 else 1 end
     when @company_id = 'RLSI' then
        case when nl.tip_knjizenja = 1 AND co.nacin_leas IN ('ON') then 0 else 1 end
     when @company_id = 'RRRS' then
        case when nl.tip_knjizenja = 1 AND co.nacin_leas IN ('OX') then 0 else 1 end
     else 1 -- RLRS, RLBH
end,
case when nl.ddv_takoj = 1 then {1}.dbo.gfn_Xchange('000', co.ex_g1_davek, co.id_tec, @date_to, @id_oc_report) - {1}.dbo.gfn_Xchange('000', co.ex_g1_davek_fin, co.id_tec, @date_to, @id_oc_report) else 0 end

FROM {1}.dbo.oc_contracts co
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON co.id_kupca = pe.id_kupca AND co.id_oc_report = pe.id_oc_report
INNER JOIN {1}.dbo.nacini_l nl ON co.id_oc_report = nl.id_oc_report and co.nacin_leas = nl.nacin_leas
INNER JOIN {1}.dbo.vrst_opr vo ON co.id_oc_report = vo.id_oc_report and co.id_vrste = vo.id_vrste
INNER JOIN {1}.dbo.oc_customers cu ON co.id_kupca = cu.id_kupca and co.id_oc_report = cu.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON co.id_tec = tec.id_tec and co.id_oc_report = tec.id_oc_report
LEFT JOIN {1}.dbo.tecajnic tecnew ON tec.id_tec_new = tecnew.id_tec and tec.id_oc_report = tecnew.id_oc_report
LEFT JOIN  (select cl.id_cont, max(cl.ex_dni_zamude) as ex_dni_zamude
			from {1}.dbo.oc_claims cl
			where cl.evident = '*' and id_oc_report = @id_oc_report
			group by cl.id_cont) c on co.id_cont = c.id_cont
WHERE co.id_oc_report = @id_oc_report
AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
ORDER BY co.id_pog

OPEN CONT_CRZ

FETCH NEXT FROM CONT_CRZ INTO @id_cont, @id_pog, @id_kupca, @dat_aktiv, @ex_max_datum_dok, @id_val, @id_tec,
                              @id_vrste, @vr_val, @net_nal, @status_akt, @nacin_leas, @ex_g1_neto, @ex_g1_neto_opc_nezap,
                              @leas_kred, @tip_knjizenja, @id_grupe, @p_status, @ex_dni_zamude, @varscina, @ex_g1_davek_fin, @dobrocno,
							  @ol_na_nacin_fl, @financni_leasing, @ex_g1_davek
WHILE @@FETCH_STATUS = 0
BEGIN

IF @leas_kred = 'K' BEGIN
      SET @leasing_type = 'LO'
END ELSE BEGIN
	IF @financni_leasing = 1 BEGIN SET @leasing_type = 'FL' END
	ELSE BEGIN SET @leasing_type = 'OL' END
END

set @provision_amount = 0 set @total_odr = 0 set @neto_not_booked = 0 set @neto_not_dued = 0 set @other_not_dued = 0 set @fin_dav_not_booked = 0
set @fin_dav_not_dued = 0 set @max_due_days = 0
    
set @provision_amount = IsNull((SELECT sum(IsNull(lsk.kredit_dom - lsk.debit_dom, 0))
									FROM {1}.dbo.oc_lsk lsk
									WHERE lsk.id_oc_report = @id_oc_report
									AND lsk.id_cont = @id_cont
									AND lsk.konto IN (SELECT pa.konto FROM {2}.dbo.b2provision_accounts pa)), 0)


									
SELECT --iznos glavnice u neproknjiûenim ratama koji se mora spremiti u buduÊa potraûivanja (buduÊa glavnica) - nije uknjuËen u total ODR
	   @total_odr = IsNull(SUM(case when evident='*' and ex_dni_zamude >= 0
                                          then IsNull(ex_saldo_dom, 0)
                                          else 0 end), 0),           
       @neto_not_booked = IsNull(SUM(case when cl.evident='' and vt.sif_terj in ('LOBR','OPC','POLO','VARS')
										      then {1}.dbo.gfn_Xchange('000', (IsNull(cl.ex_debit_val_claim, 0)) * (cl.neto / cl.debit), cl.id_tec, @date_to, @id_oc_report)
								    	  else 0 end), 0),
	   --iznos glavnice u proknjiûenim ratama koji imaju datum dospijeÊa u buduÊnosti pa se mora spremiti u buduÊa potraûivanja (buduÊa glavnica)- nije uknjuËen u total ODR
       @neto_not_dued = IsNull(SUM(case when cl.evident='*' and cl.ex_dni_zamude<0 and vt.sif_terj in ('LOBR','OPC','POLO','VARS')
										    then {1}.dbo.gfn_Xchange('000', (IsNull(cl.ex_debit_val_claim, 0)) * (cl.neto / cl.debit), cl.id_tec, @date_to, @id_oc_report)
										else 0 end), 0),
	   @other_not_dued = IsNull(SUM(case when cl.evident='*' and cl.ex_dni_zamude<0 and vt.sif_terj not in ('LOBR','OPC','POLO','VARS')
											then IsNull(cl.ex_debit_dom, 0)
										 else 0 end), 0),
	   @fin_dav_not_booked = IsNull(SUM(case when cl.evident='' and vt.sif_terj in ('LOBR','OPC','POLO','VARS') and @dobrocno = 1
											then {1}.dbo.gfn_Xchange('000', IsNull(cl.ex_debit_val_claim, 0) * (cl.davek / cl.debit), cl.id_tec, @date_to, @id_oc_report)
									  else 0 end), 0),
	   @fin_dav_not_dued = IsNull(SUM(case when cl.evident='*' and cl.ex_dni_zamude<0 and vt.sif_terj in ('LOBR','OPC','POLO','VARS') and @dobrocno = 1
										then {1}.dbo.gfn_Xchange('000', IsNull(cl.ex_debit_val_claim, 0) * (cl.davek / cl.debit), cl.id_tec, @date_to, @id_oc_report)
									else 0 end), 0),
	   @max_due_days = max(cl.ex_dni_zamude)
FROM {1}.dbo.oc_claims cl
INNER JOIN {1}.dbo.vrst_ter vt ON cl.id_terj = vt.id_terj and cl.id_oc_report = vt.id_oc_report
WHERE cl.id_oc_report = @id_oc_report AND cl.id_cont = @id_cont
GROUP BY cl.id_cont,cl.id_oc_report

set @future_capital_total = @ex_g1_neto + IsNull(@neto_not_booked, 0) + IsNull(@neto_not_dued, 0) + IsNull(@other_not_dued, 0) + @ex_g1_davek_fin + IsNull(@fin_dav_not_booked, 0) + IsNull(@fin_dav_not_dued, 0) + @ex_g1_davek
set @leasing_residual_amount = @ex_g1_neto_opc_nezap

set @product_type_id = @leasing_type + '-' + @id_grupe
set @product_subtype_id = @nacin_leas + '-' + @id_vrste
set @group_product_type_id = {2}.dbo.gfn_GetOpprodGpc(@leasing_type, @id_vrste, @nacin_leas, @company_id)

--number of eligible collaterals for contract
declare @num_elligible_coll int
set @num_elligible_coll = (select count(*) from {1}.dbo.dokument where id_cont = @id_cont and id_oc_report = @id_oc_report and is_elligible = 1)

-- insert into RETAIL_ST_COUNTERPARTY_PAST_DUE (all contracts)
INSERT INTO {2}.dbo.retail_st_counterparty_past_due
(COUNTERPARTY_ID, COUNTERPARTY_INDICATOR, CUSTOMER_ID, EFFECTIVE_DATE, CURRENT_DAYS_PAST_DUE, APPLICATION_ID, ENTITY_ID, SOURCE_SYSTEM_ID, 
 COUNTERP_APPLICATION_ID, COUNTERP_ENTITY_ID, COUNTERP_SOURCE_SYSTEM_ID, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, 
 CUSTOMER_SOURCE_SYSTEM_ID)
VALUES
(@id_pog, case when @leas_kred = 'K' then 'L' when @leas_kred = 'L' and @financni_leasing = 1 then 'LS' when @leas_kred = 'L' and @financni_leasing = 0 then 'AC' end, @id_kupca, 
 @date_to, case when @ex_dni_zamude is null then 0 when @ex_dni_zamude < 0 then 0 else @ex_dni_zamude end, @application_id, @company_id, @source_system_id, 
 @application_id, @company_id, @source_system_id,@application_id, @company_id, @source_system_id
)



--insert into ST_PRODUCT_TYPE_SUBTYPE
IF(NOT EXISTS (SELECT product_type_id, product_subtype_id
               FROM {2}.dbo.retail_st_product_type_subtype
               WHERE product_type_id = @product_type_id
               AND product_subtype_id = @product_subtype_id
			  ) 
AND NOT EXISTS (SELECT product_type_id, product_subtype_id
                FROM {2}.dbo.st_product_type_subtype
                WHERE product_type_id = @product_type_id
                AND product_subtype_id = @product_subtype_id
			   )
  )
BEGIN
    INSERT INTO {2}.dbo.retail_st_product_type_subtype
    (PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, GROUP_PRODUCT_TYPE_ID, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, DATE_FROM, STATUS_INDICATOR)
    VALUES(@product_type_id, @product_subtype_id, @group_product_type_id, @application_id, @source_system_id, @company_id, @date_to, 'A')
END

IF @leas_kred = 'L' AND @financni_leasing = 0 BEGIN 
		INSERT INTO {2}.dbo.retail_st_account
		(ACCOUNT_ID, CUSTOMER_ID, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, GROUP_ACCOUNT_TYPE_ID, STATUS_INDICATOR, SECURED_INDICATOR, 
		OVERDRAFT_AMOUNT, DATE_OPENED, OVERDRAFT_START_DATE, OVERDRAFT_MATURITY_DATE, PROVISION_AMOUNT_LCY, PRINCIPAL_CURRENCY_ISO_CODE,
		DEFAULT_INDICATOR, COMMITMENT_INDICATOR, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, 
		CUSTOMER_SOURCE_SYSTEM_ID, PROD_TP_APPLICATION_ID, PROD_TP_ENTITY_ID,PROD_TP_SOURCE_SYSTEM_ID, APPLICATION_ID, 
		SOURCE_SYSTEM_ID, ENTITY_ID, DATE_FROM)
		VALUES
		(@id_pog, @id_kupca, @product_type_id, @product_subtype_id, 'C', case when @status_akt = 'A' then 'A' else 'C' end, case when @num_elligible_coll > 0 then 'Y' else 'N' end, 0/**/, @dat_aktiv, @default_date_ss, 
		@default_date_ss, case when @max_due_days >= 90 then @provision_amount else 0 end, @id_val,
		case when @p_status in ('90D', 'D1', 'D12') then 'Y' else 'N' end, 'Y', @application_id, @company_id, @source_system_id,
		@application_id, @company_id, @source_system_id, @application_id, @source_system_id, @company_id, @date_to)

		INSERT INTO {2}.dbo.retail_st_account_balance
		(ACCOUNT_ID, CUSTOMER_ID, EFFECTIVE_DATE, CLEARED_BALANCE_LCY, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, ACCOUNT_APPLICATION_ID,
		ACCOUNT_ENTITY_ID, ACCOUNT_SOURCE_SYSTEM_ID, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, 
		PROD_TP_APPLICATION_ID, PROD_TP_ENTITY_ID, PROD_TP_SOURCE_SYSTEM_ID, APPLICATION_ID, ENTITY_ID, SOURCE_SYSTEM_ID)
		VALUES
		(@id_pog, @id_kupca, @date_to, -(@total_odr + @other_not_dued), @product_type_id, @product_subtype_id, @application_id, @company_id, 
		@source_system_id, @application_id, @company_id, @source_system_id, @application_id, @company_id, @source_system_id, 
		@application_id, @company_id, @source_system_id)
END
ELSE BEGIN
    IF @leas_kred = 'L' AND @financni_leasing = 1 BEGIN
    
		-- RISK_INDICATOR = 0
		IF @ol_na_nacin_fl = 1 BEGIN
			set @leasing_npv_amount = IsNull(@total_odr, 0) + @future_capital_total - @leasing_residual_amount + @varscina
			set @leasing_residual_amount = @leasing_residual_amount
			set @current_principal = 0
		END ELSE
		-- RISK_INDICATOR = 1
		IF @ol_na_nacin_fl = 0 BEGIN
			set @leasing_npv_amount = IsNull(@total_odr, 0) + @future_capital_total 
			set @leasing_residual_amount = 0
			set @current_principal = 0
		END
		  
        INSERT INTO {2}.dbo.retail_st_leasing
        (CONTRACT_ID, CUSTOMER_ID, PRINCIPAL_CURRENCY_ISO_CODE, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, DEAL_DATE, MATURITY_DATE, RISK_INDICATOR,
         AMORTISATION_TYPE, SECURED_INDICATOR, STATUS_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID,
         DATE_FROM, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, PROD_TP_APPLICATION_ID,
         PROD_TP_ENTITY_ID, PROD_TP_SOURCE_SYSTEM_ID, PROVISION_AMOUNT_LCY, DEFAULT_INDICATOR)
        VALUES
        (@id_pog, @id_kupca, @id_val, @product_type_id, @product_subtype_id, @dat_aktiv, @ex_max_datum_dok, /*case @ol_na_nacin_fl when 1 then '0' else '1' end*/ 'N', 
        'TOTAL', case when @num_elligible_coll > 0 then 'Y' else 'N' end, case when @status_akt = 'A' then 'A' else 'C' end, 
         @application_id, @source_system_id, @company_id, @date_to, @application_id, @company_id, @source_system_id,
         @application_id, @company_id, @source_system_id, case when @max_due_days >= 90 then @provision_amount else 0 end, 
		 case when @p_status in ('90D', 'D1', 'D12') then 'Y' else 'N' end)

    END
    
    IF @leas_kred = 'K' BEGIN
    
		set @current_principal = IsNull(@total_odr, 0) + @future_capital_total
		set @leasing_npv_amount = 0
		set @leasing_residual_amount = 0
		
        INSERT INTO {2}.dbo.RETAIL_ST_CUSTOMER_LOAN
        (CONTRACT_ID, CUSTOMER_ID, PRINCIPAL_CURRENCY_ISO_CODE, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, DEAL_DATE, MATURITY_DATE, SECURED_INDICATOR, STATUS_INDICATOR, 
         APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, DATE_FROM, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, 
         PROD_TP_APPLICATION_ID, PROD_TP_ENTITY_ID, PROD_TP_SOURCE_SYSTEM_ID, PROVISION_AMOUNT_LCY, DEFAULT_INDICATOR)
        VALUES
        (@id_pog, @id_kupca, @id_val, @product_type_id, @product_subtype_id, @dat_aktiv, @ex_max_datum_dok,
         case when @num_elligible_coll > 0 then 'Y' else 'N' end, case when @status_akt = 'A' then 'A' else 'C' end, @application_id, @source_system_id, @company_id,
         @date_to, @application_id, @company_id, @source_system_id, @application_id, @company_id, @source_system_id,
         case when @max_due_days >= 90 then @provision_amount else 0 end, 
		 case when @p_status in ('90D', 'D1', 'D12') then 'Y' else 'N' end)
    END

    INSERT INTO {2}.dbo.retail_st_contract_balance
    (CONTRACT_ID, COUNTERPARTY_INDICATOR, CUSTOMER_ID, EFFECTIVE_DATE, PRODUCT_TYPE_ID, PRODUCT_SUBTYPE_ID, CURRENT_PRINCIPAL_LCY,
     APPLICATION_ID, ENTITY_ID, SOURCE_SYSTEM_ID, CONTRACT_APPLICATION_ID, CONTRACT_ENTITY_ID, CONTRACT_SOURCE_SYSTEM_ID, 
     CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, PROD_TP_APPLICATION_ID, PROD_TP_ENTITY_ID,
     PROD_TP_SOURCE_SYSTEM_ID, LEASING_NPV_CURRENCY_ISO_CODE, LEASING_NPV_AMOUNT_LCY, LEASING_RESIDUAL_CURRENCY_CODE,
     LEASING_RESIDUAL_AMOUNT_LCY)
    VALUES
    (@id_pog, case when @leas_kred = 'L' then 'LS' when @leas_kred = 'K' then 'L' end, @id_kupca, 
	 @date_to, @product_type_id, @product_subtype_id, case when @leas_kred = 'K' then @current_principal else 0 end, 
     @application_id, @company_id, @source_system_id, @application_id, @company_id, @source_system_id, @application_id, @company_id, 
     @source_system_id, @application_id, @company_id, @source_system_id, @id_val, @leasing_npv_amount, @id_val, @leasing_residual_amount)

END


FETCH NEXT FROM CONT_CRZ INTO @id_cont, @id_pog, @id_kupca, @dat_aktiv, @ex_max_datum_dok, @id_val, @id_tec,
                              @id_vrste, @vr_val, @net_nal, @status_akt, @nacin_leas, @ex_g1_neto, @ex_g1_neto_opc_nezap,
                              @leas_kred, @tip_knjizenja, @id_grupe, @p_status, @ex_dni_zamude, @varscina, @ex_g1_davek_fin, @dobrocno,
							  @ol_na_nacin_fl, @financni_leasing, @ex_g1_davek

END

CLOSE CONT_CRZ
DEALLOCATE CONT_CRZ

----------------------------------------------------RETAIL_FRAMES-------------------------------------------------------------------

-- FRAMES
declare @id_frame int
declare @dat_odobritve datetime
declare @dat_zak datetime
declare @velja_do datetime
declare @znesek_dom decimal(21,4)
declare @plac_dom decimal(21,4)
declare @frame_type char(3)
declare @b2_eligible bit

DECLARE FRM_CRZ CURSOR FAST_FORWARD FOR
SELECT fr.id_frame, fr.id_kupca, fr.id_tec, fr.dat_odobritve, fr.dat_zak, fr.frame_type, cu.p_status, fr.velja_do,
case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end, fr.b2_eligible
FROM {1}.dbo.oc_frames fr
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON fr.id_kupca = pe.id_kupca AND fr.id_oc_report = pe.id_oc_report
INNER JOIN {1}.dbo.oc_customers cu ON fr.id_oc_report = cu.id_oc_report AND fr.id_kupca = cu.id_kupca
INNER JOIN {1}.dbo.tecajnic tec ON fr.id_oc_report = tec.id_oc_report AND fr.id_tec = tec.id_tec
WHERE fr.id_oc_report = @id_oc_report 
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
AND
(
	(
		fr.b2_eligible = 1
		AND
		(fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to)))
	)
)	
ORDER BY fr.id_frame
   
OPEN FRM_CRZ

FETCH NEXT FROM FRM_CRZ INTO @id_frame, @id_kupca, @id_tec, @dat_odobritve, @dat_zak, @frame_type, @p_status, @velja_do, @id_val, @b2_eligible
WHILE @@FETCH_STATUS = 0
BEGIN

INSERT INTO {2}.dbo.retail_st_limit_reference
(LIMIT_REFERENCE, SECURED_INDICATOR, COMMITMENT_INDICATOR, CURRENCY_ISO_CODE, START_DATE, EXPIRY_DATE, COUNTERPARTY_ID, COUNTERP_LEVEL_INDICATOR, TOP_PARENT_INDICATOR, 
 HIERARCHY_LEVEL, HIERARCHY_DEPTH, PARENT_LIMIT_ID, TOP_PARENT_LIMIT_ID, STATUS_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, 
 TOP_PARNT_LIM_APPLICATION_ID, TOP_PARNT_LIM_SOURCE_SYSTEM_ID, TOP_PARNT_LIM_ENTITY_ID, DATE_FROM, 
 COUNTERP_APPLICATION_ID, COUNTERP_ENTITY_ID, COUNTERP_SOURCE_SYSTEM_ID, DEFAULT_INDICATOR, CUSTOMER_ID, 
 CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, CUSTOMER_SOURCE_SYSTEM_ID, NOTICE_INDICATOR, NOTICE_DAYS_NUMBER,
 GROUP_LIMIT_TYPE_ID, GRP_LMT_TP_APPLICATION_ID, GRP_LMT_TP_ENTITY_ID, GRP_LMT_TP_SOURCE_SYSTEM_ID)
VALUES(@id_frame, 'N', 'Y', @id_val, @dat_odobritve, case when @dat_zak <= @date_to then @dat_zak else ISNULL(@velja_do, @default_date_row) end, @id_frame,
       case when @frame_type = 'POG' OR @frame_type = 'REV' then 'G' else 'S' end, 'Y', 1, 1, @nomap, @id_frame,
       case when @dat_zak <= @date_to then 'I' else 'A' end, 
	   @application_id, @source_system_id, @company_id, 
	   @application_id, @source_system_id, @company_id, @date_to, 
	   @application_id, @company_id, @source_system_id, @nomap, @id_kupca, 
	   @application_id, @company_id, @source_system_id, 'N', 0,
	   case when @frame_type = 'POG' OR @frame_type = 'REV' then 'CC' else 'OC' end, @application_id, @company_id, @source_system_id)

FETCH NEXT FROM FRM_CRZ INTO @id_frame, @id_kupca, @id_tec, @dat_odobritve, @dat_zak, @frame_type, @p_status, @velja_do, @id_val, @b2_eligible
END

CLOSE FRM_CRZ
DEALLOCATE FRM_CRZ

--FRAMES_COUNTERPARTY
DECLARE FRM_CRZ1 CURSOR  FOR
SELECT fr.id_frame, fr.id_kupca, fr.id_tec, fr.dat_odobritve, fr.dat_zak, 
{1}.dbo.gfn_Xchange('000', fr.znesek_val, fr.id_tec, @date_to, @id_oc_report), plac_dom, fr.frame_type, c.id_pog, 
case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end, nl.leas_kred,
case when @company_id = 'RLHR' then
		case when (nl.tip_knjizenja = 1 and c.dat_aktiv >= '20050101') then 0 else 1 end
	 when @company_id = 'RLSI' then
		case when nl.tip_knjizenja = 1 AND c.nacin_leas IN ('ON') then 0 else 1 end
     when @company_id = 'RRRS' then
		case when nl.tip_knjizenja = 1 AND c.nacin_leas IN ('OX') then 0 else 1 end
	 else 1
end, fr.b2_eligible, c.status_akt
FROM {1}.dbo.oc_frames fr
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON fr.id_kupca = pe.id_kupca AND fr.id_oc_report = pe.id_oc_report
LEFT JOIN {1}.dbo.frame_pogodba fp on fr.id_frame = fp.id_frame AND fr.id_oc_report = fp.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON fr.id_tec = tec.id_tec AND fr.id_oc_report = tec.id_oc_report
LEFT JOIN {1}.dbo.oc_contracts c ON c.id_cont = fp.id_cont AND c.id_oc_report = fp.id_oc_report
LEFT JOIN {1}.dbo.nacini_l nl ON c.nacin_leas = nl.nacin_leas AND c.id_oc_report = nl.id_oc_report
WHERE fr.id_oc_report = @id_oc_report
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
AND
(
	(
		fr.b2_eligible = 1
		AND
		((fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to))))
		AND 
		(((c.status_akt = 'A' OR (c.status_akt = 'Z' AND ((month(c.dat_zakl) = month(@date_to) and year(c.dat_zakl) = year(@date_to)) OR c.dat_zakl > @date_to))) OR c.status_akt is null)) 
	)
)	

UNION

SELECT fr.id_frame, fr.id_kupca, fr.id_tec, fr.dat_odobritve, fr.dat_zak, 
{1}.dbo.gfn_Xchange('000', fr.znesek_val, fr.id_tec, @date_to, @id_oc_report), null, fr.frame_type, null, 
case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end, 
null, null, fr.b2_eligible, null
FROM {1}.dbo.oc_frames fr
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON fr.id_kupca = pe.id_kupca AND fr.id_oc_report = pe.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON fr.id_tec = tec.id_tec AND fr.id_oc_report = tec.id_oc_report
WHERE fr.id_oc_report = @id_oc_report
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
AND
(
	(
		fr.b2_eligible = 1
		AND
		((fr.dat_zak IS NULL OR (fr.dat_zak IS NOT NULL AND ((month(fr.dat_zak) = month(@date_to) and year(fr.dat_zak) = year(@date_to)) OR fr.dat_zak > @date_to))))
	)
)
AND EXISTS
(
SELECT fp.id_frame 
FROM {1}.dbo.frame_pogodba fp
WHERE fp.id_frame = fr.id_frame AND fp.id_oc_report = @id_oc_report
)
AND NOT EXISTS
(
SELECT fp.id_frame 
FROM {1}.dbo.frame_pogodba fp
INNER JOIN {1}.dbo.oc_contracts c ON fp.id_oc_report = c.id_oc_report AND fp.id_cont = c.id_cont
WHERE fp.id_frame = fr.id_frame 
AND (c.status_akt = 'A' OR (c.status_akt = 'Z' AND ((month(c.dat_zakl) = month(@date_to) and year(c.dat_zakl) = year(@date_to)) OR c.dat_zakl > @date_to)))
AND fp.id_oc_report = @id_oc_report
)

   
OPEN FRM_CRZ1

FETCH NEXT FROM FRM_CRZ1 INTO @id_frame, @id_kupca, @id_tec, @dat_odobritve, @dat_zak, @znesek_dom, @plac_dom, @frame_type, @id_pog, @id_val, @leas_kred, @financni_leasing, @b2_eligible, @status_akt
WHILE @@FETCH_STATUS = 0
BEGIN

INSERT INTO {2}.dbo.retail_st_customer_counterp_limit
(CUSTOMER_ID, COUNTERPARTY_ID, COUNTERPARTY_INDICATOR, LIMIT_REFERENCE, EFFECTIVE_DATE, ONLINE_LIMIT_AMOUNT_LCY,
 APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, CUSTOMER_APPLICATION_ID, CUSTOMER_ENTITY_ID, 
 CUSTOMER_SOURCE_SYSTEM_ID, LMT_REF_APPLICATION_ID, LMT_REF_ENTITY_ID, LMT_REF_SOURCE_SYSTEM_ID, 
 COUNTERP_APPLICATION_ID, COUNTERP_ENTITY_ID, COUNTERP_SOURCE_SYSTEM_ID, AVAILABLE_LIMIT_CURRENCY_CODE, 
 ONLINE_LIMIT_CURRENCY_ISO_CODE)
VALUES(@id_kupca, case when @id_pog is null then @na else cast(@id_pog as varchar(140)) end,
	   case when @leas_kred = 'K' then 'L' when @leas_kred = 'L' and @financni_leasing = 1 then 'LS' when @leas_kred = 'L' and @financni_leasing = 0 then 'AC' when @leas_kred is null then @nomap end,
	   @id_frame, @date_to, @znesek_dom, 
	   @application_id, @source_system_id, @company_id, @application_id, @company_id, @source_system_id,
	   @application_id, @company_id, @source_system_id, @application_id, @company_id, @source_system_id, @id_val, @id_val)

FETCH NEXT FROM FRM_CRZ1 INTO @id_frame, @id_kupca, @id_tec, @dat_odobritve, @dat_zak, @znesek_dom, @plac_dom, @frame_type, @id_pog, @id_val, @leas_kred, @financni_leasing, @b2_eligible, @status_akt
END

CLOSE FRM_CRZ1
DEALLOCATE FRM_CRZ1

-------------------------------------------------RETAIL_COLLATERALS-----------------------------------------------------------------
--popravi join id_kupca
DECLARE DOK_CRZ CURSOR FAST_FORWARD FOR
SELECT 
dok.id_dokum,dok.id_obl_zav,dok.id_cont,case when dok.id_kupca is null then co.id_kupca else dok.id_kupca end,IsNull(dok.zacetek, @default_date_row),
IsNull(dok.velja_do, @default_date_spec),
IsNull({1}.dbo.gfn_Xchange('000',dok.vrednost,case when tecd.id_tec is null then co.id_tec else dok.id_tec end,@date_to,@id_oc_report), 0),
IsNull(dok.dat_ocene, @default_date_row),
IsNull({1}.dbo.gfn_Xchange('000',dok.ocen_vred,case when tecd.id_tec is null then co.id_tec else dok.id_tec end,@date_to,@id_oc_report), 0),
dok.id_hipot, dok.stevilka,col.collat_type_b2, co.dat_aktiv, d.is_elligible, dok.is_elligible, d.eval_frequency, 
case when tecd.id_tec is null then 
	case when tec.id_val = 'KM' then 'BAM' when tec.id_val = 'DIN' then 'RSD' else tec.id_val end
else
	case when tecd.id_val = 'KM' then 'BAM' when tecd.id_val = 'DIN' then 'RSD' else tecd.id_val end
end,
co.id_pog, nl.leas_kred,
case when @company_id = 'RLHR' then
		case when (nl.tip_knjizenja = 1 and co.dat_aktiv >= '20050101') then 0 else 1 end
   when @company_id = 'RLSI' then
		case when nl.tip_knjizenja = 1 AND co.nacin_leas IN ('ON') then 0 else 1 end
   when @company_id = 'RRRS' then
		case when nl.tip_knjizenja = 1 AND co.nacin_leas IN ('OX') then 0 else 1 end
   else 1
end
FROM {1}.dbo.oc_contracts co
LEFT JOIN (SELECT pet.*
           FROM {1}.dbo.p_eval pet
           INNER JOIN (SELECT id_oc_report, id_kupca, MAX(dat_eval) AS dat_eval
                       FROM {1}.dbo.p_eval
                       GROUP BY id_oc_report, id_kupca) me ON pet.id_kupca = me.id_kupca AND pet.dat_eval = me.dat_eval AND pet.id_oc_report = me.id_oc_report
           WHERE pet.id_oc_report = @id_oc_report) pe ON co.id_kupca = pe.id_kupca AND co.id_oc_report = pe.id_oc_report
INNER JOIN {1}.dbo.dokument dok ON co.id_cont = dok.id_cont AND co.id_oc_report = dok.id_oc_report
INNER JOIN {1}.dbo.dok d ON dok.id_obl_zav = d.id_obl_zav AND dok.id_oc_report = d.id_oc_report
INNER JOIN {1}.dbo.tecajnic tec ON co.id_tec = tec.id_tec AND co.id_oc_report = tec.id_oc_report
LEFT JOIN {1}.dbo.tecajnic tecd ON dok.id_tec = tecd.id_tec AND dok.id_oc_report = tecd.id_oc_report
INNER JOIN {1}.dbo.nacini_l nl ON nl.id_oc_report = co.id_oc_report AND nl.nacin_leas = co.nacin_leas
INNER JOIN {2}.dbo.b2collat col ON dok.id_obl_zav = col.id_obl_zav
WHERE dok.id_oc_report = @id_oc_report
AND (co.status_akt = 'A' OR (co.status_akt = 'Z' AND ((month(co.dat_zakl) = month(@date_to) and year(co.dat_zakl) = year(@date_to)) OR co.dat_zakl > @date_to)))
AND (dok.id_hipot = col.id_hipot OR col.id_hipot = '*')
AND substring(pe.eval_model, 1, 2) IN ('01', '20')
AND dok.ima = 1

declare @id_dokum varchar(140), @id_obl_zav char(2), @id_kupca_dok char(6), @zacetek datetime, @vrednost decimal(21,4),
        @dat_ocene datetime, @collat_type_b2 varchar(140), @execution_value decimal(18,2), @ocen_vred numeric(18,2), @id_hipot char(5),
        @stevilka char(30), @is_elligible bit, @is_elligible_coll bit, @eval_frequency int
  
OPEN DOK_CRZ

FETCH NEXT FROM DOK_CRZ INTO @id_dokum,@id_obl_zav,@id_cont,@id_kupca_dok,@zacetek,@velja_do,@vrednost,
                             @dat_ocene,@ocen_vred,@id_hipot,@stevilka,@collat_type_b2, @dat_aktiv,
							 @is_elligible, @is_elligible_coll, @eval_frequency, @id_val, @id_pog, @leas_kred,
							 @financni_leasing
                               

WHILE @@FETCH_STATUS = 0
BEGIN

if(@collat_type_b2 = '10' OR @collat_type_b2 = '14')
    set @execution_value = @ocen_vred 
else
    set @execution_value = @vrednost

INSERT INTO {2}.dbo.retail_st_collateral
(COLLATERAL_ID, COLLATERAL_TYPE_BASLE2_ID, COLLATERAL_CUSTOMER_ID, NOMINAL_CURRENCY_ISO_CODE, START_DATE, EXPIRY_DATE,
 EXECUTION_VALUE_LCY, ELIGIBILITY_INDICATOR, STATUS_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, DATE_FROM, 
 COLL_CUST_APPLICATION_ID, COLL_CUST_SOURCE_SYSTEM_ID, COLL_CUST_ENTITY_ID, EXECUTION_CURRENCY_ISO_CODE)
VALUES('COLL-' + @id_dokum, @collat_type_b2, @id_kupca_dok, @id_val, @zacetek, @velja_do, @execution_value,
       case when @is_elligible_coll = 1 then 'Y' else 'N' end, 
	   case when month(@velja_do)=month(@date_to) AND year(@velja_do)=year(@date_to) then 'C' else 'A' end, 
	   @application_id, @source_system_id, @company_id, @date_to, 
	   @application_id, @source_system_id, @company_id, @id_val)

INSERT INTO {2}.dbo.retail_st_collateral_counterparty
(COLLATERAL_ID, SECURED_COUNTERPARTY_ID, SECURED_COUNTERPARTY_INDICATOR, EFFECTIVE_DATE, ALLOCATION_PERCENTAGE, 
 APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID, COLL_APPLICATION_ID, COLL_ENTITY_ID, COLL_SOURCE_SYSTEM_ID, 
 SECURED_CNP_APPLICATION_ID, SECURED_CNP_ENTITY_ID, SECURED_CNP_SOURCE_SYSTEM_ID, STATUS_INDICATOR)
VALUES('COLL-' + @id_dokum, @id_pog, 
	   case when @leas_kred = 'K' then 'L' when @leas_kred = 'L' and @financni_leasing = 1 then 'LS' when @leas_kred = 'L' and @financni_leasing = 0 then 'AC' end, 
       @date_to, 100, @application_id, @source_system_id, @company_id, 
       @application_id, @company_id, @source_system_id, @application_id, @company_id, @source_system_id, 
	   case when month(@velja_do)=month(@date_to) AND year(@velja_do)=year(@date_to) then 'C' else 'A' end)

FETCH NEXT FROM DOK_CRZ INTO @id_dokum,@id_obl_zav,@id_cont,@id_kupca_dok,@zacetek,@velja_do,@vrednost,
                             @dat_ocene,@ocen_vred,@id_hipot,@stevilka,@collat_type_b2, @dat_aktiv,
							 @is_elligible, @is_elligible_coll, @eval_frequency, @id_val, @id_pog, @leas_kred,
							 @financni_leasing
END

CLOSE DOK_CRZ
DEALLOCATE DOK_CRZ


INSERT INTO {2}.dbo.retail_st_counterparty_indicator
(COUNTERPARTY_INDICATOR, COUNTERPARTY_INDICATOR_DESCR, DATE_FROM, SOURCE_DATE, QUALITY_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID)
VALUES('LS', @nomap, @date_to, @default_date_ss, NULL, @application_id, @source_system_id, @company_id)

INSERT INTO {2}.dbo.retail_st_counterparty_indicator
(COUNTERPARTY_INDICATOR, COUNTERPARTY_INDICATOR_DESCR, DATE_FROM, SOURCE_DATE, QUALITY_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID)
VALUES('L', @nomap, @date_to, @default_date_ss, NULL, @application_id, @source_system_id, @company_id)

INSERT INTO {2}.dbo.retail_st_counterparty_indicator
(COUNTERPARTY_INDICATOR, COUNTERPARTY_INDICATOR_DESCR, DATE_FROM, SOURCE_DATE, QUALITY_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID)
VALUES('AC', @nomap, @date_to, @default_date_ss, NULL, @application_id, @source_system_id, @company_id)

INSERT INTO {2}.dbo.retail_st_counterparty_indicator
(COUNTERPARTY_INDICATOR, COUNTERPARTY_INDICATOR_DESCR, DATE_FROM, SOURCE_DATE, QUALITY_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID)
VALUES('LIM', @nomap, @date_to, @default_date_ss, NULL, @application_id, @source_system_id, @company_id)

INSERT INTO {2}.dbo.retail_st_counterparty_indicator
(COUNTERPARTY_INDICATOR, COUNTERPARTY_INDICATOR_DESCR, DATE_FROM, SOURCE_DATE, QUALITY_INDICATOR, APPLICATION_ID, SOURCE_SYSTEM_ID, ENTITY_ID)
VALUES('COL', @nomap, @date_to, @default_date_ss, NULL, @application_id, @source_system_id, @company_id)       Ñ/  <?xml version="1.0" encoding="utf-8" ?>
<!--
****************************************************************************************************

This file is an example of schema definition file that also serves as source
for code generators.

Set correct values of root-node attributes:

targetNamespace - namespace for XML requests
xmlns - same as targetNamespace
xmlns:mstns - same as targetNamespace

xmlns:gmi - namespace for special nodes and attributes inside this file, used by code generators. Should be "urn:gmi:nova:develop"
gmi:namespace - namespace for generated classes. Use the same value as in cs.bat file 
gmi:schema_file  name of this file. For most casses leave it as it is - "schema.xsd"

****************************************************************************************************
-->

<xs:schema
  
	targetNamespace="urn:gmi:nova:common_raiffeisen"
	elementFormDefault="qualified"
	xmlns="urn:gmi:nova:common_raiffeisen"
	xmlns:mstns="urn:gmi:nova:common_raiffeisen"
	
	xmlns:gmi="urn:gmi:nova:develop"
	gmi:namespace="GMI.Custom.Common_Raiffeisen"
	gmi:schema_file="schema.xsd"
	
	xmlns:xs="http://www.w3.org/2001/XMLSchema">


  <!--
  **************************************************************************************************** 
  Write documentation in all places as thiese texts are used by
  generator to produce nice HTML documentation of your schema.
  **************************************************************************************************** 
  -->
  <xs:annotation>
    <xs:documentation>
      This schema file describes interface of my custom module.
    </xs:documentation>
  </xs:annotation>

  <!-- 
  ****************************************************************************************************
  Add custom attributes to elements that define input requests.
  
  gmi:lego - name of lego object that will handle this request. Mandatory for input requests.
  gmi:is_blox - if true then BLOX support code will be generated. Optional.
  gmi:is_async - is this request async or not. Optional.
  **************************************************************************************************** 
  -->

	<xs:element name="basel2_prepare" gmi:lego="Basel2Export" gmi:is_blox="true" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts data export for basel II. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="snapshot_id" type="xs:int">
					<xs:annotation>
						<xs:documentation> Id of snapshot to be exported. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- 
  ****************************************************************************************************
  Each request should have its matching response, even if no real data is returned.
  ****************************************************************************************************
  -->
	<xs:element name="basel2_prepare_response">
		<xs:annotation>
			<xs:documentation> Return value of Basel II processing. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- ************************************************************************* -->


  <!-- 
  ****************************************************************************************************
  Add custom attributes to elements that define input requests.
  
  gmi:lego - name of lego object that will handle this request. Mandatory for input requests.
  gmi:is_blox - if true then BLOX support code will be generated. Optional.
  gmi:is_async - is this request async or not. Optional.
  **************************************************************************************************** 
  -->

	<xs:element name="basel2_transfer" gmi:lego="ExportB2RLCSVMain" gmi:is_blox="true" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts data export for basel II. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="snapshot_id" type="xs:int">
					<xs:annotation>
						<xs:documentation> Id of snapshot to be exported. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!--  
  ****************************************************************************************************
  Each request should have its matching response, even if no real data is returned.
  ****************************************************************************************************
  -->
	<xs:element name="basel2_transfer_response">
		<xs:annotation>
			<xs:documentation> Return value of Basel II processing. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- ************************************************************************* -->
	
	 <!-- 
  ****************************************************************************************************
  Add custom attributes to elements that define input requests.
  
  gmi:lego - name of lego object that will handle this request. Mandatory for input requests.
  gmi:is_blox - if true then BLOX support code will be generated. Optional.
  gmi:is_async - is this request async or not. Optional.
  **************************************************************************************************** 
  -->

	<xs:element name="provisions_prepare" gmi:lego="GBL_provisions_prepare" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts Provisions preparation procedure</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="id_oc_report" type="xs:int"></xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- 
  ****************************************************************************************************
  Each request should have its matching response, even if no real data is returned.
  ****************************************************************************************************
  -->
	<xs:element name="Provisions_prepare_response">
		<xs:annotation>
			<xs:documentation> Return value of provision preparation procedure. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- ************************************************************************* -->

	<xs:element name="Provisions_commit" gmi:lego="GBL_ProvisionsCommit" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation>Commits or rollbacks Provisions data. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="commit" type="xs:boolean" />
				<xs:element name="session_id" type="xs:string" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="Provisions_commit_response">
		<xs:annotation>
			<xs:documentation>Response to routine for Provision commit </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence></xs:sequence>
		</xs:complexType>
	</xs:element>
	


 <!-- 
  ****************************************************************************************************
  Add custom attributes to elements that define input requests.
  
  gmi:lego - name of lego object that will handle this request. Mandatory for input requests.
  gmi:is_blox - if true then BLOX support code will be generated. Optional.
  gmi:is_async - is this request async or not. Optional.
  **************************************************************************************************** 
  -->

	<xs:element name="mr_prepare" gmi:lego="MR_Export" gmi:is_blox="true" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts data export for market risk. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="date" type="xs:dateTime">
					<xs:annotation>
						<xs:documentation> Target date. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- 
  ****************************************************************************************************
  Each request should have its matching response, even if no real data is returned.
  ****************************************************************************************************
  -->
	<xs:element name="mr_prepare_response">
		<xs:annotation>
			<xs:documentation> Return value of market risk processing. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="mr_report_id" type="xs:string">
					<xs:annotation>
						<xs:documentation> Market risk report ID. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>


<!-- 
  ****************************************************************************************************
  Add custom attributes to elements that define input requests.
  
  gmi:lego - name of lego object that will handle this request. Mandatory for input requests.
  gmi:is_blox - if true then BLOX support code will be generated. Optional.
  gmi:is_async - is this request async or not. Optional.
  **************************************************************************************************** 
  -->

	<xs:element name="mr_transfer" gmi:lego="ExportMRCVS" gmi:is_blox="true" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts data export for market risk to csv file. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="mr_report_id" type="xs:int">
					<xs:annotation>
						<xs:documentation> Market risk report ID. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- 
  ****************************************************************************************************
  Each request should have its matching response, even if no real data is returned.
  ****************************************************************************************************
  -->
	<xs:element name="mr_transfer_response">
		<xs:annotation>
			<xs:documentation> Return value of market risk processing. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	
	<!-- 
	****************************************************************************************************
	-->
	
	<xs:element name="basel2_production_prepare" gmi:lego="Basel2ProdExport" gmi:is_blox="true" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts data export for basel II. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="basel2_production_prepare_response">
		<xs:annotation>
			<xs:documentation> Return value of Basel II processing. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="basel2_production_transfer" gmi:lego="ExportB2RLCSVProd" gmi:is_blox="true" gmi:is_async="true">
		<xs:annotation>
			<xs:documentation> Starts data export for basel II. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

 
	<xs:element name="basel2_production_transfer_response">
		<xs:annotation>
			<xs:documentation> Return value of Basel II processing. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<!-- 
	****************************************************************************************************
	-->

</xs:schema>
BSJB         v2.0.50727     l     #~  Ñ  ƒ  #Strings    H&  »(  #US O     #GUID    O    #Blob         W
	   ˙3      O   #   $   k   _      ö   7                           
        /
 NG U m £ó
 ≠G "# 4   xm Õ
 G
 ^T só
 öG “∂  
 ¬∞
 Ÿ∞
 ˆ∞
 	∞
 .	∞
 G	∞
 b	∞
 }	∞
 ñ	∞
 Ø	∞
  	∞
 
„	
 #
„	 W

 
G
 Ö
G £
 Ÿ

 ˇ
G  1 P
 sG
 xG ú %m mó àó
 ∂£
 ÂG 
 ;/
 \T
 ÜT
 óT
 µT
 —G
 ÁT
 ˘T
 / ó >ó ¨ Õ È  4 H k
 öG Ωó ‰ó ∂ ç Ø   	 ' @ U |c çc             $ B       _ B 	     t B   	   è B      ™ B    Å  « B 	   Å  ’ B       È B    )   ˚ B   	 ,   B  
 /   B 	  9   &B 	  =   7B 	  @   AB 	  B   XB 	  D   n    J   ~B 	  K   ìB   M   •B   \   ¥B   ]   ÃB   ^   ‹B   _   ıB   `   B    a   $B    b   6B  " c   QB  " d   \B  # e   pB  $ f   |B  % g   ëB  % h   ´B  % i   ŒB  % j   ÈB  % k  V6  ¡O  €S  „W  ÚW  O  O  V•  V±  Vø  V—  7’  ÚW  „W  V‡  „W  VÓ  iW  „W  V˙  V s
 ß ﬁ" ‚
 ÌW  ¯ V& Ã’  Ã’  ÿ’  Â9 ÌW  Ï ÒW  Ò’ P     ñ y
  x     ñ ∂  ¿     ñ ∆  !    ñ ’%  <!    ñ È+ 	 d!    Üˆ2  l!    Üˆ:  Ä!    ƒ g2  Ï!    Ü ÑB  ""    Üˆ2  ,"    ·àJ  Â$    Üˆ2  $    ·àJ  %%    Üˆ2  8%    ÑˆZ  »%    ƒ g2  @&    Ñ !a  '    Å 5k  h(    Å Gp  )    Å iw  4)    Å {  (+    Å åÖ  ®+    Å °ã        ƒ≤ê        ƒøñ        ƒ“õ        ƒ·õ        ƒÚõ         ƒõ !       ƒõ "       ƒ õ # ‰+    ÑˆZ $ +    ƒ “õ & p,    ƒ ·õ ' Ï,    ƒ ≤ê ( 4-    ƒ Úõ ) |.    ƒ õ * ‰.    ƒ õ + L/    ƒ  õ ,       ƒ,† - ï/    Üˆ© - ®/    ƒ øñ / ‹/    ƒ ,† / %0    Üˆ∂ / 80    ƒ øñ 1 l0    ƒ ,† 1 •0    Üˆ√ 1 ‘0    ƒ ≤ê 3 01    ƒ øñ 4 d1    ƒ “õ 4 1    ƒ ·õ 5 Ñ2    Å ,À 6 ‘2    ƒ Úõ 7 4    ƒ õ 8 Ñ4    ƒ õ 9 Ï4    ƒ  õ : 85    Üˆÿ ; ¥5    ƒ g2 = 06    Å D2 = ∏6    Å Q2 = @7    ÜˆÂ = {7    ƒ g2 ? ê7    Å [2 ? 8    ÜˆÚ ? l8    ƒ g2 A @9    Üˆ˛ A d9    ƒ g2 C |<    ÜˆC ·<    ƒ g2 E  =    Å y2 E Ä=    Å Ñ2 E ¯=    Å è2 E J    Å ¢E ˜J    Üˆ2 H ˇJ    Üˆ*H K    ƒ g2 J 4K    Ü 2J †K    Ü •B K K    Ü /2M \L    Ü ÃB N ¨L    Ü ıB P ¸L    Ü $B R LM    Ü L2T ∏M    Ü QB U N    Ü d2W tN    Ü pB X ƒN    Ü }2Z N    Ü ëB [ @O    Ü §2] lO    Ü ŒB ^ πO    Üˆ2 ` ¡O    Üˆ2 ` …O    Üˆ2 ` —O    Üˆ2 ` ŸO    Üˆ2 ` ·O    Üˆ2 ` ÈO    Üˆ2 ` ÒO    Üˆ2 ` ˘O    Üˆ2 ` P    Üˆ2 ` 	P    Üˆ2 ` P    Üˆ2 ` P    Üˆ2 ` !P    Üˆ2 ` )P    Üˆ2 ` 1P    Üˆ2 ` 9P    Üˆ2 `    ˛   ˛         ˛      ¯   ˛   ˛   !   ˛   V   ˛   +   4   4   ˛   V   4   8   C   8   F   I   S   W   `   f   o   8   8   8   8   8   8   ˛   V   8   8   o   8   8   8   8   ˛   V   ˛   V   ˛   V   o   8   8   y   8   8   8   8   ˛   V   ˛   V   ˛   V   ˛   V   ˛   Ü   ë   ú   °   ˛   V   ˛   ˛   ®   ˛   ˛   ®   ˛   ®   ˛   ®   ˛   ˛   ®   ˛   ˛   ®   ˛   ˛   ®   ˛   ˛   ®    ! µJ ë ˆk ô ˆk ° ˆk © ˆk ± ˆk π ˆk ¡ ˆk … ˆk — ˆk Ÿ ˆ<· ˆk È ˆAÒ ˆ2 ) d
F˘ q
K	 O 	å
T˘ ≤ê 	å
a˘ ì
g	 ˆ2  ˆZ µ
lø
õ ˛q˘ 
2 !	u	y)*1ˆ2 9ˆk Aä“Q®€ Ñ2  ˆ2  ∑Î ø¯9 …˝“u	€9 Á˝9 Ò˝	9 ˘˝9 ˝9 ˝		 uY“ “u	03˘ :9)K?Yõ Y bF1 Ni¬Tq–Zq Y^q‹cyÒ2  ˘gÅW âDÅâPàëˆéi ik i sk )*ó	†)*®ÅyW ôê ô•œ©∫÷±“u	÷Ÿ)*?©ﬂyi Û2 ¡ê ¡˛Ë…ˆ2 q ñ 1 2Ì—YÛŸIÎq V˙…]id˝…n˝…yŸÄu	n˝	y39 è$ ˆ.	óu	4	å
F	å
r) üu9 “õ ·ˆÑ) ˝îÒ$ö) \¢˘ `2 ) |ÆYõ ˘ â≥9 êÀ üª ßW ˘ ∂2 1 ∆¡!÷k q YK!ﬂ«!YÃ)”9 ¯$Å ˆÿ˘ c˘ 2 1'ﬂÅ ’ aYy =y L"y [y ˆAy gy u2Å ÜW 9ó>Å §W AºDI◊W Å ‚W 1ÎJâ ˆ2 â ˝W â  Qˆ2 Q"W Q˝W Q;–9ˆ⁄aˆ"iÑuqˆ2 yˆ2 . [ ∫. c ∫. k ‹. C ∫.  ô. ; …. s Â.  à. # ∫. + ¿. 3 àÉ ˚ ê ∂„Kãc˚ ÇÉÀÉ”J£À£”J√”J√À„”J„ÀÀ”J#À#”JC”JCÀc”JcÀÉ”JÉÀ£”J£À√”J√À„À„”J”JÀ#”J#ÀC”JCÀcÀc”J¿	≥‡ 
≥5 
≥É@
≥¶Ä
≥»¿
≥ ≥R@≥µP[â‰jw≥ﬁ):MZekzÁ+9{’+yúæH™      ÒÄ             A
                             >                ó               ¸                m           û  8     —  xF       8π    .  0J    ^  ∞Ô    í         <Module> gmi_common_raiffeisen.dll GBO_DbUtils_Common_Raiffeisen GMI.Custom.Common_Raiffeisen ProcessDefaultEvents ProcessDefaultEventsPlugin FormattingStrategyCsvRaiff FormattingStrategyCsvRaiffMr ExportB2RLCSV ExportB2RLCSVCommon ExportB2RLCSVMain ExportB2RLCSVProd ExportMRCVS Basel2Export Basel2ProdExport MR_Export GBL_provisions_prepare GBL_ContractProcessor InputParameters GBL_ProvisionsCommit ProcessXmlHandler basel2_prepare basel2_prepare_response basel2_transfer basel2_transfer_response provisions_prepare Provisions_prepare_response Provisions_commit Provisions_commit_response mr_prepare mr_prepare_response mr_transfer mr_transfer_response basel2_production_prepare basel2_production_prepare_response basel2_production_transfer basel2_production_transfer_response gmi_core GMI.Core GMI_DbUtilsBase GMI_LegoObject mscorlib System Object GMI_IFormattingStrategy GMI_Session ExistProvisionEntriesInKuDnev System.Data DataTable DateTime GetContractList GetContractLsk GetdisputableClaims InsertDateTo .ctor gmi_leasing GMI.Leasing.BusinessLogic GBL_default_event ProcessDefaultEvents_PluginParams input_parameters RunBl System.Xml XmlDocument Run GMI.Core.GMI_IFormattingStrategy.FormatValue FormatValue internal_fs GMI_IoChannel channel b2rl_db_prefix snapshot_db_prefix fs fs_single_row Nullable`1 GetNullableDtString PrepareWriteToCSV PrepareFiles System.IO TextWriter CloseFile DataRow ProcessSingleRow PrepareFieldNamesRow PrepareFooterRow GetDataTable GetTablesForExport CreateFileName PrepareHeaderRow GetInterfaceId GetInterfaceName GetPeriodName GetUnitName GetRepDate oc_report_id RunNonRetail RunRetail RunProdExport user_name drLsk processTRP processNPL processLTP Decimal Book provision_date GMI.Leasing.BusinessObjects GBO_Pogodba pog drPorocilo session_id date_to blox_info_response basel2_prepare_Blox_GetInfo basel2_transfer_Blox_GetInfo mr_prepare_Blox_GetInfo mr_transfer_Blox_GetInfo basel2_production_prepare_Blox_GetInfo basel2_production_transfer_Blox_GetInfo snapshot_id id_oc_report commit date mr_report_id session dat_aktiv dat_zakl id_cont b2_prefix _xml_doc val table_name ch tw file_name err data_row table rowCount tableName id_mr_report parameters id_dogodka neto storno xml_doc System.Reflection AssemblyTitleAttribute AssemblyDescriptionAttribute AssemblyConfigurationAttribute AssemblyCompanyAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyTrademarkAttribute AssemblyCultureAttribute AssemblyVersionAttribute AssemblyDelaySignAttribute AssemblyKeyFileAttribute System.Runtime.CompilerServices CompilationRelaxationsAttribute RuntimeCompatibilityAttribute gmi_common_raiffeisen GMI_DBHelper get_DBHelper ExecuteScalar Int32 String Format ExecuteNonQuery GMI_Configuration Singleton LoadSqlEmbeddedOrFromFile GMI_SessionBoundObject SetLongTimeout Exception get_Message Concat GMI_Exception Create GMI_ProcessXmlHandlerAttribute GMI_ProcessXmlHandlerCodeAttribute Type RuntimeTypeHandle GetTypeFromHandle GMI_Memento DeserializeXml GetType get_Value get_Year ToString op_Equality get_Month get_Day get_Hour get_Minute get_Second Replace Trim XmlConvert Substring GetCustomSetting CreateMessage get_Item GetChannel DataRowCollection get_Rows InternalDataCollectionBase System.Collections IEnumerator GetEnumerator get_Current MoveNext IDisposable Dispose results GMI.Core.Data Tab_IoChannels channel_encoding System.Text Encoding GetEncoding get_Default StreamWriter WriteLine Write channel_path Directory Exists DirectoryInfo CreateDirectory Path DirectorySeparatorChar Char EndsWith Combine IOException Close File Delete StringBuilder get_Table DataColumnCollection get_Columns DataColumn get_DataType IsNull Append get_Count get_Length Remove get_ColumnName get_Now ToLower get_UserName GMI_LegoTransactionFlagAttribute GMI_LegoTransactionFlagEnum GMI_UserPermissions get_Permissions GMI_UserPermissionEnum CheckPrivileges GMI_LogMsgGroupEnum GMI_LogMsgLevelEnum Log BeginTrans GMI_Translations Translations Lookup AddMonths Guid NewGuid string_results Commit DataView get_DefaultView set_Sort Find DataRowView get_Row get_Today IsInTransaction Rollback GBO_DbUtils gsp_TransferKuDnevTmp op_GreaterThan op_Subtraction op_LessThan op_Inequality op_UnaryNegation id_pog GMI_Utils TrimToLength nacin_leas GMI_Nastavit get_Singleton Tab_Nastavit dom_valuta id_kupca gsp_KnjiziDogodek description blox_parameter parameter name blox_parameter_type type GMI_AsyncLegoManager GMI_AsyncTask System.Xml.Serialization XmlTypeAttribute XmlRootAttribute GMI.Custom.Common_Raiffeisen.sql.defaultevents.sql GMI.Custom.Common_Raiffeisen.sql.Provisions.sql GMI.Custom.Common_Raiffeisen.sql.scripts.sql GMI.Custom.Common_Raiffeisen.sql.marketrisk.sql GMI.Custom.Common_Raiffeisen.sql.retail_scripts.sql GMI.Custom.Common_Raiffeisen.schema.schema.xsd     ss e l e c t   c o u n t ( * )   f r o m   d b o . k u _ d n e v   w h e r e   v r s t a _ d o k   =   ' P O P '   Åas e l e c t   i d _ c o n t ,   n a c i n _ l e a s ,   i d _ k u p c a ,   i d _ p o g    
 	 	 	 	 	 f r o m   d b o . p o g o d b a    
 	 	 	 	 	 w h e r e    
 	 	 	 	 	 ( s t a t u s _ a k t   =   ' A '   a n d   d a t _ a k t i v   < =   { 0 } )    
 	 	 	 	 	 o r   ( s t a t u s _ a k t   =   ' Z '   a n d   d a t _ z a k l   >   { 1 } ) ç= 
 	 	 	 S E L E C T     i d _ c o n t ,  
 	 	 	 	 s u m ( T R _ P R O V )   a s   T R _ P R O V ,  
 	 	 	 	 s u m ( N P L _ P R O V   -   N P L _ P R O V _ P )   a s   N P L _ P R O V ,  
 	 	 	 	 s u m ( L T _ 6 0 _ 8 9   -   L T P _ 6 0 _ 8 9 )   a s   L T _ 6 0 _ 8 9 ,  
 	 	 	 	 s u m ( L T _ 9 0 _ 1 1 9   -   L T P _ 9 0 _ 1 1 9 )   a s   L T _ 9 0 _ 1 1 9 ,  
 	 	 	 	 s u m ( L T _ 1 2 0 _ 1 7 9   -   L T P _ 1 2 0 _ 1 7 9 )   a s   L T _ 1 2 0 _ 1 7 9 ,  
 	 	 	 	 s u m ( L T _ 1 8 0 _ 3 6 4   -   L T P _ 1 8 0 _ 3 6 4 )   a s   L T _ 1 8 0 _ 3 6 4 ,  
                                 s u m ( L T _ 3 6 5   -   L T P _ 3 6 5 )   a s   L T _ 3 6 5  
 	 	 	 	 F R O M  
 	 	 	 	 	 ( S E L E C T     i d _ c o n t , i d _ d o g o d k a ,  
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' T R _ P R O V '   T H E N   S U M ( k r e d i t _ d o m )   E L S E   0   E N D   a s   T R _ P R O V ,        
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' N P L _ P R O V '   T H E N   S U M ( k r e d i t _ d o m )   E L S E   0   E N D   a s   N P L _ P R O V ,        
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' N P L _ P R O V _ P '   T H E N   S U M ( d e b i t _ d o m )   E L S E   0   E N D   a s   N P L _ P R O V _ P ,        
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T 6 0 _ 8 9 '   T H E N   S U M ( k r e d i t _ d o m )   E L S E   0   E N D   a s   L T _ 6 0 _ 8 9 ,        
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T P 6 0 _ 8 9 '   T H E N   S U M ( d e b i t _ d o m )   E L S E   0   E N D   a s   L T P _ 6 0 _ 8 9 , 	 	 	  
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T 9 0 _ 1 1 9 '   T H E N   S U M ( k r e d i t _ d o m   )   E L S E   0   E N D   a s   L T _ 9 0 _ 1 1 9 ,      
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T P 9 0 _ 1 1 9 '   T H E N   S U M ( d e b i t _ d o m   )   E L S E   0   E N D   a s   L T P _ 9 0 _ 1 1 9 ,      
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T 1 2 0 _ 1 7 9 '   T H E N   S U M ( k r e d i t _ d o m )   E L S E   0   E N D   a s   L T _ 1 2 0 _ 1 7 9 ,    
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T P 1 2 0 _ 1 7 9 '   T H E N   S U M ( d e b i t _ d o m )   E L S E   0   E N D   a s   L T P _ 1 2 0 _ 1 7 9 ,    
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T 1 8 0 _ 3 6 4 '   T H E N   S U M ( k r e d i t _ d o m )   E L S E   0   E N D   a s   L T _ 1 8 0 _ 3 6 4 ,  
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T P 1 8 0 _ 3 6 4 '   T H E N   S U M ( d e b i t _ d o m )   E L S E   0   E N D   a s   L T P _ 1 8 0 _ 3 6 4 ,  
                                                 C A S E   W H E N   i d _ d o g o d k a   =   ' L T 3 6 5 '   T H E N   S U M ( k r e d i t _ d o m )   E L S E   0   E N D   a s   L T _ 3 6 5 ,  
 	 	 	 	 	 	 C A S E   W H E N   i d _ d o g o d k a   =   ' L T P 3 6 5 '   T H E N   S U M ( d e b i t _ d o m )   E L S E   0   E N D   a s   L T P _ 3 6 5                          
 	 	 	 	 	 F R O M   d b o . l s k  
 	 	 	 	 	 W H E R E   i d _ c o n t   =   { 0 }     a n d   d a t u m _ d o k   < =   { 1 }  
 	 	 	 	 	 G R O U P   B Y   i d _ c o n t ,   i d _ d o g o d k a  
 	 	 	 	 	 )   a    
 	 	 	 	 G R O U P   B Y   i d _ c o n t ÅâS E L E C T   C A S E   W H E N   ( S E L E C T   c o u n t ( * )   f r o m   d b o . c u s t o m _ s e t t i n g s   w h e r e   c o d e   =   ' P r o v i s i o n s _ s i f _ t e r j ' )   =   0    
 	 	 	 	 	 T H E N   ' '   E L S E   ( s e l e c t   v a l   f r o m   d b o . c u s t o m _ s e t t i n g s   w h e r e   c o d e   =   ' P r o v i s i o n s _ s i f _ t e r j ' )   E N D   cU P D A T E   { 0 } . d b o . b 2 i n i   S E T   d a t e _ t o _ p r o d   =   g e t d a t e ( )  #d e f a u l t e v e n t s . s q l  uA n   e r r o r   o c c u r e d   w h i l e   p r e p a r i n g   d a t a   f o r   D e f a u l t   e v e n t s .     ?  	1 9 0 1  9 9 9 9 0 9 0 1  	1 9 0 0  9 9 9 9 0 8 0 1  	1 9 0 2  9 9 9 9 1 0 0 1  { 0 : d 2 }  '9 9 9 9 - 0 9 - 0 1   0 0 : 0 0 : 0 0 '9 9 9 9 - 0 8 - 0 1   0 0 : 0 0 : 0 0 '9 9 9 9 - 1 0 - 0 1   0 0 : 0 0 : 0 0 -    :  "  " "  B 2 R L D a t a b a s e  IM i s s i n g   c u s t o m   s e t t i n g :   B 2 R L D a t a b a s e  %O c S n a p s h o t D a t a b a s e  cM i s s i n g   c o n f i g u r a t i o n   s e t t i n g :   O c S n a p s h o t D a t a b a s e  	B 2 R L  3E r r o r   w h i l e   w r i t i n g   f i l e    :    WC a n n o t   c r e a t e   d i r e c t o r y   f o r   o u t p u t   c h a n n e l !  )M i s s i n g   I O   s e t t i n g s !  |  " |  | "  _  	. c s v  G" { 0 } " | " { 1 } " | " { 2 } " | " { 3 } " | " { 4 } " | " { 5 } "  s e l e c t   *   f r o m    . d b o .  ss e l e c t   p r o j e c t _ c o d e  
                                                               f r o m    ÄÖ. d b o . b 2 h e a d e r  
                                                               w h e r e   t a b l e _ n a m e   =   ' ' ÄÉs e l e c t   l o g i c a l _ i n t e r f a c e _ i d  
                                                               f r o m    }s e l e c t   i n t e r f a c e _ f i l e _ i d  
                                                               f r o m    ]s e l e c t   i n t e r f a c e _ n a m e  
 	 	 	 	                             f r o m    k. d b o . b 2 h e a d e r  
 	 	 	 	                             w h e r e   t a b l e _ n a m e   =   ' Ms e l e c t   p e r i o d  
 	 	 	 	                             f r o m    Us e l e c t   c o m p a n y _ i d  
 	 	 	 	                             f r o m    . d b o . b 2 i n i  /S E L E C T   t a b l e _ n a m e   F R O M    G. d b o . b 2 h e a d e r   W H E R E   i s _ s n a p s h o t   =   1  )s e l e c t   d a t e _ t o   f r o m    G. d b o . o c _ r e p o r t s   w h e r e   i d _ o c _ r e p o r t =  G. d b o . b 2 h e a d e r   W H E R E   i s _ s n a p s h o t   =   0  3s e l e c t   d a t e _ t o _ p r o d   f r o m    M R I S K  S E L E C T   *   F R O M    . d b o . m r h e a d e r  1S E L E C T   t a r g e t _ d a t e   F R O M    G. d b o . m r _ r e p o r t s   W H E R E   i d _ m r _ r e p o r t =  sS E L E C T   p r o j e c t _ c o d e  
                                                               F R O M    ÄÖ. d b o . m r h e a d e r  
                                                               W H E R E   t a b l e _ n a m e   =   ' ÄÉS E L E C T   l o g i c a l _ i n t e r f a c e _ i d  
                                                               F R O M    }S E L E C T   i n t e r f a c e _ f i l e _ i d  
                                                               F R O M    ]S E L E C T   i n t e r f a c e _ n a m e  
 	 	 	 	                             F R O M    k. d b o . m r h e a d e r  
 	 	 	 	                             W H E R E   t a b l e _ n a m e   =   ' MS E L E C T   p e r i o d  
 	 	 	 	                             F R O M    US E L E C T   c o m p a n y _ i d  
 	 	 	 	                             F R O M    . d b o . m r i n i  QM i s s i n g   c u s t o m   s e t t i n g :   B a s e l   2   d a t a b a s e  ÄÅS E L E C T   C O U N T ( * )   F R O M   { 0 } . d b o . o c _ r e p o r t s   W H E R E   i d _ o c _ r e p o r t   =   { 1 }  S n a p s h o t   i d    K  d o e s   n o t   e x i s t   i n   s n a p s h o t   d a t a b a s e !  s c r i p t s . s q l  uA n   e r r o r   o c c u r e d   w h i l e   t r a n s f e r i n g   N O N   R E T A I L   B 2 R L   d a t a   .    %r e t a i l _ s c r i p t s . s q l  mA n   e r r o r   o c c u r e d   w h i l e   t r a n s f e r i n g   R E T A I L   B 2 R L   d a t a   .    #b 2 _ p r o d u c t i o n . s q l  }A n   e r r o r   o c c u r e d   w h i l e   t r a n s f e r i n g   B 2 R L   d a t a   f r o m   p r o d u c t i o n .    m a r k e t r i s k . s q l  s  mA n   e r r o r   o c c u r e d   w h i l e   t r a n s f e r i n g   M a r k e t   R i s k   d a t a   .    ÄëS E L E C T   M A X ( i d _ m r _ r e p o r t )   F R O M   { 0 } . d b o . m r _ r e p o r t s   W H E R E   u s e r _ n a m e   =   ' { 1 } ' 3S p e c i a l S e r v i c e s P r o v i s i o n s  _P r o v i s i o n s   p r e p a r e   -   s t a r t i n g   f o r   a l l   c o n t r a c t s -G B L _ p r o v i s i o n s _ p r e p a r e  %E P r o v E n t r i e s K u D n e v  P r o v i s i o n s . s q l  d a t e _ t o  o c _ r e p o r t s  i d _ o c _ r e p o r t  i d _ c o n t  T R _ P R O V  'I N T E R E S T S _ I N _ O D R _ 9 0  N P L _ P R O V  N P L _ P R O V _ P  L T _ P R O V _ 3 6 5  L T _ 6 0 _ 8 9  L T 6 0 _ 8 9  L T _ 9 0 _ 1 1 9  L T 9 0 _ 1 1 9  L T _ 1 2 0 _ 1 7 9  L T 1 2 0 _ 1 7 9  L T _ 1 8 0 _ 3 6 4  L T 1 8 0 _ 3 6 4  L T _ 3 6 5  L T 3 6 5  L T P 3 6 5  L T _ P R O V _ 1 8 0 _ 3 6 4  L T P 1 8 0 _ 3 6 4  L T _ P R O V _ 1 2 0 _ 1 7 9  L T P 1 2 0 _ 1 7 9  L T _ P R O V _ 9 0 _ 1 1 9  L T P 9 0 _ 1 1 9  L T _ P R O V _ 6 0 _ 8 9  L T P 6 0 _ 8 9  { 0 } - { 1 } C P r o v i s i o n s  0 0  0 0 0  E  S t a r t s   d a t a   e x p o r t   f o r   b a s e l   I I .    s n a p s h o t _ i d  A  I d   o f   s n a p s h o t   t o   b e   e x p o r t e d .    b a s e l 2 _ p r e p a r e  < c o o k i e >  < / c o o k i e >  b a s e l 2 _ t r a n s f e r  %p r o v i s i o n s _ p r e p a r e  #P r o v i s i o n s _ c o m m i t  K  S t a r t s   d a t a   e x p o r t   f o r   m a r k e t   r i s k .    	d a t e    T a r g e t   d a t e .    m r _ p r e p a r e  c  S t a r t s   d a t a   e x p o r t   f o r   m a r k e t   r i s k   t o   c s v   f i l e .    m r _ r e p o r t _ i d  1  M a r k e t   r i s k   r e p o r t   I D .    m r _ t r a n s f e r  3b a s e l 2 _ p r o d u c t i o n _ p r e p a r e  5b a s e l 2 _ p r o d u c t i o n _ t r a n s f e r  ∫·õ- Eª #5˙í… ∑z\V4‡â 
 	     % % ) - 	 1  - 5 9        X XÄà Äàx x P PÄÄ ÄÄp p` `D9 D =Ah h E    }    Äâ   	 ÄïÄëÄë%  T	Namespaceurn:gmi:nova:leasing process_default_events   Ä°Ä• )Ä°%	  Ä°1         =Ä°1   Äï -  Ä±  Äπ     9ÄπÄΩ	 Ä≈  Ä≈ Ä≈ ÄïÄë 
 ÄïÄë	Ä≈59ÄëÄπÄΩ  Ä— 	Ä›   ÄÈ ÄÌ ÄÌ ÄÂ ÄÂÄÂÄÌÄπÄΩ     1 1
 	Äët Äı         Ä˘ Ä˝ ÅÅÅ	   Å  Å  Å  9  '99DA@ÄëÄëÅÄπÄΩ 9 == ===== ==9   Å!0 "========G  T	Namespaceurn:gmi:nova:common_raiffeisenT
SchemaFile
schema.xsdÅ)Å-E A basel2_prepare TBloxInfoMethodbasel2_prepare_Blox_GetInfo 		P	Å1C basel2_transfer TBloxInfoMethodbasel2_transfer_Blox_GetInfo	X	Å1 provisions_prepare  	`	Å1 Provisions_commit  	h	Å19 
mr_prepare TBloxInfoMethodmr_prepare_Blox_GetInfo	p	Å1; mr_transfer TBloxInfoMethodmr_transfer_Blox_GetInfo	x	Å1W basel2_production_prepare TBloxInfoMethod&basel2_production_prepare_Blox_GetInfo
ÄÄ	Å1Y basel2_production_transfer TBloxInfoMethod'basel2_production_transfer_Blox_GetInfo
Äà	Å1/  T	Namespaceurn:gmi:nova:common_raiffeisen=  T	Namespaceurn:gmi:nova:common_raiffeisenT
IsNullable  Nova system    C# objects for Nova system.       GMI   GMI 2003-2007          TWrapNonExceptionThrowsÃ∆         Ó∆                         ‡∆                   _CorDllMain mscoree.dll     ˇ%         Ä                  0  Ä                   H   X‡ X          X4   V S _ V E R S I O N _ I N F O     ΩÔ˛             ?                         D    V a r F i l e I n f o     $    T r a n s l a t i o n       ∞∏   S t r i n g F i l e I n f o   î   0 0 0 0 0 4 b 0   P   C o m m e n t s   C #   o b j e c t s   f o r   N o v a   s y s t e m .   (   C o m p a n y N a m e     G M I   @   F i l e D e s c r i p t i o n     N o v a   s y s t e m   0   F i l e V e r s i o n     2 . 2 . 5 . 0   T   I n t e r n a l N a m e   g m i _ c o m m o n _ r a i f f e i s e n . d l l   @   L e g a l C o p y r i g h t   G M I   2 0 0 3 - 2 0 0 7   \   O r i g i n a l F i l e n a m e   g m i _ c o m m o n _ r a i f f e i s e n . d l l   8   P r o d u c t N a m e     N o v a   s y s t e m   4   P r o d u c t V e r s i o n   2 . 2 . 5 . 0   8   A s s e m b l y   V e r s i o n¿ 